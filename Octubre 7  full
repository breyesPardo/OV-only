// ================== CONFIGURACI√ìN Y CONSTANTES ==================
const CONFIG = {
  HOJAS: {
    ordenes: {
      nombre: "OrdenesRetenidas",
      headers: ["Zona", "Cliente", "√ìrden", "Fecha", "Observaci√≥n", "Estado", "Motivo Retenci√≥n"]
    },
    logs: {
      nombre: "LogsLiberaciones",
      headers: ["OrderNum", "Zona", "Cliente", "Fecha Liberaci√≥n", "Hora Liberaci√≥n", "UsuarioID", "Nombre Usuario", "Observaciones", "Estado"]
    },
    control: {
      nombre: "ControlEnvios",
      headers: ["N√∫mero de Orden", "Estado Actual", "Fecha √öltimo Env√≠o", "Hora √öltimo Env√≠o", "Tipo de Notificaci√≥n", "¬øRetenida Notificada Hoy?", "¬øLiberaci√≥n Notificada Hoy?", "Cliente", "Zona"]
    },
    contactos: {
      nombre: "ContactosZonas",
      headers: ["Zona", "Nombre Representante", "WhatsApp", "Email", "Activo"]
    },
    errores: {
      nombre: "LogErrores",
      headers: ["Fecha", "Hora", "Tipo", "Error", "Detalles"]
    }
  },
  CONTACTOS_INICIALES: [
    ["Zona1Cundinamarca-Boyac√°-Santa", "Juan Camilo Gil Orjuela", "3182260739", "", "SI"],
    ["Zona2-Cundinamarca", "Sergio Andres Rojas Sanchez", "3182260739", "", "SI"],
    ["Zona3-Boyac√°", "Yury Fonseca Patarroyo", "3182260739", "", "SI"],
    ["Zona4-Santander-Cesar", "Oscar Fernando Chingate Cruz", "3182260739", "", "SI"],
    ["Zona5-Norte de Santander", "Freddy Andres Bastianelli Fontana", "3182260739", "", "SI"],
    ["Zona6-Suroeste Antioque√±o", "Carlos Andres Arboleda Tabares", "3182260739", "", "SI"],
    ["Zona7-Oriente y Nte Antioqu√≠a", "Rafael Leonardo Pe√±a Sarmiento", "3182260739", "", "SI"],
    ["Zona8-Meta", "Ximena Nathalia Nu√±ez Cruz", "3182260739", "", "SI"],
    ["Zona9-Casanar√©", "Angel Alonso Vasquez Morales", "3182260739", "", "SI"],
    ["Zona10-Tolima Centro - Norte", "Assad Fraija Lopera", "3182260739", "", "SI"],
    ["Zona11-Tolima Sur y Oriente", "Edna Liliana Portillo", "3182260739", "", "SI"],
    ["Zona12-Huila Norte", "Domingo Jose Soto Martinez", "3182260739", "", "SI"],
    ["Zona14-HuilaCentroSur-Caquet√°", "Ivan Dario Lopez Rubio", "3182260739", "", "SI"],
    ["Zona15-Cauca", "Claudia Patricia Ussa", "3182260739", "", "SI"],
    ["Zona16-Nari√±o", "Carlos Alberto Castillo √ëa√±ez", "3182260739", "", "SI"],
    ["Zona17-Valle", "Diego Herney Guisa Velasquez", "3182260739", "", "SI"],
    ["Zona18-Eje Cafetero", "Juan Pablo Londo√±o Aristizabal", "3182260739", "", "SI"],
    ["Zona 19 Palma", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 20 Urab√°", "Gadelia Gliseth Gomez Gomez", "3182260739", "", "SI"],
    ["Zona 21 Ca√±a", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 23 - Caribe seco", "Sandra Judith Castillo", "3182260739", "", "SI"],
    ["Zona 25 Flores", "Javier Leonardo Erazo Velandia", "3182260739", "", "SI"],
    ["Ecuador", "Sandra Valverde", "3182260739", "", "SI"],
    ["Licitaciones Colinagro", "Sandra Valverde", "3182260739", "", "SI"],
    ["Bolivia", "Representante sin asignar", "3182260739", "", "SI"],
    ["Gerencia General", "Representante sin asignar", "3182260739", "", "SI"],
    ["Republica Dominicana", "Representante sin asignar", "3182260739", "", "SI"]
  ]
};

// Cache y utilidades
const CACHE = { credenciales: null, contactos: null, ultimaCarga: 0 };
const SHEETS_CACHE = {};
const PREPOSICIONES = new Set(['de', 'del', 'la', 'las', 'los', 'da', 'do', 'dos']);

// ================== FUNCIONES AUXILIARES ==================
const showAlert = (titulo, mensaje) => SpreadsheetApp.getUi().alert(titulo, mensaje, SpreadsheetApp.getUi().ButtonSet.OK);

function registrarError(tipo, error, detalles = '') {
  try {
    const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, CONFIG.HOJAS.errores.headers);
    const fecha = formatDate(new Date());
    const hora = formatDate(new Date(), "HH:mm:ss");
    
    hojaErrores.appendRow([fecha, hora, tipo, error, detalles]);
    
    // Mantener solo los √∫ltimos 1000 registros
    if (hojaErrores.getLastRow() > 1001) {
      hojaErrores.deleteRows(2, hojaErrores.getLastRow() - 1001);
    }
  } catch (e) {
    Logger.log(`Error al registrar error: ${e.message}`);
  }
}

function verificarZonaHoraria() {
  const zonaActual = Session.getScriptTimeZone();
  if (zonaActual !== "America/Bogota") {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      ss.setSpreadsheetTimeZone("America/Bogota");
      Logger.log("Zona horaria actualizada a America/Bogota");
    } catch (e) {
      registrarError("Zona Horaria", "No se pudo establecer zona horaria America/Bogota", e.message);
    }
  }
}

function getCredenciales() {
  if (CACHE.credenciales) return CACHE.credenciales;
  
  const props = PropertiesService.getScriptProperties();
  CACHE.credenciales = {
    DB: {
      url: props.getProperty('DB_URL'),
      user: props.getProperty('DB_USER'),
      pass: props.getProperty('DB_PASS')
    },
    API: {
      url: props.getProperty('API_URL'),
      token: props.getProperty('API_TOKEN'),
      channel: props.getProperty('API_CHANNEL')
    }
  };
  
  return CACHE.credenciales;
}

function getSheet(nombre, headers = null, crear = true) {
  if (SHEETS_CACHE[nombre]) return SHEETS_CACHE[nombre];
  
  let hoja = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(nombre);
  
  if (!hoja && crear) {
    hoja = SpreadsheetApp.getActiveSpreadsheet().insertSheet(nombre);
    if (headers) {
      hoja.getRange(1, 1, 1, headers.length).setValues([headers])
        .setFontWeight("bold").setBackground("#4285f4").setFontColor("white");
      hoja.setFrozenRows(1);
      hoja.autoResizeColumns(1, headers.length);
    }
  }
  
  if (hoja) SHEETS_CACHE[nombre] = hoja;
  return hoja;
}

function formatDate(fecha, formato = "dd/MM/yyyy") {
  if (!fecha) return "Sin fecha";
  try {
    const fechaObj = fecha instanceof Date ? fecha : new Date(fecha);
    return Utilities.formatDate(fechaObj, "America/Bogota", formato);
  } catch (e) {
    return String(fecha);
  }
}

function procesarFecha(fechaString) {
  if (!fechaString) return "";
  fechaString = String(fechaString);
  
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(fechaString)) return fechaString;
  
  if (fechaString.includes('T') || fechaString.includes('-')) {
    try {
      const [a√±o, mes, dia] = fechaString.split('T')[0].split('-');
      return `${dia.padStart(2, '0')}/${mes.padStart(2, '0')}/${a√±o}`;
    } catch (e) {}
  }
  
  return fechaString;
}

function formatearNombreCorto(nombreCompleto) {
  if (!nombreCompleto) return "Representante";
  const partes = nombreCompleto.trim().split(/\s+/)
    .slice(0, 2)
    .filter(parte => !PREPOSICIONES.has(parte.toLowerCase()));
  return partes.length > 0 ? partes.join(' ') : nombreCompleto.split(/\s+/).slice(0, 2).join(' ');
}

// ================== GESTI√ìN DE CREDENCIALES ==================
function verPropiedadesGuardadas() {
  const propiedades = PropertiesService.getScriptProperties().getKeys();
  showAlert('üîê Credenciales guardadas',
    propiedades.length ? propiedades.map(p => `‚Ä¢ ${p}`).join('\n') : 'No hay credenciales guardadas');
}

function actualizarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const credencial = ui.prompt('Actualizar Credencial',
    'Opciones: DB_URL, DB_USER, DB_PASS, API_URL, API_TOKEN, API_CHANNEL',
    ui.ButtonSet.OK_CANCEL);
  
  if (credencial.getSelectedButton() !== ui.Button.OK) return;
  
  const nombre = credencial.getResponseText().trim();
  const validas = ['DB_URL', 'DB_USER', 'DB_PASS', 'API_URL', 'API_TOKEN', 'API_CHANNEL'];
  
  if (!validas.includes(nombre)) {
    showAlert('‚ùå Error', 'Credencial no v√°lida');
    return;
  }
  
  const valor = ui.prompt('Nuevo Valor', `Ingresa el nuevo valor para ${nombre}:`, ui.ButtonSet.OK_CANCEL);
  
  if (valor.getSelectedButton() === ui.Button.OK) {
    PropertiesService.getScriptProperties().setProperty(nombre, valor.getResponseText());
    CACHE.credenciales = null;
    showAlert('‚úÖ √âxito', `${nombre} actualizada`);
  }
}

function eliminarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const propiedades = props.getKeys();
  
  if (!propiedades.length) {
    showAlert('Sin Credenciales', 'No hay credenciales guardadas');
    return;
  }
  
  const response = ui.prompt('Eliminar Credencial',
    'Credenciales:\n' + propiedades.join('\n'),
    ui.ButtonSet.OK_CANCEL);
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const credencial = response.getResponseText().trim();
    if (propiedades.includes(credencial)) {
      props.deleteProperty(credencial);
      CACHE.credenciales = null;
      showAlert('‚úÖ √âxito', `${credencial} eliminada`);
    }
  }
}

// ================== CONFIGURACI√ìN INICIAL ==================
function configuracionInicial() {
  verificarZonaHoraria();
  
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, CONFIG.HOJAS.contactos.headers);
  
  if (hojaContactos.getLastRow() === 1) {
    hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, 5)
      .setValues(CONFIG.CONTACTOS_INICIALES);
    showAlert('‚úÖ Configuraci√≥n', 'Hoja de contactos creada con datos iniciales');
  }
  
  getSheet(CONFIG.HOJAS.errores.nombre, CONFIG.HOJAS.errores.headers);
}

function cargarContactosZonas() {
  if (CACHE.contactos && (Date.now() - CACHE.ultimaCarga) < 300000) {
    return CACHE.contactos;
  }
  
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  if (!hojaContactos) throw new Error("No se encontr√≥ ContactosZonas");
  
  const datos = hojaContactos.getDataRange().getValues();
  const zonaANumero = {};
  const zonaANombre = {};
  
  for (let i = 1; i < datos.length; i++) {
    const [zona, nombre, whatsapp, , activo] = datos[i];
    
    if (String(activo).trim().toUpperCase() === "SI" && zona && whatsapp) {
      const zonaLimpia = String(zona).trim();
      const whatsappLimpio = String(whatsapp).trim().replace(/\D/g, '');
      
      zonaANumero[zonaLimpia] = whatsappLimpio;
      zonaANombre[zonaLimpia] = String(nombre).trim() || "Representante sin asignar";
    }
  }
  
  CACHE.contactos = { zonaANumero, zonaANombre };
  CACHE.ultimaCarga = Date.now();
  
  return CACHE.contactos;
}

// ================== LIMPIEZA AUTOM√ÅTICA DE DATOS ANTIGUOS ==================
function limpiarDatosAntiguos() {
  try {
    const unMesAtras = new Date();
    unMesAtras.setMonth(unMesAtras.getMonth() - 1);
    unMesAtras.setHours(0, 0, 0, 0);
    
    let totalEliminados = 0;
    
    const hojaLogs = getSheet(CONFIG.HOJAS.logs.nombre, null, false);
    if (hojaLogs && hojaLogs.getLastRow() > 1) {
      const eliminadosLogs = limpiarHojaPorFecha(hojaLogs, 3, unMesAtras);
      totalEliminados += eliminadosLogs;
      Logger.log(`Eliminadas ${eliminadosLogs} filas antiguas de LogsLiberaciones`);
    }
    
    const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
    if (hojaControl && hojaControl.getLastRow() > 1) {
      const eliminadosControl = limpiarHojaPorFecha(hojaControl, 3, unMesAtras);
      totalEliminados += eliminadosControl;
      Logger.log(`Eliminadas ${eliminadosControl} filas antiguas de ControlEnvios`);
    }
    
    if (totalEliminados > 0) {
      registrarError("Limpieza Autom√°tica", `Eliminadas ${totalEliminados} filas antiguas`, 
        `Datos anteriores a ${formatDate(unMesAtras)}`);
    }
    
    return totalEliminados;
  } catch (e) {
    registrarError("Limpieza Autom√°tica", "Error al limpiar datos antiguos", e.message);
    Logger.log(`Error en limpiarDatosAntiguos: ${e.message}`);
    return 0;
  }
}

function limpiarHojaPorFecha(hoja, columnaFecha, fechaLimite) {
  try {
    const ultimaFila = hoja.getLastRow();
    if (ultimaFila <= 1) return 0;
    
    const datos = hoja.getRange(2, 1, ultimaFila - 1, hoja.getLastColumn()).getValues();
    const filasAEliminar = [];
    
    for (let i = datos.length - 1; i >= 0; i--) {
      const valorFecha = datos[i][columnaFecha - 1];
      
      if (!valorFecha) continue;
      
      let fechaFila;
      
      if (valorFecha instanceof Date) {
        fechaFila = valorFecha;
      } else {
        const fechaStr = String(valorFecha).trim();
        
        if (/^\d{2}\/\d{2}\/\d{4}/.test(fechaStr)) {
          const [dia, mes, a√±o] = fechaStr.split(/[\s\/]/)[0].split('/');
          fechaFila = new Date(a√±o, mes - 1, dia);
        } else if (fechaStr.includes('-')) {
          fechaFila = new Date(fechaStr);
        } else {
          continue;
        }
      }
      
      if (fechaFila instanceof Date && !isNaN(fechaFila) && fechaFila < fechaLimite) {
        filasAEliminar.push(i + 2);
      }
    }
    
    if (filasAEliminar.length > 0) {
      const gruposConsecutivos = [];
      let grupoActual = [filasAEliminar[0]];
      
      for (let i = 1; i < filasAEliminar.length; i++) {
        if (filasAEliminar[i] === filasAEliminar[i-1] - 1) {
          grupoActual.push(filasAEliminar[i]);
        } else {
          gruposConsecutivos.push(grupoActual);
          grupoActual = [filasAEliminar[i]];
        }
      }
      gruposConsecutivos.push(grupoActual);
      
      gruposConsecutivos.reverse().forEach(grupo => {
        const filaInicio = Math.min(...grupo);
        const cantidad = grupo.length;
        hoja.deleteRows(filaInicio, cantidad);
      });
      
      Logger.log(`Hoja ${hoja.getName()}: Eliminadas ${filasAEliminar.length} filas antiguas`);
    }
    
    return filasAEliminar.length;
    
  } catch (e) {
    Logger.log(`Error en limpiarHojaPorFecha para ${hoja.getName()}: ${e.message}`);
    registrarError("Limpieza Por Fecha", `Error en hoja ${hoja.getName()}`, e.message);
    return 0;
  }
}

function limpiarDatosAntiguosManual() {
  const ui = SpreadsheetApp.getUi();
  
  const confirmacion = ui.alert('üóëÔ∏è Limpiar Datos Antiguos',
    'Se eliminar√°n todos los datos de m√°s de 1 mes en:\n' +
    '‚Ä¢ LogsLiberaciones\n' +
    '‚Ä¢ ControlEnvios\n\n' +
    '¬øContinuar?',
    ui.ButtonSet.YES_NO);
  
  if (confirmacion !== ui.Button.YES) return;
  
  try {
    const filasEliminadas = limpiarDatosAntiguos();
    
    if (filasEliminadas > 0) {
      showAlert('‚úÖ Limpieza Completada', 
        `Se eliminaron ${filasEliminadas} filas con datos antiguos\n\n` +
        'Se conservaron solo los datos del √∫ltimo mes');
    } else {
      showAlert('‚ÑπÔ∏è Sin Cambios', 
        'No se encontraron datos antiguos para eliminar.\n' +
        'Todos los datos son del √∫ltimo mes.');
    }
  } catch (e) {
    showAlert('‚ùå Error', 'Error al limpiar datos: ' + e.message);
  }
}

function verResumenDatos() {
  try {
    const unMesAtras = new Date();
    unMesAtras.setMonth(unMesAtras.getMonth() - 1);
    
    let info = 'üìä RESUMEN DE DATOS\n\n';
    let antiguosTotales = 0;
    
    const hojaLogs = getSheet(CONFIG.HOJAS.logs.nombre, null, false);
    if (hojaLogs && hojaLogs.getLastRow() > 1) {
      const datos = hojaLogs.getDataRange().getValues().slice(1);
      let antiguos = 0, recientes = 0;
      
      datos.forEach(fila => {
        if (!fila[2]) return;
        
        const fechaStr = String(fila[2]).trim();
        let fechaFila;
        
        if (fila[2] instanceof Date) {
          fechaFila = fila[2];
        } else if (/^\d{2}\/\d{2}\/\d{4}/.test(fechaStr)) {
          const [dia, mes, a√±o] = fechaStr.split(/[\s\/]/)[0].split('/');
          fechaFila = new Date(a√±o, mes - 1, dia);
        }
        
        if (fechaFila && !isNaN(fechaFila)) {
          if (fechaFila < unMesAtras) antiguos++;
          else recientes++;
        }
      });
      
      info += `üìã LogsLiberaciones:\n`;
      info += `   Total: ${datos.length} registros\n`;
      info += `   Recientes (√∫ltimo mes): ${recientes}\n`;
      info += `   Antiguos (>1 mes): ${antiguos}\n\n`;
      antiguosTotales += antiguos;
    }
    
    const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
    if (hojaControl && hojaControl.getLastRow() > 1) {
      const datos = hojaControl.getDataRange().getValues().slice(1);
      let antiguos = 0, recientes = 0;
      
      datos.forEach(fila => {
        if (!fila[2]) return;
        
        const fechaStr = String(fila[2]).trim();
        let fechaFila;
        
        if (fila[2] instanceof Date) {
          fechaFila = fila[2];
        } else if (/^\d{2}\/\d{2}\/\d{4}/.test(fechaStr)) {
          const [dia, mes, a√±o] = fechaStr.split(/[\s\/]/)[0].split('/');
          fechaFila = new Date(a√±o, mes - 1, dia);
        }
        
        if (fechaFila && !isNaN(fechaFila)) {
          if (fechaFila < unMesAtras) antiguos++;
          else recientes++;
        }
      });
      
      info += `üìä ControlEnvios:\n`;
      info += `   Total: ${datos.length} registros\n`;
      info += `   Recientes (√∫ltimo mes): ${recientes}\n`;
      info += `   Antiguos (>1 mes): ${antiguos}\n\n`;
      antiguosTotales += antiguos;
    }
    
    info += `üóìÔ∏è Fecha l√≠mite: ${formatDate(unMesAtras)}\n\n`;
    
    if (antiguosTotales > 0) {
      info += `‚ö†Ô∏è Hay ${antiguosTotales} registros antiguos que pueden limpiarse`;
    } else {
      info += `‚úÖ Todos los datos est√°n actualizados`;
    }
    
    showAlert('üìä Resumen de Datos', info);
    
  } catch (e) {
    showAlert('‚ùå Error', 'Error al generar resumen: ' + e.message);
  }
}

// ================== GESTI√ìN DE TRIGGERS ==================
function configurarTriggers(tipo) {
  configuracionInicial();
  
  ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  try {
    ScriptApp.newTrigger('reporteDiarioConManejo')
      .timeBased()
      .atHour(7)
      .everyDays(1)
      .inTimezone("America/Bogota")
      .create();
    
    registrarError("Configuraci√≥n", "Triggers configurados exitosamente", `Tipo: ${tipo} - Solo reporte diario 7AM`);
    
    showAlert('‚úÖ Sistema Configurado',
      'Reporte diario configurado para las 7:00 AM\n\n' +
      'NO SE CONFIGUR√ì verificaci√≥n cada 5 minutos.\n' +
      'El sistema solo se ejecutar√° una vez al d√≠a.');
  } catch (e) {
    registrarError("Trigger", "Error al configurar triggers", e.message);
    showAlert('‚ùå Error', 'Error al configurar triggers: ' + e.message);
  }
}

function reporteDiarioConManejo() {
  try {
    Logger.log("Iniciando reporte diario a las " + new Date());
    
    const props = PropertiesService.getScriptProperties();
    const ultimaEjecucion = props.getProperty('ULTIMA_EJECUCION_REPORTE');
    const hoy = formatDate(new Date(), "yyyy-MM-dd");
    
    if (ultimaEjecucion === hoy) {
      Logger.log("BLOQUEADO: Reporte ya ejecutado hoy");
      registrarError("Reporte Diario", "Ejecuci√≥n bloqueada - Ya se ejecut√≥ hoy", formatDate(new Date(), "HH:mm:ss"));
      return;
    }
    
    registrarError("Reporte Diario", "Inicio de ejecuci√≥n", formatDate(new Date(), "HH:mm:ss"));
    
    // Limpieza autom√°tica
    try {
      const filasEliminadas = limpiarDatosAntiguos();
      if (filasEliminadas > 0) {
        Logger.log(`Limpieza autom√°tica completada: ${filasEliminadas} filas eliminadas`);
      }
    } catch (errorLimpieza) {
      Logger.log(`Error en limpieza autom√°tica (no cr√≠tico): ${errorLimpieza.message}`);
      registrarError("Limpieza Autom√°tica", "Error no cr√≠tico", errorLimpieza.message);
    }
    
    // Ejecutar reporte principal
    actualizarYEnviarOrdenesCredito(true);
    
    // Guardar fecha de ejecuci√≥n exitosa
    props.setProperty('ULTIMA_EJECUCION_REPORTE', hoy);
    
    registrarError("Reporte Diario", "‚úÖ Ejecuci√≥n completada exitosamente", 
      formatDate(new Date(), "HH:mm:ss"));
      
    Logger.log("‚úÖ Reporte diario completado exitosamente");
    
  } catch (e) {
    const errorMsg = `${e.message}${e.stack ? '\n' + e.stack : ''}`;
    Logger.log("‚ùå Error en reporte diario: " + errorMsg);
    registrarError("Reporte Diario", "‚ùå Error en ejecuci√≥n", errorMsg);
    
    // Intentar notificar el error de forma m√°s detallada
    try {
      enviarNotificacionErrorDetallado(e);
    } catch (notifError) {
      Logger.log("Error al notificar: " + notifError.message);
    }
    
    // Re-lanzar el error para que quede registrado en los logs de Google
    throw e;
  }
}

function enviarNotificacionErrorDetallado(error) {
  try {
    const cred = getCredenciales();
    if (!cred.API.url || !cred.API.token) {
      Logger.log("No se pueden enviar notificaciones: credenciales API faltantes");
      return;
    }
    
    const horaError = formatDate(new Date(), "dd/MM/yyyy HH:mm:ss");
    const errorSimplificado = String(error.message).substring(0, 200);
    
    // Determinar el tipo de error
    let tipoError = "Error General";
    if (error.message.includes("credencial")) tipoError = "Error de Credenciales";
    else if (error.message.includes("conexi√≥n") || error.message.includes("connection")) tipoError = "Error de Conexi√≥n BD";
    else if (error.message.includes("query") || error.message.includes("SQL")) tipoError = "Error en Consulta SQL";
    else if (error.message.includes("API") || error.message.includes("fetch")) tipoError = "Error en API WhatsApp";
    
    const params = {
      "1": horaError,
      "2": "Sistema Automatizado",
      "3": "‚ö†Ô∏è ERROR EN REPORTE DIARIO",
      "4": "Administrador del Sistema",
      "5": `‚ùå ${tipoError}`,
      "6": `Error: ${errorSimplificado}. Por favor revise el log de errores en la hoja de c√°lculo.`,
      "7": "3103149259"
    };
    
    // Enviar a n√∫mero de soporte/administrador
    enviarNotificacionConReintentos(cred, "573182260739", false, params, "ERROR_SISTEMA", "notificacion_error");
    
    Logger.log("‚úÖ Notificaci√≥n de error enviada exitosamente");
    
  } catch (e) {
    Logger.log(`Error enviando notificaci√≥n de error: ${e.message}`);
  }
}

function verificarCambiosSoloLiberaciones() {
  try {
    Logger.log("Verificando solo liberaciones nuevas...");
    
    const credenciales = getCredenciales();
    if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
      return;
    }
    
    let conn;
    try {
      conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
      
      const sheets = {
        logs: getSheet(CONFIG.HOJAS.logs.nombre, CONFIG.HOJAS.logs.headers),
        control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers)
      };
      
      const ordenesLiberadasActuales = new Map();
      
      procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales);
      
      const controlData = {};
      if (sheets.control.getLastRow() > 1) {
        const datos = sheets.control.getDataRange().getValues();
        for (let i = 1; i < datos.length; i++) {
          const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = datos[i];
          controlData[orden] = {
            estado, fechaEnvio, horaEnvio, tipoNotificacion,
            enviadoHoyRetenida, enviadoHoyLiberada,
            cliente, zona, fila: i + 1
          };
        }
      }
      
      const ordenesParaNotificar = [];
      const hoy = formatDate(new Date());
      
      ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
        const control = controlData[orden];
        
        if (control && control.estado === 'RETENIDA' && control.enviadoHoyLiberada === "NO") {
          ordenesParaNotificar.push({
            orden,
            tipo: 'Orden liberada',
            datos: datosLiberacion,
            esLiberada: true
          });
        }
      });
      
      if (ordenesParaNotificar.length > 0) {
        Logger.log(`Encontradas ${ordenesParaNotificar.length} liberaciones nuevas`);
        enviarNotificaciones(ordenesParaNotificar, sheets, controlData, hoy, formatDate(new Date(), "HH:mm:ss"));
      }
      
    } finally {
      if (conn) conn.close();
    }
    
  } catch (e) {
    registrarError("Verificar Liberaciones", "Error en ejecuci√≥n", e.message);
  }
}

function verificarCambios() {
  Logger.log("verificarCambios() llamado - funci√≥n deprecada");
}

function verificarCambiosHorarioLaboral() {
  const hora = new Date().getHours();
  if (hora >= 8 && hora < 18) {
    verificarCambiosSoloLiberaciones();
  }
}

function enviarNotificacionError(tipo, mensaje) {
  try {
    const cred = getCredenciales();
    const params = {
      "1": formatDate(new Date(), "dd/MM/yyyy HH:mm:ss"),
      "2": "Sistema",
      "3": "ERROR SISTEMA",
      "4": "Administrador",
      "5": `‚ùå ${tipo}`,
      "6": mensaje.substring(0, 100),
      "7": "3103149259"
    };
    
    enviarNotificacionConReintentos(cred, "573182260739", false, params, "ERROR", tipo);
  } catch (e) {
    Logger.log("Error enviando notificaci√≥n de error: " + e.message);
  }
}

const configurarTriggersDiarios = () => configurarTriggers('24horas');
const configurarTriggersHorarioLaboral = () => configurarTriggers('laboral');
const reporteDiario = () => reporteDiarioConManejo();

function configurarTriggerCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  const opcionTiempo = ui.alert('‚è∞ Configuraci√≥n de Tiempo',
    'Selecciona el tipo de configuraci√≥n:\n\n' +
    'YES = Configurar reporte diario (solo una vez al d√≠a)\n' +
    'NO = Configurar para prueba √∫nica (se ejecutar√° en X minutos)',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (opcionTiempo === ui.Button.CANCEL) return;
  
  configuracionInicial();
  
  try {
    ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    if (opcionTiempo === ui.Button.YES) {
      const tiempoReporte = ui.prompt('‚è∞ Hora del Reporte Diario',
        'Ingresa la hora en uno de estos formatos:\n' +
        '‚Ä¢ Solo hora: 7 (para las 7:00 AM)\n' +
        '‚Ä¢ Hora y minutos: 7:30 o 7-30 (para las 7:30 AM)\n' +
        '‚Ä¢ Formato 24h: 15:45 o 15-45 (para las 3:45 PM)',
        ui.ButtonSet.OK_CANCEL).getResponseText().trim();
      
      if (!tiempoReporte) {
        showAlert('‚ùå Error', 'Debe ingresar un horario');
        return;
      }
      
      let hora, minutos = 0;
      
      if (tiempoReporte.includes(':') || tiempoReporte.includes('-')) {
        const partes = tiempoReporte.split(/[:-]/).map(p => parseInt(p.trim()));
        hora = partes[0];
        minutos = partes[1] || 0;
      } else {
        hora = parseInt(tiempoReporte);
      }
      
      if (isNaN(hora) || hora < 0 || hora > 23 || isNaN(minutos) || minutos < 0 || minutos > 59) {
        showAlert('‚ùå Error', 'Horario inv√°lido. Hora debe ser 0-23 y minutos 0-59');
        return;
      }
      
      const fechaBase = new Date();
      fechaBase.setHours(hora);
      fechaBase.setMinutes(minutos);
      fechaBase.setSeconds(0);
      
      const ahora = new Date();
      if (fechaBase <= ahora) {
        fechaBase.setDate(fechaBase.getDate() + 1);
      }
      
      PropertiesService.getScriptProperties().deleteProperty('ULTIMA_EJECUCION_REPORTE');
      
      ScriptApp.newTrigger('reporteDiarioConManejo')
        .timeBased()
        .atHour(hora)
        .nearMinute(minutos)
        .everyDays(1)
        .inTimezone("America/Bogota")
        .create();
      
      const horaFormateada = `${hora.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;
      
      showAlert('‚úÖ Configuraci√≥n Completa', 
        `Sistema configurado correctamente\n\n` +
        `üìÖ Reporte diario: ${horaFormateada} (America/Bogota)\n` +
        `üîÑ Primera ejecuci√≥n: ${formatDate(fechaBase, "dd/MM/yyyy HH:mm")}\n\n` +
        `‚ö†Ô∏è IMPORTANTE: El sistema se ejecutar√° SOLO UNA VEZ AL D√çA\n` +
        `No hay verificaciones cada 5 minutos.\n\n` +
        `Nota: Los triggers pueden ejecutarse hasta 15 minutos antes o despu√©s de la hora configurada`);
        
    } else {
      const minutos = parseInt(ui.prompt('üß™ Configuraci√≥n de Prueba',
        'Ingresa en cu√°ntos minutos ejecutar el reporte (1-59):', 
        ui.ButtonSet.OK_CANCEL).getResponseText());
      
      if (isNaN(minutos) || minutos < 1 || minutos > 59) {
        showAlert('‚ùå Error', 'Minutos inv√°lidos');
        return;
      }
      
      PropertiesService.getScriptProperties().deleteProperty('ULTIMA_EJECUCION_REPORTE');
      
      const ahora = new Date();
      ahora.setMinutes(ahora.getMinutes() + minutos);
      
      ScriptApp.newTrigger('reporteDiarioConManejo')
        .timeBased()
        .at(ahora)
        .create();
      
      showAlert('‚úÖ Configuraci√≥n de Prueba', 
        `El reporte se ejecutar√° en ${minutos} minutos\n` +
        `Hora aproximada: ${formatDate(ahora, "HH:mm")} (${Session.getScriptTimeZone()})\n\n` +
        `NOTA: Este es un trigger √∫nico para prueba`);
    }
    
    registrarError("Configuraci√≥n", "Trigger diario configurado exitosamente", 
      opcionTiempo === ui.Button.YES ? "Reporte diario - UNA VEZ AL D√çA" : "Prueba √∫nica");
    
  } catch (e) {
    registrarError("Configuraci√≥n Trigger", "Error", e.message);
    showAlert('‚ùå Error', 'Error al configurar: ' + e.message);
  }
}

function verTriggersActivos() {
  const triggers = ScriptApp.getProjectTriggers();
  const zona = Session.getScriptTimeZone();
  const horaActual = formatDate(new Date(), "HH:mm:ss");
  const zonaHorariaSpreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone();
  
  const props = PropertiesService.getScriptProperties();
  const ultimaEjecucion = props.getProperty('ULTIMA_EJECUCION_REPORTE');
  
  let info = `üåé INFORMACI√ìN DE ZONA HORARIA:\n`;
  info += `Zona del Script: ${zona}\n`;
  info += `Zona de la Hoja: ${zonaHorariaSpreadsheet}\n`;
  info += `Hora actual: ${horaActual}\n`;
  
  if (ultimaEjecucion) {
    info += `\nüîí CONTROL DE DUPLICADOS:\n`;
    info += `√öltima ejecuci√≥n: ${ultimaEjecucion}\n`;
    info += `Estado: ${ultimaEjecucion === formatDate(new Date(), "yyyy-MM-dd") ? '‚úÖ Ya ejecutado hoy' : '‚è≥ Puede ejecutarse'}\n`;
  }
  
  info += `\nüìÖ TRIGGERS CONFIGURADOS (${triggers.length}):\n`;
  
  if (triggers.length === 0) {
    info += 'No hay triggers configurados';
  } else {
    triggers.forEach((t, i) => {
      const handler = t.getHandlerFunction();
      let details = '';
      
      try {
        const type = t.getEventType();
        if (type === ScriptApp.EventType.CLOCK) {
          details = ' (Trigger de tiempo)';
          if (handler === 'reporteDiarioConManejo') {
            details += ' - ‚è∞ REPORTE DIARIO';
          } else if (handler.includes('verificar')) {
            details += ' - ‚ö†Ô∏è VERIFICACI√ìN (revisar si es necesaria)';
          }
        }
      } catch (e) {}
      
      info += `${i + 1}. ${handler}${details}\n`;
    });
    
    if (triggers.length > 2) {
      info += `\n‚ö†Ô∏è ADVERTENCIA: Hay ${triggers.length} triggers activos.\n`;
      info += `Lo normal es tener solo 1 trigger (reporte diario).\n`;
      info += `Considera detener y reconfigurar.`;
    }
  }
  
  const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, null, false);
  if (hojaErrores && hojaErrores.getLastRow() > 1) {
    const datos = hojaErrores.getDataRange().getValues();
    for (let i = datos.length - 1; i >= 1 && i >= datos.length - 10; i--) {
      if (datos[i][2] === 'Reporte Diario') {
        const accion = datos[i][3];
        if (accion.includes('Completado') || accion.includes('Inicio')) {
          info += `\n‚úÖ √öltima ejecuci√≥n del reporte:\n${datos[i][0]} ${datos[i][1]} - ${accion}`;
          break;
        }
      }
    }
  }
  
  showAlert('üìÖ Triggers y Estado del Sistema', info);
}

function detenerTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  PropertiesService.getScriptProperties().deleteProperty('ULTIMA_EJECUCION_REPORTE');
  
  registrarError("Sistema", "Triggers detenidos manualmente", `Total: ${triggers.length}`);
  showAlert('üõë Triggers Detenidos', 
    `Se eliminaron ${triggers.length} triggers\n\n` +
    `‚úÖ Tambi√©n se limpi√≥ el control de ejecuci√≥n diaria`);
}

function limpiarControlEjecucion() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('üîÑ Limpiar Control de Ejecuci√≥n',
    'Esto permitir√° que el reporte se ejecute nuevamente hoy.\n' +
    '¬øEst√°s seguro?',
    ui.ButtonSet.YES_NO) === ui.Button.YES) {
    
    PropertiesService.getScriptProperties().deleteProperty('ULTIMA_EJECUCION_REPORTE');
    registrarError("Sistema", "Control de ejecuci√≥n limpiado manualmente");
    showAlert('‚úÖ Control Limpiado', 
      'El sistema ahora puede ejecutar el reporte nuevamente hoy.\n\n' +
      '√ötil para pruebas.');
  }
}

// ================== FUNCI√ìN PRINCIPAL ==================
function actualizarYEnviarOrdenesCredito(esReporteDiario = true) {
  const inicioEjecucion = new Date();
  Logger.log(`Iniciando actualizaci√≥n - Reporte diario: ${esReporteDiario}`);
  
  try {
    // 1. Verificar credenciales
    Logger.log("Paso 1: Verificando credenciales...");
    const credenciales = getCredenciales();
    
    if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
      const error = '‚ùå Faltan credenciales de base de datos (DB_URL, DB_USER o DB_PASS)';
      Logger.log(error);
      registrarError("Credenciales", error);
      throw new Error(error);
    }
    
    if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
      Logger.log("‚ö†Ô∏è Advertencia: Faltan credenciales de API - No se podr√°n enviar notificaciones");
    }
    
    // 2. Obtener hojas
    Logger.log("Paso 2: Obteniendo hojas de c√°lculo...");
    const sheets = {};
    Object.entries(CONFIG.HOJAS).forEach(([key, config]) => {
      if (key !== 'contactos' && key !== 'errores') {
        sheets[key] = getSheet(config.nombre, config.headers);
      }
    });
    
    // 3. Limpiar hoja de √≥rdenes
    Logger.log("Paso 3: Limpiando hoja de √≥rdenes retenidas...");
    sheets.ordenes.clear();
    sheets.ordenes.getRange(1, 1, 1, CONFIG.HOJAS.ordenes.headers.length)
      .setValues([CONFIG.HOJAS.ordenes.headers]);
    
    // 4. Cargar datos de control
    Logger.log("Paso 4: Cargando datos de control...");
    const controlData = {};
    const hoy = formatDate(new Date());
    
    if (sheets.control.getLastRow() > 1) {
      const datos = sheets.control.getDataRange().getValues();
      
      for (let i = 1; i < datos.length; i++) {
        const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = datos[i];
        controlData[orden] = {
          estado, fechaEnvio, horaEnvio, tipoNotificacion,
          enviadoHoyRetenida: (fechaEnvio === hoy) ? enviadoHoyRetenida : "NO",
          enviadoHoyLiberada: (fechaEnvio === hoy) ? enviadoHoyLiberada : "NO",
          cliente, zona, fila: i + 1
        };
      }
    }
    
    Logger.log(`Control cargado: ${Object.keys(controlData).length} √≥rdenes en seguimiento`);
    
    let conn;
    try {
      // 5. Conectar a base de datos
      Logger.log("Paso 5: Conectando a base de datos...");
      conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
      Logger.log("‚úÖ Conexi√≥n exitosa a base de datos");
      
      const ordenesRetenidasActuales = new Map();
      const ordenesLiberadasActuales = new Map();
      
      // 6. Procesar √≥rdenes retenidas
      Logger.log("Paso 6: Procesando √≥rdenes retenidas...");
      procesarOrdenesRetenidas(conn, sheets, ordenesRetenidasActuales);
      Logger.log(`‚úÖ √ìrdenes retenidas procesadas: ${ordenesRetenidasActuales.size}`);
      
      // 7. Procesar √≥rdenes liberadas
      Logger.log("Paso 7: Procesando √≥rdenes liberadas...");
      procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales);
      Logger.log(`‚úÖ √ìrdenes liberadas procesadas: ${ordenesLiberadasActuales.size}`);
      
      // 8. Preparar √≥rdenes para env√≠o
      Logger.log("Paso 8: Preparando √≥rdenes para notificaci√≥n...");
      const ordenesParaEnviar = prepararOrdenesParaEnvio(
        ordenesRetenidasActuales,
        ordenesLiberadasActuales,
        controlData,
        esReporteDiario
      );
      Logger.log(`‚úÖ √ìrdenes a notificar: ${ordenesParaEnviar.length}`);
      
      // 9. Enviar notificaciones
      if (ordenesParaEnviar.length > 0) {
        Logger.log("Paso 9: Enviando notificaciones...");
        enviarNotificaciones(ordenesParaEnviar, sheets, controlData, hoy, formatDate(new Date(), "HH:mm:ss"));
        Logger.log("‚úÖ Notificaciones enviadas");
      } else {
        Logger.log("‚ÑπÔ∏è No hay √≥rdenes para notificar");
      }
      
      const duracion = (new Date() - inicioEjecucion) / 1000;
      Logger.log(`‚úÖ Ejecuci√≥n completada en ${duracion} segundos`);
      
      if (esReporteDiario) {
        registrarError("Reporte Diario", "‚úÖ Procesamiento completado", 
          `√ìrdenes: ${ordenesParaEnviar.length}, Duraci√≥n: ${duracion.toFixed(2)}s`);
      }
      
    } catch (e) {
      Logger.log(`‚ùå ERROR en procesamiento de base de datos: ${e.message}`);
      registrarError("Procesamiento BD", e.message, e.stack || '');
      throw new Error(`Error en base de datos: ${e.message}`);
    } finally {
      if (conn) {
        try {
          conn.close();
          Logger.log("Conexi√≥n a BD cerrada");
        } catch (e) {
          Logger.log(`Error al cerrar conexi√≥n: ${e.message}`);
        }
      }
    }
    
  } catch (e) {
    Logger.log(`‚ùå ERROR GENERAL: ${e.message}`);
    registrarError("Sistema", "Error general en actualizarYEnviarOrdenesCredito", e.message + (e.stack ? '\n' + e.stack : ''));
    throw e;
  }
}

function procesarOrdenesRetenidas(conn, sheets, ordenesRetenidasActuales) {
  const query = `
    SELECT d.OrderHed_OrderNum, CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha,
           d.Zona, d.Customer_Name, d.ObservacionesRetencionCredito
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
    WHERE d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil'
      AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
    ORDER BY d.OrderHed_OrderNum DESC`;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  const filasOrdenes = [];
  const ordenesVistas = new Set();
  
  while (results.next()) {
    const orden = results.getString("OrderHed_OrderNum");
    if (ordenesVistas.has(orden)) continue;
    ordenesVistas.add(orden);
    
    const datos = {
      zona: results.getString("Zona"),
      cliente: results.getString("Customer_Name"),
      fecha: procesarFecha(results.getString("Fecha")),
      observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
    };
    
    filasOrdenes.push([
      datos.zona, datos.cliente, orden, datos.fecha,
      `${orden}: ${datos.observacion}`, "RETENIDA", "CR√âDITO"
    ]);
    
    ordenesRetenidasActuales.set(orden, datos);
  }
  
  stmt.close();
  
  if (filasOrdenes.length > 0) {
    sheets.ordenes.getRange(2, 1, filasOrdenes.length, CONFIG.HOJAS.ordenes.headers.length)
      .setValues(filasOrdenes);
  }
}

function procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales) {
  const query = `
    SELECT d.OrderHed_OrderNum, d.Zona, d.Customer_Name,
           CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha,
           CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS HoraLiberacionCredito,
           oh.CreditOverrideUserID, u.Name, d.ObservacionesRetencionCredito
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
    JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
      ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
    LEFT JOIN EpicorTrain10.dbo.UserFile u WITH (NOLOCK) 
      ON oh.CreditOverrideUserID = u.DcdUserID
    WHERE d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil' AND oh.CreditOverride = 1 
      AND d.FechaLiberacionCredito IS NOT NULL
      AND d.FechaLiberacionCredito >= DATEADD(day, -1, GETDATE())
    ORDER BY d.FechaLiberacionCredito DESC`;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  const dataLiberadas = [];
  
  while (results.next()) {
    const ordenNum = results.getString("OrderHed_OrderNum");
    
    const datosLiberacion = {
      zona: results.getString("Zona"),
      cliente: results.getString("Customer_Name"),
      fecha: procesarFecha(results.getString("Fecha") || ""),
      hora: results.getString("HoraLiberacionCredito") || "",
      observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
    };
    
    dataLiberadas.push([
      ordenNum,
      datosLiberacion.zona,
      datosLiberacion.cliente,
      datosLiberacion.fecha || "",
      datosLiberacion.hora || "",
      results.getString("CreditOverrideUserID") || "",
      results.getString("Name") || "",
      datosLiberacion.observacion,
      "LIBERADA"
    ]);
    
    ordenesLiberadasActuales.set(ordenNum, datosLiberacion);
  }
  
  stmt.close();
  
  if (dataLiberadas.length > 0) {
    const marcaTiempo = formatDate(new Date(), "dd/MM/yyyy HH:mm:ss");
    const datosConSeparador = [...dataLiberadas,
      ["", "", "", "", "", "", "", "", `‚Üê Nuevas liberaciones: ${marcaTiempo}`]];
    
    sheets.logs.insertRowsAfter(1, datosConSeparador.length);
    sheets.logs.getRange(2, 1, datosConSeparador.length, CONFIG.HOJAS.logs.headers.length)
      .setValues(datosConSeparador);
  }
}

function prepararOrdenesParaEnvio(ordenesRetenidasActuales, ordenesLiberadasActuales, controlData, esReporteDiario) {
  const ordenesParaEnviar = [];
  
  ordenesRetenidasActuales.forEach((datos, orden) => {
    const control = controlData[orden];
    let debeEnviar = false;
    let tipo = '';
    
    if (!control) {
      debeEnviar = true;
      tipo = 'Nueva orden retenida';
    } else if (control.estado === 'LIBERADA' && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Orden volvi√≥ a retenci√≥n';
    } else if (esReporteDiario && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Reporte diario 7:00 AM';
    }
    
    if (debeEnviar) {
      ordenesParaEnviar.push({ orden, tipo, datos, esLiberada: false });
    }
  });
  
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    const control = controlData[orden];
    
    if ((control && control.estado === 'RETENIDA' && control.enviadoHoyLiberada === "NO") || !control) {
      ordenesParaEnviar.push({
        orden,
        tipo: 'Orden liberada',
        datos: datosLiberacion,
        esLiberada: true
      });
    }
  });
  
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    if (!controlData[orden]) {
      controlData[orden] = {
        estado: 'LIBERADA',
        fechaEnvio: formatDate(new Date()),
        horaEnvio: formatDate(new Date(), "HH:mm:ss"),
        tipoNotificacion: 'Orden liberada',
        enviadoHoyRetenida: "NO",
        enviadoHoyLiberada: "NO",
        cliente: datosLiberacion.cliente,
        zona: datosLiberacion.zona,
        fila: null
      };
    }
  });
  
  return ordenesParaEnviar;
}

// ================== ENV√çO DE NOTIFICACIONES ==================
function enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  if (ordenesParaEnviar.length === 0) return;
  
  const credenciales = getCredenciales();
  if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
    const error = 'Faltan credenciales de API';
    registrarError("API", error);
    showAlert('‚ùå Error', error);
    return;
  }
  
  const props = PropertiesService.getScriptProperties();
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = props.getProperty('NUMERO_COPIA');
  const zonasCopia = props.getProperty('ZONAS_COPIA');
  
  let zonasPermitidasCopia = null;
  if (copiaActiva && numeroCopia && zonasCopia && zonasCopia !== 'TODAS') {
    zonasPermitidasCopia = new Set(zonasCopia.split(','));
  }
  
  const contactos = cargarContactosZonas();
  const fechaReporte = formatDate(new Date(), "dd/MM/yyyy HH:mm:ss");
  const actualizacionesControl = [];
  
  const ordenesAProcesar = ordenesParaEnviar.slice(0, 200);
  
  ordenesAProcesar.forEach(({ orden, tipo, datos, esLiberada }) => {
    const numeroWhatsApp = contactos.zonaANumero[datos.zona] || "3182260739";
    const representante = contactos.zonaANombre[datos.zona] || "Representante sin asignar";
    const telefono = "57" + numeroWhatsApp;
    const representanteCorto = formatearNombreCorto(representante);
    
    const mensaje = esLiberada ? '‚úÖ ORDEN LIBERADA' :
      tipo.includes('Nueva') ? 'üÜï NUEVA ORDEN RETENIDA' :
        tipo.includes('volvi√≥') ? '‚ö†Ô∏è ORDEN VOLVI√ì A RETENCI√ìN' :
          'üìä REPORTE DIARIO 7:00 AM';
    
    const params = esLiberada ? {
      "1": `#${orden}`,
      "2": procesarFecha(datos.fecha) + (datos.hora ? " " + datos.hora : ""),
      "3": datos.cliente,
      "4": datos.zona,
      "5": representanteCorto,
      "6": datos.observacion,
      "7": "3103149259"
    } : {
      "1": fechaReporte,
      "2": representanteCorto,
      "3": datos.zona,
      "4": datos.cliente,
      "5": `${mensaje} üîπ Orden #${orden} | ${procesarFecha(datos.fecha)}`,
      "6": `üìÑ Orden #${orden}: ${datos.observacion}`,
      "7": "3103149259"
    };
    
    const enviado = enviarNotificacionConReintentos(
      credenciales, telefono, esLiberada, params, orden, tipo
    );
    
    if (enviado) {
      const controlExistente = controlData[orden];
      
      actualizacionesControl.push({
        orden,
        estado: esLiberada ? 'LIBERADA' : 'RETENIDA',
        fechaEnvio: fechaHoy,
        horaEnvio: horaActual,
        tipoNotificacion: tipo,
        enviadoHoyRetenida: !esLiberada ? "SI" : (controlExistente?.enviadoHoyRetenida || "NO"),
        enviadoHoyLiberada: esLiberada ? "SI" : (controlExistente?.enviadoHoyLiberada || "NO"),
        cliente: datos.cliente,
        zona: datos.zona,
        fila: controlExistente?.fila
      });
      
      if (copiaActiva && numeroCopia) {
        const debeEnviarCopia = !zonasPermitidasCopia || zonasPermitidasCopia.has(datos.zona);
        if (debeEnviarCopia) {
          enviarNotificacionConReintentos(
            credenciales, "57" + numeroCopia, esLiberada, params, orden, `copia_${tipo}`
          );
        }
      }
    }
    
    Utilities.sleep(1000);
  });
  
  actualizarControlEnBatch(sheets.control, actualizacionesControl);
  
  aplicarFormatoCondicional(sheets.control);
}

function enviarNotificacionConReintentos(credenciales, telefono, esLiberada, params, orden, tipo) {
  for (let intento = 0; intento < 3; intento++) {
    try {
      const payload = {
        chatPlatform: "whatsapp",
        chatChannelNumber: credenciales.API.channel,
        platformContactId: telefono,
        ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv_0",
        params,
        clientPayload: `orden_${tipo}_${orden}_${Date.now()}`
      };
      
      const response = UrlFetchApp.fetch(credenciales.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": credenciales.API.token },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        return true;
      }
      
    } catch (e) {
      Logger.log(`Error enviando ${orden}: ${e.message}`);
      if (intento === 2) {
        registrarError("Env√≠o WhatsApp", `Fallo orden ${orden} despu√©s de 3 intentos`, e.message);
      }
    }
    
    if (intento < 2) Utilities.sleep(2000);
  }
  
  return false;
}

function actualizarControlEnBatch(hojaControl, actualizaciones) {
  const actualizacionesExistentes = [];
  const nuevasFilas = [];
  
  actualizaciones.forEach(act => {
    const valores = [
      act.orden, act.estado, act.fechaEnvio, act.horaEnvio,
      act.tipoNotificacion, act.enviadoHoyRetenida, act.enviadoHoyLiberada,
      act.cliente, act.zona
    ];
    
    if (act.fila) {
      actualizacionesExistentes.push({ fila: act.fila, valores });
    } else {
      nuevasFilas.push(valores);
    }
  });
  
  actualizacionesExistentes.forEach(({ fila, valores }) => {
    hojaControl.getRange(fila, 1, 1, 9).setValues([valores]);
  });
  
  if (nuevasFilas.length > 0) {
    const ultimaFila = hojaControl.getLastRow();
    hojaControl.getRange(ultimaFila + 1, 1, nuevasFilas.length, 9).setValues(nuevasFilas);
  }
}

function aplicarFormatoCondicional(hojaControl) {
  if (hojaControl.getLastRow() > 1) {
    const rangoEstado = hojaControl.getRange(2, 2, hojaControl.getLastRow() - 1, 1);
    hojaControl.clearConditionalFormatRules();
    
    const reglas = [
      { estado: 'RETENIDA', background: '#ffcdd2', fontColor: '#c62828' },
      { estado: 'LIBERADA', background: '#c8e6c9', fontColor: '#2e7d32' }
    ].map(({ estado, background, fontColor }) =>
      SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(estado)
        .setBackground(background)
        .setFontColor(fontColor)
        .setRanges([rangoEstado])
        .build()
    );
    
    hojaControl.setConditionalFormatRules(reglas);
    hojaControl.autoResizeColumns(1, 9);
  }
}

// ================== GESTI√ìN DE COPIAS ==================
function configurarCopiasReportes() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = props.getProperty('NUMERO_COPIA') || '';
  const zonasCopia = props.getProperty('ZONAS_COPIA') || '';
  
  const opcion = ui.alert('üì± Gesti√≥n de Copias',
    `Estado actual: ${copiaActiva ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n` +
    `N√∫mero: ${numeroCopia || 'No configurado'}\n` +
    `Zonas: ${zonasCopia || 'TODAS'}\n\n` +
    '¬øQu√© deseas hacer?',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (opcion === ui.Button.CANCEL) return;
  
  if (opcion === ui.Button.NO) {
    props.setProperty('COPIA_ACTIVA', 'NO');
    showAlert('‚úÖ Copias Desactivadas', 'Las copias han sido desactivadas');
    return;
  }
  
  const numero = ui.prompt('üì± N√∫mero de WhatsApp',
    'Ingresa el n√∫mero (ej: 3182260739):',
    ui.ButtonSet.OK_CANCEL).getResponseText().trim().replace(/\D/g, '');
  
  if (!numero || numero.length < 10) {
    showAlert('‚ùå Error', 'N√∫mero inv√°lido');
    return;
  }
  
  const contactos = cargarContactosZonas();
  const zonasDisponibles = Object.keys(contactos.zonaANumero).sort();
  
  const tipoSeleccion = ui.alert('üåé Selecci√≥n de Zonas',
    'YES = Todas las zonas\nNO = Seleccionar zonas espec√≠ficas',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (tipoSeleccion === ui.Button.CANCEL) return;
  
  const zonasSeleccionadas = tipoSeleccion === ui.Button.YES
    ? zonasDisponibles
    : seleccionarZonasManual(zonasDisponibles);
  
  if (zonasSeleccionadas.length === 0) return;
  
  props.setProperty('COPIA_ACTIVA', 'SI');
  props.setProperty('NUMERO_COPIA', numero);
  props.setProperty('ZONAS_COPIA', zonasSeleccionadas.join(','));
  
  showAlert('‚úÖ Copias Configuradas',
    `N√∫mero: ${numero}\nZonas: ${zonasSeleccionadas.length} seleccionadas`);
}

function seleccionarZonasManual(zonasDisponibles) {
  const ui = SpreadsheetApp.getUi();
  
  const mensaje = zonasDisponibles.map((zona, i) => `${i + 1}. ${zona}`).join('\n') +
    '\n\nIngresa n√∫meros separados por comas (ej: 1,3,5-8)';
  
  const response = ui.prompt('üåé Selecci√≥n de Zonas', mensaje, ui.ButtonSet.OK_CANCEL);
  
  if (response.getSelectedButton() !== ui.Button.OK) return [];
  
  const seleccion = response.getResponseText().trim().toUpperCase();
  if (seleccion === 'TODAS') return zonasDisponibles;
  if (!seleccion) return [];
  
  const zonasSeleccionadas = [];
  const partes = seleccion.split(',');
  
  partes.forEach(parte => {
    parte = parte.trim();
    if (parte.includes('-')) {
      const [inicio, fin] = parte.split('-').map(n => parseInt(n));
      if (!isNaN(inicio) && !isNaN(fin)) {
        for (let i = inicio; i <= fin && i <= zonasDisponibles.length; i++) {
          if (zonasDisponibles[i - 1]) zonasSeleccionadas.push(zonasDisponibles[i - 1]);
        }
      }
    } else {
      const num = parseInt(parte);
      if (!isNaN(num) && zonasDisponibles[num - 1]) {
        zonasSeleccionadas.push(zonasDisponibles[num - 1]);
      }
    }
  });
  
  return [...new Set(zonasSeleccionadas)];
}

function verConfiguracionCopias() {
  const props = PropertiesService.getScriptProperties();
  showAlert('üìã Configuraci√≥n de Copias',
    `Estado: ${props.getProperty('COPIA_ACTIVA') === 'SI' ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n` +
    `N√∫mero: ${props.getProperty('NUMERO_COPIA') || 'No configurado'}\n` +
    `Zonas: ${props.getProperty('ZONAS_COPIA') || 'TODAS'}`);
}

// ================== ESTAD√çSTICAS ==================
function verEstadisticas() {
  const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
  if (!hojaControl || hojaControl.getLastRow() <= 1) {
    showAlert('üìä Estad√≠sticas', 'No hay datos disponibles');
    return;
  }
  
  const datos = hojaControl.getDataRange().getValues().slice(1);
  const hoy = formatDate(new Date());
  const palabrasPrueba = ['PRUEBA', 'TEST', 'TESTING', 'DEMO'];
  
  const stats = datos.reduce((acc, row) => {
    const [orden, estado, fechaEnvio, , tipoMensaje, enviadaRetenida, enviadaLiberada] = row;
    const esPrueba = palabrasPrueba.some(p =>
      String(orden).toUpperCase().includes(p) ||
      String(tipoMensaje).toUpperCase().includes(p)
    );
    
    if (esPrueba) {
      acc.pruebasTotal++;
    } else {
      acc.total++;
      if (estado === 'RETENIDA') acc.retenidas++;
      if (estado === 'LIBERADA') acc.liberadas++;
      if (fechaEnvio === hoy && enviadaRetenida === "SI") acc.enviadasHoyRetenida++;
      if (fechaEnvio === hoy && enviadaLiberada === "SI") acc.enviadasHoyLiberada++;
    }
    return acc;
  }, { total: 0, retenidas: 0, liberadas: 0, enviadasHoyRetenida: 0, enviadasHoyLiberada: 0, pruebasTotal: 0 });
  
  const hojaOrdenes = getSheet(CONFIG.HOJAS.ordenes.nombre, null, false);
  const hojaLogs = getSheet(CONFIG.HOJAS.logs.nombre, null, false);
  const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, null, false);
  
  const ordenesRetenidasActuales = hojaOrdenes ? hojaOrdenes.getLastRow() - 1 : 0;
  const ordenesLiberadasHistorico = hojaLogs ?
    new Set(hojaLogs.getDataRange().getValues().slice(1)
      .filter(row => row[0] && !String(row[0]).includes('‚Üê'))
      .map(row => row[0])).size : 0;
  
  const erroresRecientes = hojaErrores && hojaErrores.getLastRow() > 1 ?
    hojaErrores.getRange(Math.max(2, hojaErrores.getLastRow() - 9), 1, 
      Math.min(10, hojaErrores.getLastRow() - 1), 5).getValues() : [];
  
  let mensajeErrores = '';
  if (erroresRecientes.length > 0) {
    mensajeErrores = '\n\n√öLTIMOS ERRORES:\n' + 
      erroresRecientes.slice(-3).map(e => `${e[0]} ${e[1]} - ${e[2]}`).join('\n');
  }
  
  showAlert('üìä ESTAD√çSTICAS DEL SISTEMA',
    `√ìrdenes retenidas actuales: ${ordenesRetenidasActuales}\n` +
    `√ìrdenes liberadas (hist√≥rico): ${ordenesLiberadasHistorico}\n\n` +
    `Total notificaciones: ${stats.total}\n` +
    `‚îú‚îÄ Retenidas: ${stats.retenidas}\n` +
    `‚îî‚îÄ Liberadas: ${stats.liberadas}\n\n` +
    `HOY (${hoy}):\n` +
    `Retenciones notificadas: ${stats.enviadasHoyRetenida}\n` +
    `Liberaciones notificadas: ${stats.enviadasHoyLiberada}\n\n` +
    `Pruebas realizadas: ${stats.pruebasTotal}` +
    mensajeErrores);
}

// ================== FUNCIONES DE PRUEBA R√ÅPIDA ==================
function configurarPruebaRapida() {
  const ui = SpreadsheetApp.getUi();
  
  const minutos = parseInt(ui.prompt('üß™ Prueba R√°pida',
    '¬øEn cu√°ntos minutos quieres ejecutar el reporte?\n(1-30 minutos)', 
    ui.ButtonSet.OK_CANCEL).getResponseText());
  
  if (isNaN(minutos) || minutos < 1 || minutos > 30) {
    showAlert('‚ùå Error', 'Ingresa un n√∫mero v√°lido entre 1 y 30');
    return;
  }
  
  try {
    ScriptApp.getProjectTriggers()
      .filter(t => t.getHandlerFunction() === 'reporteDiarioConManejo')
      .forEach(t => ScriptApp.deleteTrigger(t));
    
    PropertiesService.getScriptProperties().deleteProperty('ULTIMA_EJECUCION_REPORTE');
    
    const ahora = new Date();
    const ejecucion = new Date(ahora.getTime() + (minutos * 60000));
    
    ScriptApp.newTrigger('reporteDiarioConManejo')
      .timeBased()
      .at(ejecucion)
      .create();
    
    registrarError("Prueba R√°pida", "Trigger configurado", 
      `Ejecutar√° en ${minutos} minutos a las ${formatDate(ejecucion, "HH:mm:ss")}`);
    
    showAlert('‚úÖ Prueba Configurada', 
      `El reporte se ejecutar√° en ${minutos} minutos\n\n` +
      `‚è∞ Hora actual: ${formatDate(ahora, "HH:mm:ss")}\n` +
      `üìç Ejecutar√° a las: ${formatDate(ejecucion, "HH:mm:ss")}\n` +
      `üåé Zona horaria: ${Session.getScriptTimeZone()}\n\n` +
      `‚ö†Ô∏è IMPORTANTE: Este es un trigger √öNICO para prueba.\n` +
      `Despu√©s de ejecutarse, deber√°s reconfigurar el reporte diario.\n\n` +
      `üí° TIP: Ve a "Ver Log de Errores" despu√©s para confirmar`);
      
  } catch (e) {
    registrarError("Prueba R√°pida", "Error", e.message);
    showAlert('‚ùå Error', 'Error al configurar prueba: ' + e.message);
  }
}

function verificarHorarioActual() {
  const ahora = new Date();
  const zona = Session.getScriptTimeZone();
  const zonaHoja = SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone();
  
  const horaLocal = formatDate(ahora, "HH:mm:ss");
  const fechaCompleta = formatDate(ahora, "dd/MM/yyyy HH:mm:ss");
  
  let advertencia = '';
  if (zona !== zonaHoja) {
    advertencia = '\n\n‚ö†Ô∏è ADVERTENCIA: La zona del script y la hoja son diferentes.\n' +
                  'Esto puede causar problemas con los triggers.';
  }
  
  let ultimoReporte = '\nüìä √öltimo reporte: No encontrado';
  const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, null, false);
  if (hojaErrores && hojaErrores.getLastRow() > 1) {
    const datos = hojaErrores.getDataRange().getValues();
    for (let i = datos.length - 1; i >= 1; i--) {
      if (datos[i][2] === 'Reporte Diario') {
        ultimoReporte = `\nüìä √öltimo reporte: ${datos[i][0]} ${datos[i][1]} - ${datos[i][3]}`;
        break;
      }
    }
  }
  
  showAlert('üïê Horario Actual del Sistema',
    `üåé Zona horaria del Script: ${zona}\n` +
    `üìÑ Zona horaria de la Hoja: ${zonaHoja}\n\n` +
    `‚è∞ Hora actual: ${horaLocal}\n` +
    `üìÖ Fecha completa: ${fechaCompleta}\n` +
    ultimoReporte +
    advertencia);
}

// ================== FUNCIONES DE PRUEBA ==================
function probarSistemaCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('üß™ Prueba del Sistema', 
    'Se verificar√° todo el sistema. ¬øContinuar?', 
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const resultados = {
    credenciales: '‚è≥',
    baseDatos: '‚è≥',
    hojas: '‚è≥',
    contactos: '‚è≥',
    queries: '‚è≥',
    notificacion: '‚è≥',
    zonaHoraria: '‚è≥'
  };
  
  try {
    const zona = Session.getScriptTimeZone();
    resultados.zonaHoraria = zona === 'America/Bogota' ? '‚úÖ' : `‚ö†Ô∏è ${zona}`;
  } catch (e) {
    resultados.zonaHoraria = '‚ùå';
  }
  
  try {
    const cred = getCredenciales();
    resultados.credenciales = (!cred.DB.url || !cred.DB.user || !cred.DB.pass || 
      !cred.API.url || !cred.API.token || !cred.API.channel) ? '‚ùå' : '‚úÖ';
  } catch (e) {
    resultados.credenciales = '‚ùå';
  }
  
  if (resultados.credenciales === '‚úÖ') {
    try {
      const cred = getCredenciales();
      const conn = Jdbc.getConnection(cred.DB.url, cred.DB.user, cred.DB.pass);
      const stmt = conn.createStatement();
      stmt.executeQuery("SELECT 1");
      stmt.close();
      conn.close();
      resultados.baseDatos = '‚úÖ';
    } catch (e) {
      resultados.baseDatos = '‚ùå';
    }
  }
  
  try {
    Object.values(CONFIG.HOJAS).forEach(config => getSheet(config.nombre, config.headers));
    resultados.hojas = '‚úÖ';
  } catch (e) {
    resultados.hojas = '‚ùå';
  }
  
  try {
    const contactos = cargarContactosZonas();
    resultados.contactos = Object.keys(contactos.zonaANumero).length > 0 ? '‚úÖ' : '‚ùå';
  } catch (e) {
    resultados.contactos = '‚ùå';
  }
  
  resultados.queries = resultados.baseDatos === '‚úÖ' ? '‚úÖ' : '‚ö†Ô∏è';
  
  if (ui.alert('Prueba de Notificaci√≥n', 
    '¬øEnviar notificaci√≥n de prueba?', 
    ui.ButtonSet.YES_NO) === ui.Button.YES && resultados.credenciales === '‚úÖ') {
    try {
      const cred = getCredenciales();
      const enviado = enviarNotificacionConReintentos(
        cred, "573182260739", false,
        {
          "1": formatDate(new Date(), "dd/MM/yyyy HH:mm:ss"),
          "2": "Sistema",
          "3": "Zona Prueba",
          "4": "Cliente Prueba",
          "5": "üß™ PRUEBA DEL SISTEMA",
          "6": "TEST SISTEMA",
          "7": "3103149259"
        },
        'TEST', 'prueba_sistema'
      );
      resultados.notificacion = enviado ? '‚úÖ' : '‚ùå';
    } catch (e) {
      resultados.notificacion = '‚ùå';
    }
  } else {
    resultados.notificacion = '‚è≠Ô∏è';
  }
  
  const ok = Object.values(resultados).filter(r => r === '‚úÖ').length;
  const error = Object.values(resultados).filter(r => r === '‚ùå').length;
  const advertencia = Object.values(resultados).filter(r => r.includes('‚ö†Ô∏è')).length;
  
  showAlert('üß™ Resultado de la Prueba',
    `RESUMEN: ${ok} OK, ${error} ERROR, ${advertencia} ADVERTENCIAS\n\n` +
    `Zona horaria: ${resultados.zonaHoraria}\n` +
    `Credenciales: ${resultados.credenciales}\n` +
    `Base de datos: ${resultados.baseDatos}\n` +
    `Hojas: ${resultados.hojas}\n` +
    `Contactos: ${resultados.contactos}\n` +
    `Queries: ${resultados.queries}\n` +
    `Notificaci√≥n: ${resultados.notificacion}\n\n` +
    (error > 0 || advertencia > 0 ? '‚ö†Ô∏è Revisar componentes con error/advertencia' : '‚úÖ SISTEMA FUNCIONANDO CORRECTAMENTE'));
}

function ejecutarPrueba(nombrePrueba, esLiberada = false) {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(`Prueba de ${esLiberada ? 'Liberaci√≥n' : 'Retenci√≥n'}`,
    'Ingresa el n√∫mero de orden:', ui.ButtonSet.OK_CANCEL);
  
  if (response.getSelectedButton() !== ui.Button.OK) return;
  
  const ordenNum = response.getResponseText().trim();
  if (!ordenNum) {
    showAlert('Error', 'Debes ingresar un n√∫mero de orden');
    return;
  }
  
  const nombreHoja = esLiberada ? CONFIG.HOJAS.logs.nombre : CONFIG.HOJAS.ordenes.nombre;
  const hoja = getSheet(nombreHoja, null, false);
  
  if (!hoja) {
    showAlert('Error', 'No hay datos disponibles');
    return;
  }
  
  const datos = hoja.getDataRange().getValues();
  const colOrden = esLiberada ? 0 : 2;
  let ordenEncontrada = null;
  
  for (let i = 1; i < datos.length; i++) {
    if (String(datos[i][colOrden]) === ordenNum) {
      ordenEncontrada = {
        zona: datos[i][esLiberada ? 1 : 0],
        cliente: datos[i][esLiberada ? 2 : 1],
        orden: ordenNum,
        fecha: datos[i][3],
        observacion: esLiberada ? datos[i][7] : datos[i][4].replace(`${ordenNum}: `, '')
      };
      break;
    }
  }
  
  if (!ordenEncontrada) {
    showAlert('Error', `No se encontr√≥ la orden ${ordenNum}`);
    return;
  }
  
  if (ui.alert('Confirmar Prueba',
    `${nombrePrueba}\n\nOrden: ${ordenNum}\nCliente: ${ordenEncontrada.cliente}\nZona: ${ordenEncontrada.zona}`,
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const ordenesParaEnviar = [{
    orden: ordenNum,
    tipo: `${nombrePrueba} (PRUEBA)`,
    datos: ordenEncontrada,
    esLiberada
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, formatDate(new Date()), formatDate(new Date(), "HH:mm:ss"));
  
  showAlert('‚úÖ Prueba Enviada', `Se envi√≥ la notificaci√≥n para la orden ${ordenNum}`);
}

const probarNotificacionOrdenRetenida = () => ejecutarPrueba('Orden Retenida', false);
const probarNotificacionOrdenLiberada = () => ejecutarPrueba('Orden Liberada', true);

function probarNotificacionRetenidaPersonalizada() {
  const ordenNum = 'TEST-' + Date.now();
  const ordenesParaEnviar = [{
    orden: ordenNum,
    tipo: 'Retenci√≥n Personalizada (PRUEBA)',
    datos: {
      zona: 'Zona de Prueba',
      cliente: 'Cliente de Prueba',
      fecha: new Date(),
      observacion: 'PRUEBA DEL SISTEMA'
    },
    esLiberada: false
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, formatDate(new Date()), formatDate(new Date(), "HH:mm:ss"));
  
  showAlert('‚úÖ Prueba Personalizada', 'Notificaci√≥n de prueba enviada');
}

function verificarConexionBD() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    ui.alert('üîç Verificando Conexi√≥n', 
      'Probando conexi√≥n a la base de datos...\nEsto puede tomar unos segundos.', 
      ui.ButtonSet.OK);
    
    const cred = getCredenciales();
    
    if (!cred.DB.url || !cred.DB.user || !cred.DB.pass) {
      showAlert('‚ùå Error de Credenciales', 
        'Faltan credenciales de base de datos:\n\n' +
        `DB_URL: ${cred.DB.url ? '‚úÖ Configurada' : '‚ùå Falta'}\n` +
        `DB_USER: ${cred.DB.user ? '‚úÖ Configurado' : '‚ùå Falta'}\n` +
        `DB_PASS: ${cred.DB.pass ? '‚úÖ Configurada' : '‚ùå Falta'}\n\n` +
        'Config√∫ralas desde el men√∫ Seguridad > Actualizar Credencial');
      return;
    }
    
    Logger.log("Intentando conectar a: " + cred.DB.url);
    
    const conn = Jdbc.getConnection(cred.DB.url, cred.DB.user, cred.DB.pass);
    Logger.log("‚úÖ Conexi√≥n establecida");
    
    const stmt = conn.createStatement();
    const result = stmt.executeQuery("SELECT GETDATE() as FechaHora, @@VERSION as Version");
    
    let info = '';
    if (result.next()) {
      info = `Fecha/Hora del servidor: ${result.getString("FechaHora")}\n\n`;
      info += `Versi√≥n SQL Server:\n${result.getString("Version").substring(0, 100)}...`;
    }
    
    stmt.close();
    conn.close();
    
    Logger.log("‚úÖ Conexi√≥n cerrada exitosamente");
    
    showAlert('‚úÖ Conexi√≥n Exitosa', 
      'La conexi√≥n a la base de datos funciona correctamente.\n\n' + info);
    
    registrarError("Diagn√≥stico", "‚úÖ Verificaci√≥n de conexi√≥n BD exitosa");
    
  } catch (e) {
    Logger.log(`‚ùå Error en conexi√≥n: ${e.message}`);
    registrarError("Diagn√≥stico", "‚ùå Error en verificaci√≥n de conexi√≥n BD", e.message);
    
    let mensajeError = '‚ùå Error al conectar a la base de datos:\n\n';
    mensajeError += e.message + '\n\n';
    
    if (e.message.includes('timeout')) {
      mensajeError += 'üí° Sugerencia: Verifica que la IP de Google Apps Script\n' +
                      'est√© autorizada en el firewall de la base de datos.';
    } else if (e.message.includes('login failed') || e.message.includes('authentication')) {
      mensajeError += 'üí° Sugerencia: Verifica el usuario y contrase√±a\n' +
                      'en las credenciales (DB_USER y DB_PASS).';
    } else if (e.message.includes('host')) {
      mensajeError += 'üí° Sugerencia: Verifica la URL de conexi√≥n (DB_URL).\n' +
                      'Debe incluir servidor, puerto y base de datos.';
    }
    
    showAlert('‚ùå Error de Conexi√≥n', mensajeError);
  }
}

function verificarCredencialesCompletas() {
  const cred = getCredenciales();
  
  const estado = {
    db: {
      url: !!cred.DB.url,
      user: !!cred.DB.user,
      pass: !!cred.DB.pass
    },
    api: {
      url: !!cred.API.url,
      token: !!cred.API.token,
      channel: !!cred.API.channel
    }
  };
  
  const dbCompleta = estado.db.url && estado.db.user && estado.db.pass;
  const apiCompleta = estado.api.url && estado.api.token && estado.api.channel;
  
  let mensaje = 'üìã ESTADO DE CREDENCIALES\n\n';
  mensaje += 'üóÑÔ∏è BASE DE DATOS:\n';
  mensaje += `   DB_URL: ${estado.db.url ? '‚úÖ' : '‚ùå'}\n`;
  mensaje += `   DB_USER: ${estado.db.user ? '‚úÖ' : '‚ùå'}\n`;
  mensaje += `   DB_PASS: ${estado.db.pass ? '‚úÖ' : '‚ùå'}\n`;
  mensaje += `   Estado: ${dbCompleta ? '‚úÖ Completa' : '‚ùå Incompleta'}\n\n`;
  
  mensaje += 'üì± API WHATSAPP:\n';
  mensaje += `   API_URL: ${estado.api.url ? '‚úÖ' : '‚ùå'}\n`;
  mensaje += `   API_TOKEN: ${estado.api.token ? '‚úÖ' : '‚ùå'}\n`;
  mensaje += `   API_CHANNEL: ${estado.api.channel ? '‚úÖ' : '‚ùå'}\n`;
  mensaje += `   Estado: ${apiCompleta ? '‚úÖ Completa' : '‚ùå Incompleta'}\n\n`;
  
  if (dbCompleta && apiCompleta) {
    mensaje += '‚úÖ Todas las credenciales est√°n configuradas correctamente';
  } else {
    mensaje += '‚ö†Ô∏è Faltan credenciales. Config√∫ralas desde:\n';
    mensaje += 'Men√∫ > Seguridad > Actualizar Credencial';
  }
  
  showAlert('üîê Verificaci√≥n de Credenciales', mensaje);
}
function verLogErrores() {
  const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, null, false);
  if (!hojaErrores || hojaErrores.getLastRow() <= 1) {
    showAlert('üìã Log de Errores', 'No hay errores registrados');
    return;
  }
  
  const ultimos = Math.min(20, hojaErrores.getLastRow() - 1);
  const errores = hojaErrores.getRange(
    Math.max(2, hojaErrores.getLastRow() - ultimos + 1), 
    1, ultimos, 5
  ).getValues();
  
  const mensaje = errores.reverse().slice(0, 10).map(e => 
    `${e[0]} ${e[1]} - ${e[2]}: ${e[3].substring(0, 50)}${e[3].length > 50 ? '...' : ''}`
  ).join('\n');
  
  showAlert('üìã √öltimos Errores', mensaje);
}

function limpiarLogErrores() {
  const ui = SpreadsheetApp.getUi();
  if (ui.alert('üóëÔ∏è Limpiar Log de Errores', 
    '¬øSeguro que deseas limpiar todos los registros de error?', 
    ui.ButtonSet.YES_NO) === ui.Button.YES) {
    
    const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, CONFIG.HOJAS.errores.headers);
    if (hojaErrores.getLastRow() > 1) {
      hojaErrores.deleteRows(2, hojaErrores.getLastRow() - 1);
    }
    showAlert('‚úÖ Log Limpiado', 'Se eliminaron todos los registros de error');
  }
}

// ================== MEN√ö ==================
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üîß Sistema de √ìrdenes')
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üîê Seguridad')
      .addItem('üëÅÔ∏è Ver Credenciales Guardadas', 'verPropiedadesGuardadas')
      .addItem('üîç Verificar Credenciales Completas', 'verificarCredencialesCompletas')
      .addSeparator()
      .addItem('‚úèÔ∏è Actualizar Credencial', 'actualizarCredencial')
      .addItem('üóëÔ∏è Eliminar Credencial', 'eliminarCredencial'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('‚öôÔ∏è Configurar Triggers')
      .addItem('üöÄ Configuraci√≥n Completa (RECOMENDADO)', 'configurarTriggerCompleto')
      .addItem('‚ö° Prueba R√°pida (minutos)', 'configurarPruebaRapida')
      .addSeparator()
      .addItem('üìÖ Ver Triggers Activos', 'verTriggersActivos')
      .addItem('üõë Detener Todos los Triggers', 'detenerTriggers')
      .addItem('üîÑ Limpiar Control de Ejecuci√≥n', 'limpiarControlEjecucion'))
    .addItem('üìä Ver Estad√≠sticas', 'verEstadisticas')
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üì® Copias de Reportes')
      .addItem('‚öôÔ∏è Configurar/Desactivar', 'configurarCopiasReportes')
      .addItem('üëÅÔ∏è Ver Configuraci√≥n', 'verConfiguracionCopias'))
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üóëÔ∏è Gesti√≥n de Datos')
      .addItem('üìä Ver Resumen de Datos', 'verResumenDatos')
      .addItem('üóëÔ∏è Limpiar Datos Antiguos (>1 mes)', 'limpiarDatosAntiguosManual')
      .addSeparator()
      .addItem('üìã Ver Log de Errores', 'verLogErrores')
      .addItem('üóëÔ∏è Limpiar Log de Errores', 'limpiarLogErrores'))
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üîç Diagn√≥stico')
      .addItem('üïê Verificar Horario Actual', 'verificarHorarioActual')
      .addItem('üóÑÔ∏è Probar Conexi√≥n a Base de Datos', 'verificarConexionBD')
      .addItem('üß™ Probar Sistema Completo', 'probarSistemaCompleto'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üß™ Pruebas de Notificaci√≥n')
      .addItem('üìã Probar Retenci√≥n', 'probarNotificacionOrdenRetenida')
      .addItem('‚úÖ Probar Liberaci√≥n', 'probarNotificacionOrdenLiberada')
      .addItem('‚úèÔ∏è Prueba Personalizada', 'probarNotificacionRetenidaPersonalizada'))
    .addSeparator()
    .addItem('üîÑ Ejecutar Reporte Ahora (Manual)', 'reporteDiario')
    .addToUi();
}
