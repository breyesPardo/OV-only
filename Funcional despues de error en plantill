// ================== CONFIGURACI√ìN INICIAL DE SEGURIDAD ==================
// IMPORTANTE: Ejecuta configurarCredencialesSeguras() UNA SOLA VEZ, luego puedes eliminar esta funci√≥n

function getCredenciales() {
  const scriptProperties = PropertiesService.getScriptProperties();
  
  return {
    DB: {
      url: scriptProperties.getProperty('DB_URL'),
      user: scriptProperties.getProperty('DB_USER'),
      pass: scriptProperties.getProperty('DB_PASS')
    },
    API: {
      url: scriptProperties.getProperty('API_URL'),
      token: scriptProperties.getProperty('API_TOKEN'),
      channel: scriptProperties.getProperty('API_CHANNEL')
    }
  };
}

function verPropiedadesGuardadas() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const propiedades = scriptProperties.getKeys();
  
  if (propiedades.length === 0) {
    SpreadsheetApp.getUi().alert('Sin Credenciales', 
      'No hay credenciales guardadas.\n\nEjecuta primero configurarCredencialesSeguras()', 
      SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  let mensaje = 'üîê Credenciales guardadas:\n\n';
  propiedades.forEach(prop => {
    mensaje += `‚Ä¢ ${prop}\n`;
  });
  
  mensaje += '\n\nNOTA: Los valores est√°n encriptados y seguros.';
  
  SpreadsheetApp.getUi().alert('Credenciales Seguras', mensaje, SpreadsheetApp.getUi().ButtonSet.OK);
}

function actualizarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  
  const credencial = ui.prompt(
    'Actualizar Credencial',
    'Opciones disponibles:\n' +
    '‚Ä¢ DB_URL\n‚Ä¢ DB_USER\n‚Ä¢ DB_PASS\n‚Ä¢ API_URL\n‚Ä¢ API_TOKEN\n‚Ä¢ API_CHANNEL\n\n' +
    'Escribe el nombre de la credencial:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (credencial.getSelectedButton() !== ui.Button.OK) return;
  
  const nombre = credencial.getResponseText().trim();
  const credencialesValidas = ['DB_URL', 'DB_USER', 'DB_PASS', 'API_URL', 'API_TOKEN', 'API_CHANNEL'];
  
  if (!credencialesValidas.includes(nombre)) {
    ui.alert('‚ùå Error', 'Nombre de credencial no v√°lido.', ui.ButtonSet.OK);
    return;
  }
  
  const valor = ui.prompt(
    'Nuevo Valor',
    `Ingresa el nuevo valor para ${nombre}:`,
    ui.ButtonSet.OK_CANCEL
  );
  
  if (valor.getSelectedButton() === ui.Button.OK) {
    scriptProperties.setProperty(nombre, valor.getResponseText());
    ui.alert('‚úÖ √âxito', `La credencial "${nombre}" ha sido actualizada.`, ui.ButtonSet.OK);
  }
}

function eliminarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  const propiedades = scriptProperties.getKeys();
  
  if (propiedades.length === 0) {
    ui.alert('Sin Credenciales', 'No hay credenciales guardadas.', ui.ButtonSet.OK);
    return;
  }
  
  const response = ui.prompt(
    'Eliminar Credencial',
    'Credenciales disponibles:\n' + propiedades.join('\n') + '\n\nEscribe el nombre de la credencial a eliminar:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const credencial = response.getResponseText().trim();
    
    if (propiedades.includes(credencial)) {
      scriptProperties.deleteProperty(credencial);
      ui.alert('‚úÖ √âxito', `La credencial "${credencial}" ha sido eliminada.`, ui.ButtonSet.OK);
    } else {
      ui.alert('‚ùå Error', `No se encontr√≥ la credencial "${credencial}".`, ui.ButtonSet.OK);
    }
  }
}

// ================== CONFIGURACI√ìN Y CONSTANTES ==================

const CONFIG = {
  HOJAS: {
    ordenes: { nombre: "OrdenesRetenidas", headers: ["Zona", "Cliente", "√ìrden", "Fecha", "Observaci√≥n", "Estado", "Motivo Retenci√≥n"] },
    logs: { nombre: "LogsLiberaciones", headers: ["OrderNum", "Zona", "Cliente", "Fecha Liberaci√≥n", "Hora Liberaci√≥n", "UsuarioID", "Nombre Usuario", "Observaciones", "Estado"] },
    control: { nombre: "ControlEnvios", headers: ["N√∫mero de Orden", "Estado Actual", "Fecha √öltimo Env√≠o", "Hora √öltimo Env√≠o", "Tipo de Notificaci√≥n", "¬øRetenida Notificada Hoy?", "¬øLiberaci√≥n Notificada Hoy?", "Cliente", "Zona"] },
    contactos: { nombre: "ContactosZonas", headers: ["Zona", "Nombre Representante", "WhatsApp", "Email", "Activo"] }
  },
  CONTACTOS_INICIALES: [
    ["Zona1Cundinamarca-Boyac√°-Santa", "Juan Camilo Gil Orjuela", "3182260739", "", "SI"],
    ["Zona2-Cundinamarca", "Sergio Andres Rojas Sanchez", "3182260739", "", "SI"],
    ["Zona3-Boyac√°", "Yury Fonseca Patarroyo", "3182260739", "", "SI"],
    ["Zona4-Santander-Cesar", "Oscar Fernando Chingate Cruz", "3182260739", "", "SI"],
    ["Zona5-Norte de Santander", "Freddy Andres Bastianelli Fontana", "3182260739", "", "SI"],
    ["Zona6-Suroeste Antioque√±o", "Carlos Andres Arboleda Tabares", "3182260739", "", "SI"],
    ["Zona7-Oriente y Nte Antioqu√≠a", "Rafael Leonardo Pe√±a Sarmiento", "3182260739", "", "SI"],
    ["Zona8-Meta", "Ximena Nathalia Nu√±ez Cruz", "3182260739", "", "SI"],
    ["Zona9-Casanar√©", "Angel Alonso Vasquez Morales", "3182260739", "", "SI"],
    ["Zona10-Tolima Centro - Norte", "Assad Fraija Lopera", "3182260739", "", "SI"],
    ["Zona11-Tolima Sur y Oriente", "Edna Liliana Portillo", "3182260739", "", "SI"],
    ["Zona12-Huila Norte", "Domingo Jose Soto Martinez", "3182260739", "", "SI"],
    ["Zona14-HuilaCentroSur-Caquet√°", "Ivan Dario Lopez Rubio", "3182260739", "", "SI"],
    ["Zona15-Cauca", "Claudia Patricia Ussa", "3182260739", "", "SI"],
    ["Zona16-Nari√±o", "Carlos Alberto Castillo √ëa√±ez", "3182260739", "", "SI"],
    ["Zona17-Valle", "Diego Herney Guisa Velasquez", "3182260739", "", "SI"],
    ["Zona18-Eje Cafetero", "Juan Pablo Londo√±o Aristizabal", "3182260739", "", "SI"],
    ["Zona 19 Palma", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 20 Urab√°", "Gadelia Gliseth Gomez Gomez", "3182260739", "", "SI"],
    ["Zona 21 Ca√±a", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 23 - Caribe seco", "Sandra Judith Castillo", "3182260739", "", "SI"],
    ["Zona 25 Flores", "Javier Leonardo Erazo Velandia", "3182260739", "", "SI"],
    ["Ecuador", "Sandra Valverde", "3182260739", "", "SI"],
    ["Licitaciones Colinagro", "Sandra Valverde", "3182260739", "", "SI"],
    ["Bolivia", "Representante sin asignar", "3182260739", "", "SI"],
    ["Gerencia General", "Representante sin asignar", "3182260739", "", "SI"],
    ["Republica Dominicana", "Representante sin asignar", "3182260739", "", "SI"]
  ]
};

// ================== FUNCIONES AUXILIARES ==================

function getSheet(nombre, headers, crear = true) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let hoja = ss.getSheetByName(nombre);
  
  if (!hoja && crear) {
    hoja = ss.insertSheet(nombre);
    if (headers) {
      hoja.getRange(1, 1, 1, headers.length).setValues([headers])
        .setFontWeight("bold").setBackground("#4285f4").setFontColor("white");
      hoja.setFrozenRows(1);
      hoja.autoResizeColumns(1, headers.length);
    }
  }
  return hoja;
}

function formatDate(fecha, formato = "dd/MM/yyyy") {
  if (!fecha) return "Sin fecha";
  try {
    const fechaObj = fecha instanceof Date ? fecha : new Date(fecha);
    return Utilities.formatDate(fechaObj, "America/Bogota", formato);
  } catch (e) {
    return String(fecha);
  }
}

function getHoraColombia() {
  const ahora = new Date();
  const horaColombia = new Date(ahora.toLocaleString("en-US", {timeZone: "America/Bogota"}));
  return horaColombia;
}

function procesarFecha(fechaString) {
  if (!fechaString) return "";
  
  fechaString = String(fechaString);
  
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(fechaString)) {
    return fechaString;
  }
  
  if (fechaString.includes('T') || fechaString.includes('-')) {
    try {
      const soloFecha = fechaString.split('T')[0];
      
      if (soloFecha.includes('-')) {
        const partes = soloFecha.split('-');
        if (partes.length === 3) {
          const a√±o = partes[0];
          const mes = partes[1].padStart(2, '0');
          const dia = partes[2].padStart(2, '0');
          return `${dia}/${mes}/${a√±o}`;
        }
      }
      
      const fecha = new Date(fechaString);
      const dia = String(fecha.getDate()).padStart(2, '0');
      const mes = String(fecha.getMonth() + 1).padStart(2, '0');
      const a√±o = fecha.getFullYear();
      return `${dia}/${mes}/${a√±o}`;
    } catch (e) {
      Logger.log(`Error procesando fecha: ${fechaString} - ${e.message}`);
      return fechaString.split('T')[0];
    }
  }
  
  return fechaString;
}

function formatearNombreCorto(nombreCompleto) {
  if (!nombreCompleto) return "Representante";
  
  const partes = nombreCompleto.trim().split(/\s+/);
  
  if (partes.length === 1) return partes[0];
  if (partes.length === 2) return partes.join(' ');
  
  const preposiciones = ['de', 'del', 'la', 'las', 'los', 'da', 'do', 'dos'];
  
  let nombres = [];
  let i = 0;
  
  while (i < partes.length && i < 2) {
    if (!preposiciones.includes(partes[i].toLowerCase())) {
      nombres.push(partes[i]);
    }
    i++;
  }
  
  if (nombres.length === 0) {
    nombres = partes.slice(0, 2);
  }
  
  return nombres.join(' ');
}

function showAlert(titulo, mensaje) {
  SpreadsheetApp.getUi().alert(titulo, mensaje, SpreadsheetApp.getUi().ButtonSet.OK);
}

// ================== CONFIGURACI√ìN INICIAL ==================

function configuracionInicial() {
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, CONFIG.HOJAS.contactos.headers);
  
  if (hojaContactos.getLastRow() === 1) {
    hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, CONFIG.HOJAS.contactos.headers.length)
      .setValues(CONFIG.CONTACTOS_INICIALES);
    showAlert('‚úÖ Hoja de Contactos Creada', 
      'Se ha creado la hoja "ContactosZonas" con los datos iniciales.\n\n' +
      'Puedes actualizar los n√∫meros de WhatsApp y nombres directamente en esta hoja.');
  }
}

// ================== CARGA DE CONTACTOS ==================

function cargarContactosZonas() {
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  if (!hojaContactos) {
    throw new Error("No se encontr√≥ la hoja ContactosZonas. Ejecuta configuracionInicial() primero.");
  }
  
  SpreadsheetApp.flush();
  
  const datos = hojaContactos.getDataRange().getValues();
  const zonaANumero = {};
  const zonaANombre = {};
  
  Logger.log(`Cargando ${datos.length - 1} contactos desde la hoja ContactosZonas`);
  
  datos.slice(1).forEach((row, index) => {
    const [zona, nombre, whatsapp, email, activo] = row;
    
    const zonaLimpia = String(zona).trim();
    const nombreLimpio = String(nombre).trim();
    const whatsappLimpio = String(whatsapp).trim().replace(/\D/g, '');
    const activoLimpio = String(activo).trim().toUpperCase();
    
    if (zonaLimpia.includes("23")) {
      Logger.log(`Zona 23 encontrada: Nombre="${nombreLimpio}", WhatsApp="${whatsappLimpio}", Activo="${activoLimpio}"`);
    }
    
    if (activoLimpio === "SI" && zonaLimpia && whatsappLimpio) {
      zonaANumero[zonaLimpia] = whatsappLimpio;
      zonaANombre[zonaLimpia] = nombreLimpio || "Representante sin asignar";
      
      Logger.log(`Contacto cargado: ${zonaLimpia} -> ${nombreLimpio} (${whatsappLimpio})`);
    } else if (zonaLimpia) {
      Logger.log(`Contacto NO cargado: ${zonaLimpia} - Activo: ${activoLimpio}, WhatsApp: ${whatsappLimpio}`);
    }
  });
  
  Logger.log(`Total de contactos activos cargados: ${Object.keys(zonaANumero).length}`);
  
  return { zonaANumero, zonaANombre };
}

// ================== TRIGGERS ==================

function configurarTriggersDiarios() {
  configuracionInicial();
  
  ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(7).everyDays(1).create();
  ScriptApp.newTrigger('verificarCambios').timeBased().everyMinutes(5).create();
  
  showAlert('‚úÖ Sistema Configurado', 
    'El sistema enviar√° autom√°ticamente:\n\n' +
    '‚Ä¢ 7:00 AM: Todas las √≥rdenes retenidas (reporte diario)\n' +
    '‚Ä¢ Cada 5 minutos: Verificaci√≥n de cambios (liberaciones y nuevas √≥rdenes)\n\n' +
    'NOTA: Las notificaciones de cambios funcionan las 24 horas');
}

function configurarTriggersHorarioLaboral() {
  configuracionInicial();
  
  ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(7).everyDays(1).create();
  ScriptApp.newTrigger('verificarCambiosHorarioLaboral').timeBased().everyMinutes(5).create();
  
  showAlert('‚úÖ Sistema Configurado (Horario Laboral)', 
    'El sistema enviar√° autom√°ticamente:\n\n' +
    '‚Ä¢ 7:00 AM: Todas las √≥rdenes retenidas (reporte diario)\n' +
    '‚Ä¢ Cada 5 minutos (8 AM - 6 PM): Verificaci√≥n de cambios\n\n' +
    'NOTA: Las verificaciones solo funcionan en horario laboral');
}

function reporteDiario() {
  actualizarYEnviarOrdenesCredito(true);
}

function verificarCambios() {
  actualizarYEnviarOrdenesCredito(false);
}

function verificarCambiosHorarioLaboral() {
  const ahora = new Date();
  const horaColombia = new Date(ahora.toLocaleString("en-US", {timeZone: "America/Bogota"}));
  const horaActual = horaColombia.getHours();
  
  if (horaActual >= 8 && horaActual < 18) {
    verificarCambios();
  } else {
    Logger.log(`Verificaci√≥n omitida - fuera de horario laboral (${horaActual}:00 hora Colombia)`);
  }
}

function configurarReporteDiarioPersonalizado() {
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.prompt(
    '‚è∞ Configurar Hora del Reporte Diario',
    'Ingresa la hora para el reporte diario (0-23):\n\n' +
    'Ejemplos:\n' +
    '‚Ä¢ 7 = 7:00 AM\n' +
    '‚Ä¢ 13 = 1:00 PM\n' +
    '‚Ä¢ 18 = 6:00 PM',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) return;
  
  const hora = parseInt(response.getResponseText().trim());
  
  if (isNaN(hora) || hora < 0 || hora > 23) {
    showAlert('‚ùå Error', 'Debes ingresar un n√∫mero v√°lido entre 0 y 23');
    return;
  }
  
  ScriptApp.getProjectTriggers().forEach(trigger => {
    if (trigger.getHandlerFunction() === 'reporteDiario') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  ScriptApp.newTrigger('reporteDiario')
    .timeBased()
    .atHour(hora)
    .everyDays(1)
    .create();
  
  const horaFormateada = hora === 0 ? '12:00 AM' : 
                        hora < 12 ? `${hora}:00 AM` : 
                        hora === 12 ? '12:00 PM' : 
                        `${hora - 12}:00 PM`;
  
  showAlert('‚úÖ Reporte Diario Configurado', 
    `El reporte diario se enviar√° todos los d√≠as a las ${horaFormateada}\n\n` +
    'NOTA: Los triggers de verificaci√≥n de cambios no se han modificado.');
}

function configurarTriggerCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  const responseReporte = ui.prompt(
    '‚è∞ Hora del Reporte Diario',
    'Ingresa la hora para el reporte diario (0-23):\n\n' +
    'Ejemplos: 7 = 7:00 AM, 13 = 1:00 PM',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (responseReporte.getSelectedButton() !== ui.Button.OK) return;
  
  const horaReporte = parseInt(responseReporte.getResponseText().trim());
  
  if (isNaN(horaReporte) || horaReporte < 0 || horaReporte > 23) {
    showAlert('‚ùå Error', 'Hora inv√°lida para el reporte diario');
    return;
  }
  
  const tipoVerificacion = ui.alert(
    'üîÑ Tipo de Verificaci√≥n de Cambios',
    '¬øC√≥mo deseas configurar la verificaci√≥n de cambios?\n\n' +
    'YES = Cada 5 minutos (24 horas)\n' +
    'NO = Cada 5 minutos (solo horario laboral 8AM-6PM)',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (tipoVerificacion === ui.Button.CANCEL) return;
  
  configuracionInicial();
  
  ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  ScriptApp.newTrigger('reporteDiario')
    .timeBased()
    .atHour(horaReporte)
    .everyDays(1)
    .create();
  
  if (tipoVerificacion === ui.Button.YES) {
    ScriptApp.newTrigger('verificarCambios')
      .timeBased()
      .everyMinutes(5)
      .create();
  } else {
    ScriptApp.newTrigger('verificarCambiosHorarioLaboral')
      .timeBased()
      .everyMinutes(5)
      .create();
  }
  
  const horaFormateada = horaReporte === 0 ? '12:00 AM' : 
                        horaReporte < 12 ? `${horaReporte}:00 AM` : 
                        horaReporte === 12 ? '12:00 PM' : 
                        `${horaReporte - 12}:00 PM`;
  
  const tipoConfig = tipoVerificacion === ui.Button.YES ? '24 horas' : 'horario laboral (8AM-6PM)';
  
  showAlert('‚úÖ Sistema Completamente Configurado', 
    `Configuraci√≥n aplicada:\n\n` +
    `üìä Reporte diario: ${horaFormateada}\n` +
    `üîÑ Verificaci√≥n de cambios: Cada 5 minutos (${tipoConfig})\n\n` +
    'El sistema est√° listo para enviar notificaciones autom√°ticas.');
}

function verTriggersActivos() {
  const triggers = ScriptApp.getProjectTriggers();
  
  if (triggers.length === 0) {
    showAlert('üìÖ Triggers Activos', 'No hay triggers configurados actualmente.');
    return;
  }
  
  let mensaje = `Total de triggers activos: ${triggers.length}\n\n`;
  
  triggers.forEach((trigger, index) => {
    const funcion = trigger.getHandlerFunction();
    const tipo = trigger.getEventType();
    
    mensaje += `${index + 1}. ${funcion}\n`;
    
    if (funcion === 'reporteDiario') {
      mensaje += `   ‚è∞ Reporte diario\n`;
    } else if (funcion === 'verificarCambios') {
      mensaje += `   üîÑ Verificaci√≥n cada 5 minutos (24/7)\n`;
    } else if (funcion === 'verificarCambiosHorarioLaboral') {
      mensaje += `   üîÑ Verificaci√≥n cada 5 minutos (horario laboral)\n`;
    }
    
    mensaje += '\n';
  });
  
  showAlert('üìÖ Triggers Activos', mensaje);
}

function detenerTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  showAlert('üõë Triggers Detenidos', 
    `Se han eliminado ${triggers.length} triggers.\n\n` +
    'El sistema NO enviar√° notificaciones autom√°ticas hasta que vuelvas a configurar los triggers.');
}

// ================== FUNCI√ìN PRINCIPAL ==================

function actualizarYEnviarOrdenesCredito(esReporteDiario = true) {
  // Obtener credenciales de forma segura
  const credenciales = getCredenciales();
  
  // Verificar que las credenciales existan
  if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
    SpreadsheetApp.getUi().alert(
      '‚ùå Error de Configuraci√≥n',
      'No se encontraron las credenciales de la base de datos.\n\n' +
      'Por favor, ejecuta primero la funci√≥n configurarCredencialesSeguras() desde el editor de scripts.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = {};
  
  Object.entries(CONFIG.HOJAS).forEach(([key, config]) => {
    if (key !== 'contactos') {
      sheets[key] = getSheet(config.nombre, config.headers);
    }
  });
  
  sheets.ordenes.clear();
  sheets.ordenes.getRange(1, 1, 1, CONFIG.HOJAS.ordenes.headers.length)
    .setValues([CONFIG.HOJAS.ordenes.headers]);
  
  const controlData = {};
  const hoy = getHoraColombia();
  const fechaHoy = formatDate(hoy);
  
  if (sheets.control.getLastRow() > 1) {
    sheets.control.getDataRange().getValues().slice(1).forEach((row, index) => {
      const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = row;
      controlData[orden] = { 
        estado, fechaEnvio, horaEnvio, tipoNotificacion,
        enviadoHoyRetenida: (fechaEnvio === fechaHoy) ? enviadoHoyRetenida : "NO",
        enviadoHoyLiberada: (fechaEnvio === fechaHoy) ? enviadoHoyLiberada : "NO",
        cliente, zona, fila: index + 2 
      };
    });
  }
  
  // Usar credenciales seguras para la conexi√≥n
  const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
  const ordenesRetenidasActuales = new Map();
  const ordenesLiberadasActuales = new Map();
  
  try {
    const queryRetenidas = `
      SELECT d.OrderHed_OrderNum, CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha,
             d.Zona, d.Customer_Name, d.ObservacionesRetencionCredito
      FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
      WHERE d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0 
        AND d.Zona != 'Comercial Agrosoil'
        AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
      ORDER BY d.OrderHed_OrderNum DESC`;
    
    const stmt1 = conn.createStatement();
    const results1 = stmt1.executeQuery(queryRetenidas);
    const filasOrdenes = [];
    const ordenesVistas = new Set();
    
    while (results1.next()) {
      const orden = results1.getString("OrderHed_OrderNum");
      if (ordenesVistas.has(orden)) continue;
      ordenesVistas.add(orden);
      
      const datos = {
        zona: results1.getString("Zona"),
        cliente: results1.getString("Customer_Name"),
        fecha: procesarFecha(results1.getString("Fecha")),
        observacion: (results1.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
      };
      
      filasOrdenes.push([
        datos.zona, datos.cliente, orden, datos.fecha,
        `${orden}: ${datos.observacion}`, "RETENIDA", "CR√âDITO"
      ]);
      
      ordenesRetenidasActuales.set(orden, datos);
    }
    stmt1.close();
    
    if (filasOrdenes.length > 0) {
      sheets.ordenes.getRange(2, 1, filasOrdenes.length, CONFIG.HOJAS.ordenes.headers.length)
        .setValues(filasOrdenes);
    }
    
    const queryLiberadas = `
      SELECT d.OrderHed_OrderNum, d.Zona, d.Customer_Name,
             CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha,
             CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS HoraLiberacionCredito,
             oh.CreditOverrideUserID, u.Name, d.ObservacionesRetencionCredito,
             CONVERT(VARCHAR(19), d.FechaLiberacionCredito, 120) AS FechaHoraCompleta
      FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
      JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
        ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
      LEFT JOIN EpicorTrain10.dbo.UserFile u WITH (NOLOCK) 
        ON oh.CreditOverrideUserID = u.DcdUserID
      WHERE d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 
        AND d.Zona != 'Comercial Agrosoil' AND oh.CreditOverride = 1 
        AND d.FechaLiberacionCredito IS NOT NULL
        AND d.FechaLiberacionCredito >= DATEADD(day, -1, GETDATE())
      ORDER BY d.FechaLiberacionCredito DESC, d.HoraLiberacionCredito DESC`;
    
    const stmt2 = conn.createStatement();
    const results2 = stmt2.executeQuery(queryLiberadas);
    const dataLiberadas = [];
    
    while (results2.next()) {
      const ordenNum = results2.getString("OrderHed_OrderNum");
      const fechaLiberacion = results2.getString("Fecha") || "";
      const horaLiberacion = results2.getString("HoraLiberacionCredito") || "";
      const fechaHoraCompleta = results2.getString("FechaHoraCompleta") || "";
      
      const datosLiberacion = {
        zona: results2.getString("Zona"),
        cliente: results2.getString("Customer_Name"),
        fecha: fechaLiberacion,
        hora: horaLiberacion,
        fechaHoraCompleta: fechaHoraCompleta,
        observacion: (results2.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
      };
      
      datosLiberacion.fecha = procesarFecha(datosLiberacion.fecha);
      
      dataLiberadas.push([
        ordenNum,
        datosLiberacion.zona,
        datosLiberacion.cliente,
        datosLiberacion.fecha || "",
        datosLiberacion.hora || "",
        results2.getString("CreditOverrideUserID") || "",
        results2.getString("Name") || "",
        datosLiberacion.observacion,
        "LIBERADA"
      ]);
      
      ordenesLiberadasActuales.set(ordenNum, datosLiberacion);
    }
    stmt2.close();
    
    if (dataLiberadas.length > 0) {
      const marcaTiempo = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
      const datosConSeparador = [...dataLiberadas, 
        ["", "", "", "", "", "", "", "", `‚Üê Nuevas liberaciones: ${marcaTiempo}`]];
      sheets.logs.insertRowsAfter(1, datosConSeparador.length);
      sheets.logs.getRange(2, 1, datosConSeparador.length, CONFIG.HOJAS.logs.headers.length)
        .setValues(datosConSeparador);
    }
    
  } finally {
    conn.close();
  }
  
  const ordenesParaEnviar = [];
  const horaActual = formatDate(hoy, "HH:mm:ss");
  
  ordenesRetenidasActuales.forEach((datos, orden) => {
    const control = controlData[orden];
    let debeEnviar = false;
    let tipo = '';
    
    if (!control) {
      debeEnviar = true;
      tipo = 'Nueva orden retenida';
    } else if (control.estado === 'LIBERADA' && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Orden volvi√≥ a retenci√≥n';
    } else if (esReporteDiario && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Reporte diario 7:00 AM';
    }
    
    if (debeEnviar) {
      ordenesParaEnviar.push({ orden, tipo, datos, esLiberada: false });
    }
  });
  
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    const control = controlData[orden];
    let debeEnviar = false;
    
    if (control && control.estado === 'RETENIDA' && control.enviadoHoyLiberada === "NO") {
      debeEnviar = true;
    } else if (!control) {
      debeEnviar = true;
    }
    
    if (debeEnviar) {
      const datosCompletos = {
        zona: datosLiberacion.zona,
        cliente: datosLiberacion.cliente,
        fecha: datosLiberacion.fecha,
        hora: datosLiberacion.hora || "",
        observacion: datosLiberacion.observacion
      };
      
      ordenesParaEnviar.push({
        orden,
        tipo: 'Orden liberada',
        datos: datosCompletos,
        esLiberada: true
      });
    }
  });
  
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    if (!controlData[orden]) {
      controlData[orden] = {
        estado: 'LIBERADA',
        fechaEnvio: fechaHoy,
        horaEnvio: horaActual,
        tipoNotificacion: 'Orden liberada',
        enviadoHoyRetenida: "NO",
        enviadoHoyLiberada: "NO",
        cliente: datosLiberacion.cliente,
        zona: datosLiberacion.zona,
        fila: null
      };
    }
  });
  
  enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual);
  Logger.log(`‚úÖ Proceso completo - ${esReporteDiario ? 'REPORTE DIARIO' : 'VERIFICACI√ìN'} - Enviadas: ${ordenesParaEnviar.length}`);
}

// ================== FUNCI√ìN DE ENV√çO ==================

function enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  if (ordenesParaEnviar.length === 0) return;
  
  // Obtener credenciales de forma segura
  const credenciales = getCredenciales();
  
  // Verificar credenciales de API
  if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
    SpreadsheetApp.getUi().alert(
      '‚ùå Error de Configuraci√≥n',
      'No se encontraron las credenciales de la API.\n\n' +
      'Por favor, ejecuta primero la funci√≥n configurarCredencialesSeguras() desde el editor de scripts.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  const contactos = cargarContactosZonas();
  const fechaReporte = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
  const actualizacionesControl = [];
  
  ordenesParaEnviar.slice(0, 200).forEach(({ orden, tipo, datos, esLiberada }) => {
    const numeroWhatsApp = contactos.zonaANumero[datos.zona];
    const representante = contactos.zonaANombre[datos.zona];
    
    Logger.log(`Procesando orden ${orden} - Zona: ${datos.zona}`);
    Logger.log(`WhatsApp encontrado: ${numeroWhatsApp || 'NO ENCONTRADO'}`);
    Logger.log(`Representante: ${representante || 'NO ENCONTRADO'}`);
    
    if (!numeroWhatsApp) {
      Logger.log(`‚ö†Ô∏è ADVERTENCIA: No se encontr√≥ contacto para zona: ${datos.zona}`);
      Logger.log(`Se usar√° n√∫mero por defecto: 3182260739`);
    }
    
    const numeroFinal = numeroWhatsApp || "3182260739";
    const telefono = "57" + numeroFinal;
    const representanteFinal = representante || "Representante sin asignar";
    const representanteCorto = formatearNombreCorto(representanteFinal);
    
    const mensaje = esLiberada ? '‚úÖ ORDEN LIBERADA' : 
      tipo.includes('Nueva') ? 'üÜï NUEVA ORDEN RETENIDA' :
      tipo.includes('volvi√≥') ? '‚ö†Ô∏è ORDEN VOLVI√ì A RETENCI√ìN' : 
      'üìä REPORTE DIARIO 7:00 AM';
    
    const params = esLiberada ? {
      "1": orden,
      "2": procesarFecha(datos.fecha) + (datos.hora ? " " + datos.hora : ""),
      "3": datos.cliente,
      "4": datos.zona,
      "5": representanteCorto,
      "6": datos.observacion,
      "7": "3103149259"
    } : {
      "1": fechaReporte,
      "2": representanteCorto,
      "3": datos.zona,
      "4": datos.cliente,
      "5": `${mensaje} üîπ Orden: ${orden} - ${procesarFecha(datos.fecha)}`,
      "6": `üìÑ ${orden}: ${datos.observacion}`,
      "7": "3103149259"
    };
    
    try {
      Logger.log(`Enviando notificaci√≥n ${esLiberada ? 'LIBERACI√ìN' : 'RETENCI√ìN'} para orden ${orden}`);
      Logger.log(`Tel√©fono destino: ${telefono} (${representanteCorto})`);
      
      const response = UrlFetchApp.fetch(credenciales.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": credenciales.API.token },
        payload: JSON.stringify({
          chatPlatform: "whatsapp",
          chatChannelNumber: credenciales.API.channel,
          platformContactId: telefono,
          ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv_0",
          params,
          clientPayload: `orden_${tipo}_${orden}_${Date.now()}`
        }),
        muteHttpExceptions: true
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        Logger.log(`‚úÖ Notificaci√≥n enviada exitosamente para orden ${orden} a ${telefono}`);
        
        const controlExistente = controlData[orden];
        
        actualizacionesControl.push({
          orden, 
          estado: esLiberada ? 'LIBERADA' : 'RETENIDA',
          fechaEnvio: fechaHoy,
          horaEnvio: horaActual,
          tipoNotificacion: tipo,
          enviadoHoyRetenida: !esLiberada ? "SI" : (controlExistente?.enviadoHoyRetenida || "NO"),
          enviadoHoyLiberada: esLiberada ? "SI" : (controlExistente?.enviadoHoyLiberada || "NO"),
          cliente: datos.cliente,
          zona: datos.zona,
          fila: controlExistente?.fila
        });
      } else {
        Logger.log(`‚ùå Error en respuesta para orden ${orden}: ${texto}`);
      }
    } catch (e) {
      Logger.log(`‚ùå Error enviando ${orden}: ${e.message}`);
    }
    
    Utilities.sleep(1000);
  });
  
  actualizacionesControl.forEach(act => {
    const valores = [
      act.orden, act.estado, act.fechaEnvio, act.horaEnvio, 
      act.tipoNotificacion, act.enviadoHoyRetenida, act.enviadoHoyLiberada,
      act.cliente, act.zona
    ];
    
    if (act.fila) {
      sheets.control.getRange(act.fila, 1, 1, 9).setValues([valores]);
    } else {
      sheets.control.appendRow(valores);
    }
  });
  
  if (sheets.control.getLastRow() > 1) {
    const rangoEstado = sheets.control.getRange(2, 2, sheets.control.getLastRow() - 1, 1);
    sheets.control.clearConditionalFormatRules();
    
    ['RETENIDA', 'LIBERADA'].forEach((estado, i) => {
      const regla = SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(estado)
        .setBackground(i === 0 ? '#ffcdd2' : '#c8e6c9')
        .setFontColor(i === 0 ? '#c62828' : '#2e7d32')
        .setRanges([rangoEstado])
        .build();
      sheets.control.setConditionalFormatRules([...sheets.control.getConditionalFormatRules(), regla]);
    });
    
    sheets.control.autoResizeColumns(1, 9);
  }
}

// ================== ESTAD√çSTICAS ==================

function verEstadisticas() {
  const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
  if (!hojaControl || hojaControl.getLastRow() <= 1) {
    showAlert('üìä Estad√≠sticas', 'No hay datos disponibles');
    return;
  }
  
  const datos = hojaControl.getDataRange().getValues().slice(1);
  const hoy = formatDate(getHoraColombia());
  const palabrasPrueba = ['PRUEBA', 'TEST', 'TESTING', 'DEMO'];
  
  const stats = datos.reduce((acc, row) => {
    const [orden, estado, fechaEnvio, , tipoMensaje, enviadaRetenida, enviadaLiberada] = row;
    const esPrueba = palabrasPrueba.some(p => 
      String(orden).toUpperCase().includes(p) || 
      String(tipoMensaje).toUpperCase().includes(p)
    );
    
    if (esPrueba) {
      acc.pruebasTotal++;
    } else {
      acc.total++;
      if (estado === 'RETENIDA') acc.retenidas++;
      if (estado === 'LIBERADA') acc.liberadas++;
      if (fechaEnvio === hoy && enviadaRetenida === "SI") acc.enviadasHoyRetenida++;
      if (fechaEnvio === hoy && enviadaLiberada === "SI") acc.enviadasHoyLiberada++;
    }
    return acc;
  }, { total: 0, retenidas: 0, liberadas: 0, enviadasHoyRetenida: 0, enviadasHoyLiberada: 0, pruebasTotal: 0 });
  
  const hojaOrdenes = getSheet(CONFIG.HOJAS.ordenes.nombre, null, false);
  const hojaLogs = getSheet(CONFIG.HOJAS.logs.nombre, null, false);
  
  const ordenesRetenidasActuales = hojaOrdenes ? hojaOrdenes.getLastRow() - 1 : 0;
  const ordenesLiberadasHistorico = hojaLogs ? 
    new Set(hojaLogs.getDataRange().getValues().slice(1)
      .filter(row => row[0] && !String(row[0]).includes('‚Üê'))
      .map(row => row[0])).size : 0;
  
  showAlert('üìä ESTAD√çSTICAS DEL SISTEMA',
    `‚îÅ‚îÅ‚îÅ‚îÅ ESTADO ACTUAL ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `√ìrdenes retenidas actualmente: ${ordenesRetenidasActuales}\n` +
    `√ìrdenes liberadas (hist√≥rico): ${ordenesLiberadasHistorico}\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ NOTIFICACIONES ENVIADAS ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `Total notificaciones (sin pruebas): ${stats.total}\n` +
    `‚îú‚îÄ Estado Retenida: ${stats.retenidas}\n` +
    `‚îî‚îÄ Estado Liberada: ${stats.liberadas}\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ ACTIVIDAD DE HOY ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `Fecha: ${hoy}\n` +
    `Retenciones notificadas: ${stats.enviadasHoyRetenida}\n` +
    `Liberaciones notificadas: ${stats.enviadasHoyLiberada}\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ INFORMACI√ìN ADICIONAL ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `Pruebas realizadas: ${stats.pruebasTotal}\n` +
    `Total registros: ${datos.length}`
  );
}

// ================== FUNCIONES DE PRUEBA ==================

function ejecutarPrueba(tipo, esLiberada = false) {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  const response = ui.prompt(
    `Prueba de ${esLiberada ? 'Liberaci√≥n' : 'Retenci√≥n'}`,
    'Ingresa el n√∫mero de orden:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) return;
  
  const ordenNum = response.getResponseText().trim();
  if (!ordenNum) {
    showAlert('Error', 'Debes ingresar un n√∫mero de orden');
    return;
  }
  
  const hojas = [CONFIG.HOJAS.ordenes.nombre, CONFIG.HOJAS.logs.nombre];
  let ordenEncontrada = null;
  
  for (const nombreHoja of hojas) {
    const hoja = getSheet(nombreHoja, null, false);
    if (!hoja) continue;
    
    const datos = hoja.getDataRange().getValues();
    const colOrden = nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 2 : 0;
    
    for (let i = 1; i < datos.length; i++) {
      if (String(datos[i][colOrden]) === String(ordenNum)) {
        ordenEncontrada = {
          zona: datos[i][nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 0 : 1],
          cliente: datos[i][nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 1 : 2],
          orden: ordenNum,
          fecha: datos[i][3],
          observacion: nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 
            datos[i][4].replace(`${ordenNum}: `, '') : datos[i][7]
        };
        break;
      }
    }
    if (ordenEncontrada) break;
  }
  
  if (!ordenEncontrada) {
    showAlert('Error', `No se encontr√≥ la orden ${ordenNum}`);
    return;
  }
  
  const confirmar = ui.alert(
    'Confirmar Prueba',
    `¬øEnviar notificaci√≥n de ${esLiberada ? 'LIBERACI√ìN' : 'RETENCI√ìN'} para?\n\n` +
    `Orden: ${ordenEncontrada.orden}\n` +
    `Cliente: ${ordenEncontrada.cliente}\n` +
    `Zona: ${ordenEncontrada.zona}\n\n` +
    'NOTA: Esto es solo una prueba.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar !== ui.Button.YES) return;
  
  const ordenesParaEnviar = [{
    orden: ordenEncontrada.orden,
    tipo: `${esLiberada ? 'Orden liberada' : tipo} (PRUEBA)`,
    datos: ordenEncontrada,
    esLiberada
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  const fechaHoy = formatDate(getHoraColombia());
  const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
  
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
  
  showAlert('‚úÖ Prueba Enviada',
    `Se envi√≥ la notificaci√≥n para la orden ${ordenNum}.\n\n` +
    `Revisa WhatsApp del representante de ${ordenEncontrada.zona}.`
  );
}

function probarNotificacionOrdenRetenida() {
  const ui = SpreadsheetApp.getUi();
  const tipoNotificacion = ui.alert(
    'Tipo de Notificaci√≥n',
    '¬øQu√© tipo de notificaci√≥n quieres enviar?\n\n' +
    'YES = Nueva Orden Retenida\n' +
    'NO = Orden que Volvi√≥ a Retenci√≥n',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (tipoNotificacion === ui.Button.CANCEL) return;
  
  const tipo = tipoNotificacion === ui.Button.YES ? 
    'Nueva orden retenida' : 'Orden volvi√≥ a retenci√≥n';
  
  ejecutarPrueba(tipo, false);
}

function probarLiberacionOrdenExistente() {
  ejecutarPrueba('Orden liberada', true);
}

function probarNotificacionOrdenLiberada() {
  ejecutarPrueba('Orden liberada', true);
}

function probarNotificacionRetenidaPersonalizada() {
  const ui = SpreadsheetApp.getUi();
  const campos = ['N√∫mero de orden:', 'Nombre del cliente:', 'Zona (debe existir en ContactosZonas):', 'Motivo de retenci√≥n:'];
  const valores = [];
  
  for (const campo of campos) {
    const response = ui.prompt('Datos de Prueba', campo, ui.ButtonSet.OK_CANCEL);
    if (response.getSelectedButton() !== ui.Button.OK) return;
    valores.push(response.getResponseText().trim());
  }
  
  const [ordenNum, cliente, zona, observacion] = valores;
  
  const confirmar = ui.alert(
    'Confirmar Prueba Personalizada',
    `¬øEnviar notificaci√≥n de RETENCI√ìN con estos datos?\n\n` +
    `Orden: ${ordenNum}\n` +
    `Cliente: ${cliente}\n` +
    `Zona: ${zona}\n` +
    `Motivo: ${observacion || "PRUEBA DEL SISTEMA"}\n\n` +
    'NOTA: Esto es solo una prueba.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar !== ui.Button.YES) return;
  
  const ordenesParaEnviar = [{
    orden: ordenNum,
    tipo: 'Nueva orden retenida (PRUEBA PERSONALIZADA)',
    datos: {
      zona,
      cliente,
      fecha: getHoraColombia(),
      observacion: observacion || "PRUEBA DEL SISTEMA"
    },
    esLiberada: false
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  const fechaHoy = formatDate(getHoraColombia());
  const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
  
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
  
  showAlert('‚úÖ Prueba Personalizada Enviada',
    `Se envi√≥ la notificaci√≥n de retenci√≥n.\n\n` +
    `Revisa WhatsApp del representante de ${zona}.`
  );
}

// ================== GESTI√ìN DE CONTACTOS ==================

function gestionarContactos() {
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, null, false);
  
  if (!hojaContactos) {
    const ui = SpreadsheetApp.getUi();
    if (ui.alert('Hoja de Contactos no encontrada',
        '¬øDeseas crear la hoja de contactos ahora?',
        ui.ButtonSet.YES_NO) === ui.Button.YES) {
      configuracionInicial();
    }
    return;
  }
  
  const datos = hojaContactos.getDataRange().getValues().slice(1);
  const stats = datos.reduce((acc, row) => {
    acc[row[4] === "SI" ? 'activos' : 'inactivos']++;
    return acc;
  }, { activos: 0, inactivos: 0 });
  
  const zonasSinContacto = datos
    .filter(row => row[4] !== "SI" || !row[2])
    .map(row => row[0]);
  
  let mensaje = `Total de zonas: ${datos.length}\n` +
    `Contactos activos: ${stats.activos}\n` +
    `Contactos inactivos: ${stats.inactivos}\n\n`;
  
  if (zonasSinContacto.length > 0) {
    mensaje += `‚ö†Ô∏è ZONAS SIN CONTACTO ACTIVO:\n` +
      zonasSinContacto.slice(0, 10).join('\n') +
      (zonasSinContacto.length > 10 ? `\n... y ${zonasSinContacto.length - 10} m√°s` : '') +
      '\n\n';
  }
  
  mensaje += 'Para editar contactos, ve a la hoja "ContactosZonas"';
  
  showAlert('üì± Gesti√≥n de Contactos', mensaje);
}

function verificarContactosZona() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(
    'Verificar Contacto de Zona',
    'Ingresa el nombre de la zona a verificar:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) return;
  
  const zonaBuscada = response.getResponseText().trim();
  if (!zonaBuscada) {
    showAlert('Error', 'Debes ingresar un nombre de zona');
    return;
  }
  
  const contactos = cargarContactosZonas();
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  const datos = hojaContactos.getDataRange().getValues();
  
  let zonaEncontrada = null;
  let datosZona = null;
  
  for (let i = 1; i < datos.length; i++) {
    const zona = String(datos[i][0]);
    if (zona.toLowerCase().includes(zonaBuscada.toLowerCase())) {
      zonaEncontrada = zona;
      datosZona = {
        zona: datos[i][0],
        nombre: datos[i][1],
        whatsapp: datos[i][2],
        email: datos[i][3],
        activo: datos[i][4]
      };
      break;
    }
  }
  
  if (!zonaEncontrada) {
    showAlert('Zona No Encontrada', 
      `No se encontr√≥ ninguna zona que contenga "${zonaBuscada}"`);
    return;
  }
  
  const mensaje = `üìç INFORMACI√ìN DE LA ZONA\n\n` +
    `Zona: ${datosZona.zona}\n` +
    `Representante: ${datosZona.nombre}\n` +
    `WhatsApp: ${datosZona.whatsapp || 'NO CONFIGURADO'}\n` +
    `Email: ${datosZona.email || 'No configurado'}\n` +
    `Estado: ${datosZona.activo}\n\n` +
    `${datosZona.activo === 'SI' && datosZona.whatsapp ? 
      '‚úÖ Esta zona EST√Å recibiendo notificaciones' : 
      '‚ùå Esta zona NO est√° recibiendo notificaciones'}`;
  
  showAlert('Informaci√≥n de Contacto', mensaje);
}

// ================== MEN√ö ==================

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  ui.createMenu('üîß Sistema de √ìrdenes')
    .addSubMenu(ui.createMenu('üîê Seguridad')
      .addItem('‚öôÔ∏è Configurar Credenciales', 'configurarCredencialesSeguras')
      .addItem('üëÅÔ∏è Ver Credenciales Guardadas', 'verPropiedadesGuardadas')
      .addItem('‚úèÔ∏è Actualizar Credencial', 'actualizarCredencial')
      .addItem('üóëÔ∏è Eliminar Credencial', 'eliminarCredencial'))
    .addSeparator()
    .addSubMenu(ui.createMenu('‚öôÔ∏è Configurar Triggers')
      .addItem('üöÄ Configuraci√≥n Completa Personalizada', 'configurarTriggerCompleto')
      .addSeparator()
      .addItem('üïê Solo Verificaci√≥n: Cada 5 min (24 horas)', 'configurarTriggersDiarios')
      .addItem('üè¢ Solo Verificaci√≥n: Cada 5 min (horario laboral)', 'configurarTriggersHorarioLaboral')
      .addItem('‚è∞ Solo Reporte Diario: Hora personalizada', 'configurarReporteDiarioPersonalizado')
      .addSeparator()
      .addItem('üìÖ Ver Triggers Activos', 'verTriggersActivos')
      .addItem('üõë Detener todos los triggers', 'detenerTriggers'))
    .addItem('üìä Ver Estad√≠sticas', 'verEstadisticas')
    .addSubMenu(ui.createMenu('üì± Contactos')
      .addItem('üìã Ver Resumen de Contactos', 'gestionarContactos')
      .addItem('üîç Verificar Contacto de Zona', 'verificarContactosZona'))
    .addSeparator()
    .addSubMenu(ui.createMenu('üß™ Pruebas de Notificaciones')
      .addItem('üìã Probar Retenci√≥n (Orden Existente)', 'probarNotificacionOrdenRetenida')
      .addItem('‚úèÔ∏è Probar Retenci√≥n (Datos Personalizados)', 'probarNotificacionRetenidaPersonalizada')
      .addSeparator()
      .addItem('‚úÖ Probar Liberaci√≥n (Solo Retenidas)', 'probarLiberacionOrdenExistente')
      .addItem('üîî Probar Liberaci√≥n (Cualquier Orden)', 'probarNotificacionOrdenLiberada'))
    .addSeparator()
    .addItem('üîÑ Ejecutar Reporte Diario Ahora', 'reporteDiario')
    .addItem('üîç Verificar Cambios Ahora', 'verificarCambios')
    .addToUi();
}
