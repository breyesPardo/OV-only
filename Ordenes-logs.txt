function actualizarOrdenesCredito() {
  const hojaOrdenes = "OrdenesRetenidas";
  const hojaLogs = "LogsLiberaciones";
  const hojaEncuesta = "EncuestaOrdenes";
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // Crear hojas si no existen
  let sheetOrdenes = ss.getSheetByName(hojaOrdenes);
  if (!sheetOrdenes) sheetOrdenes = ss.insertSheet(hojaOrdenes);
  else sheetOrdenes.clear();

  let sheetLogs = ss.getSheetByName(hojaLogs);
  if (!sheetLogs) sheetLogs = ss.insertSheet(hojaLogs);
  else sheetLogs.clear();

  let sheetEncuesta = ss.getSheetByName(hojaEncuesta);
  if (!sheetEncuesta) {
    sheetEncuesta = ss.insertSheet(hojaEncuesta);
    sheetEncuesta.appendRow(["NÂ° en lista", "NÃºmero de Orden", "Fecha y hora del registro"]);
    const protection = sheetEncuesta.protect();
    protection.setDescription("ProtecciÃ³n encuesta de Ã³rdenes liberadas");
    protection.removeEditors(protection.getEditors());
    if (protection.canDomainEdit()) protection.setDomainEdit(false);
  }

  // Encabezados
  const encabezadoOrdenes = [
    "OrderNum", "Fecha", "Zona", "Cliente", "Estado", "Motivo RetenciÃ³n", "Observaciones RetenciÃ³n"
  ];
  const encabezadoLogs = [
    "OrderNum", "Zona", "Cliente", "Fecha LiberaciÃ³n", "Hora LiberaciÃ³n", "UsuarioID", "Nombre Usuario", "Observaciones", "Estado"
  ];

  sheetOrdenes.getRange(1, 1, 1, encabezadoOrdenes.length).setValues([encabezadoOrdenes]);
  sheetLogs.getRange(1, 1, 1, encabezadoLogs.length).setValues([encabezadoLogs]);

  const conn = Jdbc.getConnection(
    "jdbc:sqlserver://35.243.175.82:1433;databaseName=EpicorRepTran",
    "udlxls",
    "#kYe-343"
  );

  const queryRetenidas = `
    SELECT 
      d.OrderHed_OrderNum,
      d.OrderHed_OrderDate,
      d.Zona,
      d.Customer_Name,
      d.OrderHed_OrderHeld,
      d.CreditoRetenido,
      d.ObservacionesRetencionCredito
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d
    LEFT JOIN Erp.OrderHed o ON d.OrderHed_OrderNum = o.OrderNum
    WHERE 
      d.CreditoRetenido = 1 
      AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil'
      AND (o.CreditOverride IS NULL OR o.CreditOverride = 0)
  `;

  const queryLiberadas = `
    SELECT 
      d.OrderHed_OrderNum,
      d.Zona,
      d.Customer_Name,
      o.CreditOverrideDate,
      o.CreditOverrideTime,
      o.CreditOverrideUserID,
      u.Name AS NombreUsuario,
      d.ObservacionesRetencionCredito
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d
    JOIN Erp.OrderHed o ON d.OrderHed_OrderNum = o.OrderNum
    LEFT JOIN Ice.SysUserFile u ON o.CreditOverrideUserID = u.UserID
    WHERE 
      d.CreditoRetenido = 0
      AND d.OrderHed_VoidOrder = 0
      AND d.Zona != 'Comercial Agrosoil'
      AND o.CreditOverride = 1
      AND o.CreditOverrideDate IS NOT NULL
      AND o.CreditOverrideDate >= DATEADD(DAY, -7, GETDATE())
  `;

  const stmt1 = conn.createStatement();
  const results1 = stmt1.executeQuery(queryRetenidas);
  const data1 = [];

  while (results1.next()) {
    let fechaOrden = "";
    try {
      const fechaRaw = results1.getString("OrderHed_OrderDate");
      if (fechaRaw) {
        const fechaObj = new Date(fechaRaw);
        if (!isNaN(fechaObj)) {
          fechaOrden = Utilities.formatDate(fechaObj, Session.getScriptTimeZone(), "dd/MM/yyyy");
        }
      }
    } catch (e) {
      fechaOrden = "";
    }

    const observacion = (results1.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES REGISTRADAS").toUpperCase();

    data1.push([
      results1.getString("OrderHed_OrderNum"),
      fechaOrden,
      results1.getString("Zona"),
      results1.getString("Customer_Name"),
      "RETENIDA",
      "CRÃ‰DITO",
      observacion
    ]);
  }

  if (data1.length > 0) {
    sheetOrdenes.getRange(2, 1, data1.length, encabezadoOrdenes.length).setValues(data1);
    const totalFilas = sheetOrdenes.getMaxRows();
    if (totalFilas > data1.length + 1) {
      sheetOrdenes.deleteRows(data1.length + 2, totalFilas - data1.length - 1);
    }
    const totalColumnas = sheetOrdenes.getMaxColumns();
    if (totalColumnas > encabezadoOrdenes.length) {
      sheetOrdenes.deleteColumns(encabezadoOrdenes.length + 1, totalColumnas - encabezadoOrdenes.length);
    }
  }

  const stmt2 = conn.createStatement();
  const results2 = stmt2.executeQuery(queryLiberadas);
  const data2 = [];

  while (results2.next()) {
    let fechaLiberacion = "";
    try {
      const fechaRaw = results2.getString("CreditOverrideDate");
      if (fechaRaw) {
        const fechaObj = new Date(fechaRaw);
        if (!isNaN(fechaObj)) {
          fechaLiberacion = Utilities.formatDate(fechaObj, Session.getScriptTimeZone(), "dd/MM/yyyy");
        }
      }
    } catch (e) {
      fechaLiberacion = "";
    }

    const observacion = (results2.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES REGISTRADAS").toUpperCase();

    data2.push([
      results2.getString("OrderHed_OrderNum"),
      results2.getString("Zona"),
      results2.getString("Customer_Name"),
      fechaLiberacion,
      results2.getString("CreditOverrideTime"),
      results2.getString("CreditOverrideUserID"),
      results2.getString("NombreUsuario"),
      observacion,
      "LIBERADA"
    ]);
  }

  if (data2.length > 0) {
    data2.sort((a, b) => {
      const fechaA = new Date(a[3].split("/").reverse().join("-"));
      const fechaB = new Date(b[3].split("/").reverse().join("-"));
      return fechaB - fechaA;
    });

    sheetLogs.getRange(2, 1, data2.length, encabezadoLogs.length).setValues(data2);
    const totalFilas = sheetLogs.getMaxRows();
    if (totalFilas > data2.length + 1) {
      sheetLogs.deleteRows(data2.length + 2, totalFilas - data2.length - 1);
    }
    const totalColumnas = sheetLogs.getMaxColumns();
    if (totalColumnas > encabezadoLogs.length) {
      sheetLogs.deleteColumns(encabezadoLogs.length + 1, totalColumnas - encabezadoLogs.length);
    }
  }

  // ðŸ§¹ Limpiar EncuestaOrdenes
  const ultimaFilaEncuesta = sheetEncuesta.getLastRow();
  if (ultimaFilaEncuesta > 1) {
    sheetEncuesta.getRange(2, 1, ultimaFilaEncuesta - 1, 3).clearContent();
  }

  // âœ… Registrar solo Ã³rdenes liberadas cada 100
  const totalLiberadas = data2.length;
  const registrosEncuesta = [];

  for (let i = 99; i < totalLiberadas; i += 100) {
    const ordenNum = data2[i][0];
    const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm:ss");
    const consecutivo = i + 1;
    registrosEncuesta.push([consecutivo, ordenNum, timestamp]);
  }

  if (registrosEncuesta.length > 0) {
    sheetEncuesta.getRange(2, 1, registrosEncuesta.length, 3).setValues(registrosEncuesta);
  }

  // ðŸ§¼ Limitar filas y columnas en EncuestaOrdenes
  const totalFilasEncuesta = sheetEncuesta.getMaxRows();
  const totalColumnasEncuesta = sheetEncuesta.getMaxColumns();

  if (totalFilasEncuesta > registrosEncuesta.length + 1) {
    sheetEncuesta.deleteRows(registrosEncuesta.length + 2, totalFilasEncuesta - registrosEncuesta.length - 1);
  }

  if (totalColumnasEncuesta > 3) {
    sheetEncuesta.deleteColumns(4, totalColumnasEncuesta - 3);
  }

  // ðŸ”š Cierre de conexiones
  stmt1.close();
  stmt2.close();
  conn.close();
}
