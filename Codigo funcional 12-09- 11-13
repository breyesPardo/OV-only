// ================== CONFIGURACIÓN Y CONSTANTES ==================
const CONFIG = {
  HOJAS: {
    ordenes: { n: "OrdenesRetenidas", h: ["Zona", "Cliente", "Órden", "Fecha", "Observación", "Estado", "Motivo Retención"] },
    logs: { n: "LogsLiberaciones", h: ["OrderNum", "Zona", "Cliente", "Fecha Liberación", "Hora Liberación", "UsuarioID", "Nombre Usuario", "Observaciones", "Estado"] },
    control: { n: "ControlEnvios", h: ["Número de Orden", "Estado Actual", "Fecha Último Envío", "Hora Último Envío", "Tipo de Notificación", "¿Retenida Notificada Hoy?", "¿Liberación Notificada Hoy?", "Cliente", "Zona"] },
    contactos: { n: "ContactosZonas", h: ["Zona", "Nombre Representante", "WhatsApp", "Email", "Activo", "Número Copia Pruebas"] }
  },
  CONTACTOS: [
    ["Zona1Cundinamarca-Boyacá-Santa", "Juan Camilo Gil Orjuela", "3182260739", "", "SI", ""],
    ["Zona2-Cundinamarca", "Sergio Andres Rojas Sanchez", "3182260739", "", "SI", ""],
    ["Zona3-Boyacá", "Yury Fonseca Patarroyo", "3182260739", "", "SI", ""],
    ["Zona4-Santander-Cesar", "Oscar Fernando Chingate Cruz", "3182260739", "", "SI", ""],
    ["Zona5-Norte de Santander", "Freddy Andres Bastianelli Fontana", "3182260739", "", "SI", ""],
    ["Zona6-Suroeste Antioqueño", "Carlos Andres Arboleda Tabares", "3182260739", "", "SI", ""],
    ["Zona7-Oriente y Nte Antioquía", "Rafael Leonardo Peña Sarmiento", "3182260739", "", "SI", ""],
    ["Zona8-Meta", "Ximena Nathalia Nuñez Cruz", "3182260739", "", "SI", ""],
    ["Zona9-Casanaré", "Angel Alonso Vasquez Morales", "3182260739", "", "SI", ""],
    ["Zona10-Tolima Centro - Norte", "Assad Fraija Lopera", "3182260739", "", "SI", ""],
    ["Zona11-Tolima Sur y Oriente", "Edna Liliana Portillo", "3182260739", "", "SI", ""],
    ["Zona12-Huila Norte", "Domingo Jose Soto Martinez", "3182260739", "", "SI", ""],
    ["Zona14-HuilaCentroSur-Caquetá", "Ivan Dario Lopez Rubio", "3182260739", "", "SI", ""],
    ["Zona15-Cauca", "Claudia Patricia Ussa", "3182260739", "", "SI", ""],
    ["Zona16-Nariño", "Carlos Alberto Castillo Ñañez", "3182260739", "", "SI", ""],
    ["Zona17-Valle", "Diego Herney Guisa Velasquez", "3182260739", "", "SI", ""],
    ["Zona18-Eje Cafetero", "Juan Pablo Londoño Aristizabal", "3182260739", "", "SI", ""],
    ["Zona 19 Palma", "Juan Pablo Carranza", "3182260739", "", "SI", ""],
    ["Zona 20 Urabá", "Gadelia Gliseth Gomez Gomez", "3182260739", "", "SI", ""],
    ["Zona 21 Caña", "Juan Pablo Carranza", "3182260739", "", "SI", ""],
    ["Zona 23 - Caribe seco", "Sandra Judith Castillo", "3182260739", "", "SI", ""],
    ["Zona 25 Flores", "Javier Leonardo Erazo Velandia", "3182260739", "", "SI", ""],
    ["Ecuador", "Sandra Valverde", "3182260739", "", "SI", ""],
    ["Licitaciones Colinagro", "Sandra Valverde", "3182260739", "", "SI", ""],
    ["Bolivia", "Representante sin asignar", "3182260739", "", "SI", ""],
    ["Gerencia General", "Representante sin asignar", "3182260739", "", "SI", ""],
    ["Republica Dominicana", "Representante sin asignar", "3182260739", "", "SI", ""]
  ]
};

// ================== UTILIDADES ==================
const U = {
  getSheet: (n, h, c=true) => {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let s = ss.getSheetByName(n);
    if (!s && c) {
      s = ss.insertSheet(n);
      if (h) {
        s.getRange(1, 1, 1, h.length).setValues([h])
         .setFontWeight("bold").setBackground("#4285f4").setFontColor("white");
        s.setFrozenRows(1);
        s.autoResizeColumns(1, h.length);
      }
    }
    return s;
  },
  
  fDate: (f, fmt="dd/MM/yyyy") => {
    if (!f) return "Sin fecha";
    try {
      const d = f instanceof Date ? f : new Date(f);
      return Utilities.formatDate(d, "America/Bogota", fmt);
    } catch (e) { return String(f); }
  },
  
  getHoraColombia: () => new Date(new Date().toLocaleString("en-US", {timeZone: "America/Bogota"})),
  
  procesarFecha: f => {
    if (!f) return "";
    f = String(f);
    if (/^\d{2}\/\d{2}\/\d{4}$/.test(f)) return f;
    if (f.includes('T') || f.includes('-')) {
      try {
        const p = f.split('T')[0].split('-');
        if (p.length === 3) return `${p[2].padStart(2,'0')}/${p[1].padStart(2,'0')}/${p[0]}`;
      } catch (e) {}
    }
    return f;
  },
  
  nombreCorto: n => {
    if (!n) return "Representante";
    const p = n.trim().split(/\s+/);
    if (p.length <= 2) return p.join(' ');
    const pre = ['de','del','la','las','los','da','do','dos'];
    const nom = p.slice(0,2).filter(x => !pre.includes(x.toLowerCase()));
    return nom.length ? nom.join(' ') : p.slice(0,2).join(' ');
  },
  
  alert: (t, m) => SpreadsheetApp.getUi().alert(t, m, SpreadsheetApp.getUi().ButtonSet.OK),
  
  getCred: () => {
    const sp = PropertiesService.getScriptProperties();
    return {
      DB: { url: sp.getProperty('DB_URL'), user: sp.getProperty('DB_USER'), pass: sp.getProperty('DB_PASS') },
      API: { url: sp.getProperty('API_URL'), token: sp.getProperty('API_TOKEN'), channel: sp.getProperty('API_CHANNEL') }
    };
  }
};

// ================== SEGURIDAD ==================
function configurarCredencialesSeguras() {
  const ui = SpreadsheetApp.getUi();
  const sp = PropertiesService.getScriptProperties();
  
  const creds = [
    { key: 'DB_URL', prompt: 'URL de conexión a la base de datos:', desc: 'jdbc:sqlserver://[servidor]' },
    { key: 'DB_USER', prompt: 'Usuario de la base de datos:', desc: 'Usuario SQL' },
    { key: 'DB_PASS', prompt: 'Contraseña de la base de datos:', desc: 'Contraseña SQL' },
    { key: 'API_URL', prompt: 'URL de la API de WhatsApp:', desc: 'https://api.ejemplo.com/endpoint' },
    { key: 'API_TOKEN', prompt: 'Token de autenticación de la API:', desc: 'Token de acceso' },
    { key: 'API_CHANNEL', prompt: 'ID del canal de WhatsApp:', desc: 'ID del canal' }
  ];
  
  U.alert('Configuración Segura', 
    'A continuación se te pedirán las credenciales del sistema.\n\n' +
    'Estas se guardarán de forma segura y encriptada.\n\n' +
    'Si ya existen credenciales guardadas, puedes dejar en blanco para mantener las actuales.');
  
  creds.forEach(({ key, prompt, desc }) => {
    const actual = sp.getProperty(key);
    const msg = actual ? 
      `${prompt}\n\n${desc}\n\n✅ Ya existe una credencial guardada. Deja en blanco para mantenerla.` :
      `${prompt}\n\n${desc}\n\n⚠️ No hay credencial guardada actualmente.`;
    
    const resp = ui.prompt('Credencial: ' + key, msg, ui.ButtonSet.OK_CANCEL);
    
    if (resp.getSelectedButton() === ui.Button.OK) {
      const valor = resp.getResponseText().trim();
      if (valor) {
        sp.setProperty(key, valor);
        Logger.log(`✅ ${key} actualizada`);
      }
    }
  });
  
  U.alert('✅ Configuración Completada', 
    'Las credenciales han sido guardadas de forma segura.\n\n' +
    'Puedes verificar las credenciales guardadas con:\n' +
    'Menú → Sistema de Órdenes → Seguridad → Ver Credenciales Guardadas');
}

function verPropiedadesGuardadas() {
  const props = PropertiesService.getScriptProperties().getKeys();
  if (!props.length) {
    U.alert('Sin Credenciales', 'No hay credenciales guardadas.\n\nEjecuta primero configurarCredencialesSeguras()');
    return;
  }
  U.alert('Credenciales Seguras', `🔐 Credenciales guardadas:\n\n${props.map(p => `• ${p}`).join('\n')}\n\nNOTA: Los valores están encriptados y seguros.`);
}

function actualizarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const sp = PropertiesService.getScriptProperties();
  const validas = ['DB_URL','DB_USER','DB_PASS','API_URL','API_TOKEN','API_CHANNEL'];
  
  const r = ui.prompt('Actualizar Credencial', 
    `Opciones disponibles:\n${validas.map(v => `• ${v}`).join('\n')}\n\nEscribe el nombre de la credencial:`,
    ui.ButtonSet.OK_CANCEL);
  
  if (r.getSelectedButton() !== ui.Button.OK) return;
  
  const n = r.getResponseText().trim();
  if (!validas.includes(n)) {
    U.alert('❌ Error', 'Nombre de credencial no válido.');
    return;
  }
  
  const v = ui.prompt('Nuevo Valor', `Ingresa el nuevo valor para ${n}:`, ui.ButtonSet.OK_CANCEL);
  if (v.getSelectedButton() === ui.Button.OK) {
    sp.setProperty(n, v.getResponseText());
    U.alert('✅ Éxito', `La credencial "${n}" ha sido actualizada.`);
  }
}

function eliminarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const sp = PropertiesService.getScriptProperties();
  const props = sp.getKeys();
  
  if (!props.length) {
    U.alert('Sin Credenciales', 'No hay credenciales guardadas.');
    return;
  }
  
  const r = ui.prompt('Eliminar Credencial',
    `Credenciales disponibles:\n${props.join('\n')}\n\nEscribe el nombre de la credencial a eliminar:`,
    ui.ButtonSet.OK_CANCEL);
  
  if (r.getSelectedButton() === ui.Button.OK) {
    const c = r.getResponseText().trim();
    if (props.includes(c)) {
      sp.deleteProperty(c);
      U.alert('✅ Éxito', `La credencial "${c}" ha sido eliminada.`);
    } else {
      U.alert('❌ Error', `No se encontró la credencial "${c}".`);
    }
  }
}

// ================== CONFIGURACIÓN ==================
function configuracionInicial() {
  const h = U.getSheet(CONFIG.HOJAS.contactos.n, CONFIG.HOJAS.contactos.h);
  
  // Verificar si la hoja ya tiene datos pero falta la columna de copia
  if (h.getLastRow() > 1) {
    const headers = h.getRange(1, 1, 1, h.getLastColumn()).getValues()[0];
    if (!headers.includes("Número Copia Pruebas")) {
      // Agregar la nueva columna al final
      const lastCol = h.getLastColumn();
      h.getRange(1, lastCol + 1).setValue("Número Copia Pruebas")
        .setFontWeight("bold").setBackground("#4285f4").setFontColor("white");
      
      // Rellenar con valores vacíos para las filas existentes
      if (h.getLastRow() > 1) {
        const numRows = h.getLastRow() - 1;
        const emptyValues = Array(numRows).fill([""]);
        h.getRange(2, lastCol + 1, numRows, 1).setValues(emptyValues);
      }
      
      U.alert('✅ Columna Agregada', 'Se ha agregado la columna "Número Copia Pruebas" a la hoja de contactos.');
    }
  } else {
    // Si no hay datos, crear con la estructura nueva
    h.getRange(2, 1, CONFIG.CONTACTOS.length, CONFIG.HOJAS.contactos.h.length).setValues(CONFIG.CONTACTOS);
    U.alert('✅ Hoja de Contactos Creada', 'Se ha creado la hoja "ContactosZonas" con los datos iniciales.\n\nPuedes configurar el número para recibir copias de prueba en la columna "Número Copia Pruebas".');
  }
}

function cargarContactosZonas() {
  const h = U.getSheet(CONFIG.HOJAS.contactos.n);
  if (!h) throw new Error("No se encontró la hoja ContactosZonas. Ejecuta configuracionInicial() primero.");
  
  SpreadsheetApp.flush();
  const datos = h.getDataRange().getValues();
  const headers = datos[0];
  const copiaIdx = headers.indexOf("Número Copia Pruebas");
  
  const zn = {}, znom = {}, numeroCopia = null;
  
  datos.slice(1).forEach(row => {
    const zona = String(row[0] || "").trim();
    const nombre = String(row[1] || "").trim();
    const whatsapp = String(row[2] || "").trim().replace(/\D/g, '');
    const activo = String(row[4] || "").trim().toUpperCase();
    
    // Verificar número de copia si existe la columna
    if (copiaIdx >= 0 && row[copiaIdx]) {
      const numCopia = String(row[copiaIdx]).trim().replace(/\D/g, '');
      if (numCopia && numCopia.length >= 10) {
        numeroCopia = numCopia;
      }
    }
    
    if (activo === "SI" && zona && whatsapp) {
      zn[zona] = whatsapp;
      znom[zona] = nombre || "Representante sin asignar";
    }
  });
  
  return { zonaANumero: zn, zonaANombre: znom, numeroCopia };
}

// ================== FUNCIÓN DE ENVÍO MEJORADA ==================
function enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  if (!ordenesParaEnviar.length) return;
  
  const cred = U.getCred();
  if (!cred.API.url || !cred.API.token || !cred.API.channel) {
    U.alert('❌ Error de Configuración', 'No se encontraron las credenciales de la API.\n\nPor favor, ejecuta primero la función configurarCredencialesSeguras() desde el editor de scripts.');
    return;
  }
  
  const contactos = cargarContactosZonas();
  const fechaReporte = U.fDate(U.getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
  const actualizacionesControl = [];
  
  // Función auxiliar para enviar un mensaje
  function enviarMensaje(tel, params, esLiberada, orden, tipo, esCopiaPrueba = false) {
    try {
      const payload = {
        chatPlatform: "whatsapp",
        chatChannelNumber: cred.API.channel,
        platformContactId: tel,
        ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv1",
        params,
        clientPayload: `orden_${tipo}_${orden}_${esCopiaPrueba ? 'copia_' : ''}${Date.now()}`
      };
      
      const res = UrlFetchApp.fetch(cred.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": cred.API.token },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      });
      
      const txt = res.getContentText();
      const rd = JSON.parse(txt);
      
      return txt.includes("success") || (rd.id && rd.problems === null);
    } catch (e) {
      Logger.log(`❌ Error enviando ${esCopiaPrueba ? 'copia para ' : ''}${orden}: ${e.message}`);
      return false;
    }
  }
  
  ordenesParaEnviar.slice(0, 200).forEach(({ orden, tipo, datos, esLiberada }) => {
    const nw = contactos.zonaANumero[datos.zona] || "3182260739";
    const rep = contactos.zonaANombre[datos.zona] || "Representante sin asignar";
    const repCorto = U.nombreCorto(rep);
    const tel = "57" + nw;
    
    const mensaje = esLiberada ? '✅ ORDEN LIBERADA' : 
      tipo.includes('Nueva') ? '🆕 NUEVA ORDEN RETENIDA' :
      tipo.includes('volvió') ? '⚠️ ORDEN VOLVIÓ A RETENCIÓN' : '📊 REPORTE DIARIO 7:00 AM';
    
    const params = esLiberada ? {
      "1": orden, "2": U.procesarFecha(datos.fecha) + (datos.hora ? " " + datos.hora : ""),
      "3": datos.cliente, "4": datos.zona, "5": repCorto, "6": datos.observacion, "7": "3103149259"
    } : {
      "1": fechaReporte, "2": repCorto, "3": datos.zona, "4": datos.cliente,
      "5": `${mensaje} 🔹 Orden: ${orden} - ${U.procesarFecha(datos.fecha)}`,
      "6": `📄 ${orden}: ${datos.observacion}`, "7": "3103149259"
    };
    
    // Enviar al representante principal
    const exitoPrincipal = enviarMensaje(tel, params, esLiberada, orden, tipo);
    
    // Si hay número de copia configurado, enviar copia
    if (contactos.numeroCopia) {
      const telCopia = "57" + contactos.numeroCopia;
      const paramsCopia = {...params};
      
      // Agregar indicador de que es una copia
      if (esLiberada) {
        paramsCopia["6"] = `[COPIA PRUEBA] ${params["6"]}`;
      } else {
        paramsCopia["5"] = `[COPIA PRUEBA] ${params["5"]}`;
      }
      
      enviarMensaje(telCopia, paramsCopia, esLiberada, orden, tipo, true);
      Logger.log(`📋 Copia enviada a: ${contactos.numeroCopia}`);
    }
    
    if (exitoPrincipal) {
      const ce = controlData[orden];
      actualizacionesControl.push({
        orden, estado: esLiberada ? 'LIBERADA' : 'RETENIDA',
        fechaEnvio: fechaHoy, horaEnvio: horaActual, tipoNotificacion: tipo,
        enviadoHoyRetenida: !esLiberada ? "SI" : (ce?.enviadoHoyRetenida || "NO"),
        enviadoHoyLiberada: esLiberada ? "SI" : (ce?.enviadoHoyLiberada || "NO"),
        cliente: datos.cliente, zona: datos.zona, fila: ce?.fila
      });
    }
    
    Utilities.sleep(1000);
  });
  
  // Actualizar hoja de control
  actualizacionesControl.forEach(a => {
    const v = [a.orden, a.estado, a.fechaEnvio, a.horaEnvio, a.tipoNotificacion, 
               a.enviadoHoyRetenida, a.enviadoHoyLiberada, a.cliente, a.zona];
    
    if (a.fila) sheets.control.getRange(a.fila, 1, 1, 9).setValues([v]);
    else sheets.control.appendRow(v);
  });
  
  if (sheets.control.getLastRow() > 1) {
    const re = sheets.control.getRange(2, 2, sheets.control.getLastRow() - 1, 1);
    sheets.control.clearConditionalFormatRules();
    
    ['RETENIDA', 'LIBERADA'].forEach((e, i) => {
      const r = SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(e)
        .setBackground(i === 0 ? '#ffcdd2' : '#c8e6c9')
        .setFontColor(i === 0 ? '#c62828' : '#2e7d32')
        .setRanges([re])
        .build();
      sheets.control.setConditionalFormatRules([...sheets.control.getConditionalFormatRules(), r]);
    });
    
    sheets.control.autoResizeColumns(1, 9);
  }
}

// ================== FUNCIÓN PARA CONFIGURAR NÚMERO DE COPIA ==================
function configurarNumeroCopia() {
  const ui = SpreadsheetApp.getUi();
  const hc = U.getSheet(CONFIG.HOJAS.contactos.n);
  
  if (!hc) {
    U.alert('Error', 'No se encontró la hoja de contactos. Ejecuta primero configuracionInicial()');
    return;
  }
  
  // Buscar el número actual de copia
  const datos = hc.getDataRange().getValues();
  const headers = datos[0];
  const copiaIdx = headers.indexOf("Número Copia Pruebas");
  
  let numeroActual = "";
  if (copiaIdx >= 0) {
    for (let i = 1; i < datos.length; i++) {
      if (datos[i][copiaIdx]) {
        numeroActual = String(datos[i][copiaIdx]).trim();
        break;
      }
    }
  }
  
  const mensaje = numeroActual ? 
    `Número de copia actual: ${numeroActual}\n\nIngresa el nuevo número (o deja en blanco para eliminar):` :
    'No hay número de copia configurado.\n\nIngresa el número de WhatsApp para recibir copias de todos los reportes:';
  
  const resp = ui.prompt('📱 Configurar Número de Copia', mensaje, ui.ButtonSet.OK_CANCEL);
  
  if (resp.getSelectedButton() !== ui.Button.OK) return;
  
  const nuevoNumero = resp.getResponseText().trim().replace(/\D/g, '');
  
  // Actualizar todas las filas con el nuevo número
  if (copiaIdx >= 0) {
    for (let i = 2; i <= hc.getLastRow(); i++) {
      hc.getRange(i, copiaIdx + 1).setValue(nuevoNumero);
    }
    
    if (nuevoNumero) {
      U.alert('✅ Número Configurado', 
        `Se ha configurado el número ${nuevoNumero} para recibir copias de todos los reportes.\n\n` +
        'A partir de ahora, todas las notificaciones también se enviarán a este número marcadas como [COPIA PRUEBA].');
    } else {
      U.alert('✅ Número Eliminado', 'Se ha eliminado el número de copia. Ya no se enviarán copias de los reportes.');
    }
  }
}

// ================== VERIFICAR NÚMERO DE COPIA ==================
function verificarNumeroCopia() {
  const contactos = cargarContactosZonas();
  
  if (contactos.numeroCopia) {
    U.alert('📱 Número de Copia Configurado', 
      `✅ Número de copia activo: ${contactos.numeroCopia}\n\n` +
      'Todas las notificaciones se envían también a este número marcadas como [COPIA PRUEBA].\n\n' +
      'Para cambiar o eliminar este número, usa:\n' +
      'Menú → Sistema de Órdenes → Contactos → Configurar Número de Copia');
  } else {
    U.alert('📱 Sin Número de Copia', 
      '❌ No hay número de copia configurado.\n\n' +
      'Las notificaciones solo se envían a los representantes de cada zona.\n\n' +
      'Para configurar un número de copia, usa:\n' +
      'Menú → Sistema de Órdenes → Contactos → Configurar Número de Copia');
  }
}

// ================== TRIGGERS ==================
function configurarTriggers(tipo = 'completo') {
  configuracionInicial();
  ScriptApp.getProjectTriggers().forEach(t => ScriptApp.deleteTrigger(t));
  
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(7).everyDays(1).create();
  
  if (tipo === 'completo' || tipo === '24h') {
    ScriptApp.newTrigger('verificarCambios').timeBased().everyMinutes(5).create();
  } else {
    ScriptApp.newTrigger('verificarCambiosHorarioLaboral').timeBased().everyMinutes(5).create();
  }
  
  const msg = tipo === 'completo' || tipo === '24h' ? 
    'verificación de cambios funcionan las 24 horas' : 
    'verificaciones solo funcionan en horario laboral';
  
  U.alert('✅ Sistema Configurado', 
    `El sistema enviará automáticamente:\n\n• 7:00 AM: Todas las órdenes retenidas (reporte diario)\n• Cada 5 minutos: Verificación de cambios\n\nNOTA: Las ${msg}`);
}

const configurarTriggersDiarios = () => configurarTriggers('24h');
const configurarTriggersHorarioLaboral = () => configurarTriggers('laboral');

function reporteDiario() { actualizarYEnviarOrdenesCredito(true); }
function verificarCambios() { actualizarYEnviarOrdenesCredito(false); }

function verificarCambiosHorarioLaboral() {
  const h = U.getHoraColombia().getHours();
  if (h >= 8 && h < 18) verificarCambios();
  else Logger.log(`Verificación omitida - fuera de horario laboral (${h}:00 hora Colombia)`);
}

function configurarTriggerCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  const rh = ui.prompt('⏰ Hora del Reporte Diario', 
    'Ingresa la hora para el reporte diario (0-23):\n\nEjemplos: 7 = 7:00 AM, 13 = 1:00 PM',
    ui.ButtonSet.OK_CANCEL);
  
  if (rh.getSelectedButton() !== ui.Button.OK) return;
  
  const hora = parseInt(rh.getResponseText().trim());
  if (isNaN(hora) || hora < 0 || hora > 23) {
    U.alert('❌ Error', 'Hora inválida para el reporte diario');
    return;
  }
  
  const tv = ui.alert('🔄 Tipo de Verificación de Cambios',
    '¿Cómo deseas configurar la verificación de cambios?\n\nYES = Cada 5 minutos (24 horas)\nNO = Cada 5 minutos (solo horario laboral 8AM-6PM)',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (tv === ui.Button.CANCEL) return;
  
  configuracionInicial();
  ScriptApp.getProjectTriggers().forEach(t => ScriptApp.deleteTrigger(t));
  
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(hora).everyDays(1).create();
  
  const fn = tv === ui.Button.YES ? 'verificarCambios' : 'verificarCambiosHorarioLaboral';
  ScriptApp.newTrigger(fn).timeBased().everyMinutes(5).create();
  
  const hf = hora === 0 ? '12:00 AM' : hora < 12 ? `${hora}:00 AM` : hora === 12 ? '12:00 PM' : `${hora - 12}:00 PM`;
  const tc = tv === ui.Button.YES ? '24 horas' : 'horario laboral (8AM-6PM)';
  
  U.alert('✅ Sistema Completamente Configurado', 
    `Configuración aplicada:\n\n📊 Reporte diario: ${hf}\n🔄 Verificación de cambios: Cada 5 minutos (${tc})\n\nEl sistema está listo para enviar notificaciones automáticas.`);
}

function verTriggersActivos() {
  const t = ScriptApp.getProjectTriggers();
  if (!t.length) {
    U.alert('📅 Triggers Activos', 'No hay triggers configurados actualmente.');
    return;
  }
  
  const msgs = {
    'reporteDiario': '⏰ Reporte diario',
    'verificarCambios': '🔄 Verificación cada 5 minutos (24/7)',
    'verificarCambiosHorarioLaboral': '🔄 Verificación cada 5 minutos (horario laboral)'
  };
  
  const msg = t.map((tr, i) => `${i + 1}. ${tr.getHandlerFunction()}\n   ${msgs[tr.getHandlerFunction()] || ''}`).join('\n\n');
  U.alert('📅 Triggers Activos', `Total de triggers activos: ${t.length}\n\n${msg}`);
}

function detenerTriggers() {
  const t = ScriptApp.getProjectTriggers();
  t.forEach(tr => ScriptApp.deleteTrigger(tr));
  U.alert('🛑 Triggers Detenidos', `Se han eliminado ${t.length} triggers.\n\nEl sistema NO enviará notificaciones automáticas hasta que vuelvas a configurar los triggers.`);
}

// ================== FUNCIÓN PRINCIPAL ==================
function actualizarYEnviarOrdenesCredito(esReporteDiario = true) {
  const cred = U.getCred();
  
  if (!cred.DB.url || !cred.DB.user || !cred.DB.pass) {
    U.alert('❌ Error de Configuración', 'No se encontraron las credenciales de la base de datos.\n\nPor favor, ejecuta primero la función configurarCredencialesSeguras() desde el editor de scripts.');
    return;
  }
  
  const sheets = {};
  Object.entries(CONFIG.HOJAS).forEach(([k, c]) => {
    if (k !== 'contactos') sheets[k] = U.getSheet(c.n, c.h);
  });
  
  sheets.ordenes.clear();
  sheets.ordenes.getRange(1, 1, 1, CONFIG.HOJAS.ordenes.h.length).setValues([CONFIG.HOJAS.ordenes.h]);
  
  const controlData = {};
  const hoy = U.getHoraColombia();
  const fechaHoy = U.fDate(hoy);
  
  if (sheets.control.getLastRow() > 1) {
    sheets.control.getDataRange().getValues().slice(1).forEach((r, i) => {
      const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = r;
      controlData[orden] = { 
        estado, fechaEnvio, horaEnvio, tipoNotificacion,
        enviadoHoyRetenida: fechaEnvio === fechaHoy ? enviadoHoyRetenida : "NO",
        enviadoHoyLiberada: fechaEnvio === fechaHoy ? enviadoHoyLiberada : "NO",
        cliente, zona, fila: i + 2 
      };
    });
  }
  
  const conn = Jdbc.getConnection(cred.DB.url, cred.DB.user, cred.DB.pass);
  const ordenesRetenidasActuales = new Map();
  const ordenesLiberadasActuales = new Map();
  
  try {
    // Query Retenidas
    const stmt1 = conn.createStatement();
    const res1 = stmt1.executeQuery(`
      SELECT d.OrderHed_OrderNum, CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha,
             d.Zona, d.Customer_Name, d.ObservacionesRetencionCredito
      FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
      WHERE d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0 
        AND d.Zona != 'Comercial Agrosoil'
        AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
      ORDER BY d.OrderHed_OrderNum DESC`);
    
    const filasOrdenes = [];
    const ordenesVistas = new Set();
    
    while (res1.next()) {
      const orden = res1.getString("OrderHed_OrderNum");
      if (ordenesVistas.has(orden)) continue;
      ordenesVistas.add(orden);
      
      const datos = {
        zona: res1.getString("Zona"),
        cliente: res1.getString("Customer_Name"),
        fecha: U.procesarFecha(res1.getString("Fecha")),
        observacion: (res1.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
      };
      
      filasOrdenes.push([datos.zona, datos.cliente, orden, datos.fecha, `${orden}: ${datos.observacion}`, "RETENIDA", "CRÉDITO"]);
      ordenesRetenidasActuales.set(orden, datos);
    }
    stmt1.close();
    
    if (filasOrdenes.length) sheets.ordenes.getRange(2, 1, filasOrdenes.length, CONFIG.HOJAS.ordenes.h.length).setValues(filasOrdenes);
    
    // Query Liberadas
    const stmt2 = conn.createStatement();
    const res2 = stmt2.executeQuery(`
      SELECT d.OrderHed_OrderNum, d.Zona, d.Customer_Name,
             CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha,
             CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS HoraLiberacionCredito,
             oh.CreditOverrideUserID, u.Name, d.ObservacionesRetencionCredito,
             CONVERT(VARCHAR(19), d.FechaLiberacionCredito, 120) AS FechaHoraCompleta
      FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
      JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
        ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
      LEFT JOIN EpicorTrain10.dbo.UserFile u WITH (NOLOCK) 
        ON oh.CreditOverrideUserID = u.DcdUserID
      WHERE d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 
        AND d.Zona != 'Comercial Agrosoil' AND oh.CreditOverride = 1 
        AND d.FechaLiberacionCredito IS NOT NULL
        AND d.FechaLiberacionCredito >= DATEADD(day, -1, GETDATE())
      ORDER BY d.FechaLiberacionCredito DESC, d.HoraLiberacionCredito DESC`);
    
    const dataLiberadas = [];
    
    while (res2.next()) {
      const ordenNum = res2.getString("OrderHed_OrderNum");
      const dl = {
        zona: res2.getString("Zona"),
        cliente: res2.getString("Customer_Name"),
        fecha: U.procesarFecha(res2.getString("Fecha") || ""),
        hora: res2.getString("HoraLiberacionCredito") || "",
        fechaHoraCompleta: res2.getString("FechaHoraCompleta") || "",
        observacion: (res2.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
      };
      
      dataLiberadas.push([ordenNum, dl.zona, dl.cliente, dl.fecha, dl.hora,
        res2.getString("CreditOverrideUserID") || "", res2.getString("Name") || "", dl.observacion, "LIBERADA"]);
      
      ordenesLiberadasActuales.set(ordenNum, dl);
    }
    stmt2.close();
    
    if (dataLiberadas.length) {
      const mt = U.fDate(U.getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
      const dcs = [...dataLiberadas, ["", "", "", "", "", "", "", "", `← Nuevas liberaciones: ${mt}`]];
      sheets.logs.insertRowsAfter(1, dcs.length);
      sheets.logs.getRange(2, 1, dcs.length, CONFIG.HOJAS.logs.h.length).setValues(dcs);
    }
    
  } finally {
    conn.close();
  }
  
  const ordenesParaEnviar = [];
  const horaActual = U.fDate(hoy, "HH:mm:ss");
  
  // Determinar órdenes retenidas para enviar
  ordenesRetenidasActuales.forEach((datos, orden) => {
    const c = controlData[orden];
    let enviar = false;
    let tipo = '';
    
    if (!c) {
      enviar = true;
      tipo = 'Nueva orden retenida';
    } else if (c.estado === 'LIBERADA' && c.enviadoHoyRetenida === "NO") {
      enviar = true;
      tipo = 'Orden volvió a retención';
    } else if (esReporteDiario && c.enviadoHoyRetenida === "NO") {
      enviar = true;
      tipo = 'Reporte diario 7:00 AM';
    }
    
    if (enviar) ordenesParaEnviar.push({ orden, tipo, datos, esLiberada: false });
  });
  
  // Determinar órdenes liberadas para enviar
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    const c = controlData[orden];
    if ((c && c.estado === 'RETENIDA' && c.enviadoHoyLiberada === "NO") || !c) {
      ordenesParaEnviar.push({
        orden,
        tipo: 'Orden liberada',
        datos: datosLiberacion,
        esLiberada: true
      });
    }
  });
  
  // Actualizar control data para liberadas nuevas
  ordenesLiberadasActuales.forEach((dl, orden) => {
    if (!controlData[orden]) {
      controlData[orden] = {
        estado: 'LIBERADA', fechaEnvio: fechaHoy, horaEnvio: horaActual,
        tipoNotificacion: 'Orden liberada', enviadoHoyRetenida: "NO",
        enviadoHoyLiberada: "NO", cliente: dl.cliente, zona: dl.zona, fila: null
      };
    }
  });
  
  enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual);
  Logger.log(`✅ Proceso completo - ${esReporteDiario ? 'REPORTE DIARIO' : 'VERIFICACIÓN'} - Enviadas: ${ordenesParaEnviar.length}`);
}

// ================== ESTADÍSTICAS Y PRUEBAS ==================
function verEstadisticas() {
  const hc = U.getSheet(CONFIG.HOJAS.control.n, null, false);
  if (!hc || hc.getLastRow() <= 1) {
    U.alert('📊 Estadísticas', 'No hay datos disponibles');
    return;
  }
  
  const datos = hc.getDataRange().getValues().slice(1);
  const hoy = U.fDate(U.getHoraColombia());
  const pruebas = ['PRUEBA','TEST','TESTING','DEMO'];
  
  const s = datos.reduce((a, r) => {
    const [orden, estado, fechaEnvio,, tipoMensaje, enviadaRetenida, enviadaLiberada] = r;
    const esPrueba = pruebas.some(p => String(orden).toUpperCase().includes(p) || String(tipoMensaje).toUpperCase().includes(p));
    
    if (esPrueba) a.pruebasTotal++;
    else {
      a.total++;
      if (estado === 'RETENIDA') a.retenidas++;
      if (estado === 'LIBERADA') a.liberadas++;
      if (fechaEnvio === hoy && enviadaRetenida === "SI") a.enviadasHoyRetenida++;
      if (fechaEnvio === hoy && enviadaLiberada === "SI") a.enviadasHoyLiberada++;
    }
    return a;
  }, { total: 0, retenidas: 0, liberadas: 0, enviadasHoyRetenida: 0, enviadasHoyLiberada: 0, pruebasTotal: 0 });
  
  const ho = U.getSheet(CONFIG.HOJAS.ordenes.n, null, false);
  const hl = U.getSheet(CONFIG.HOJAS.logs.n, null, false);
  
  const ora = ho ? ho.getLastRow() - 1 : 0;
  const olh = hl ? new Set(hl.getDataRange().getValues().slice(1)
    .filter(r => r[0] && !String(r[0]).includes('←'))
    .map(r => r[0])).size : 0;
  
  // Verificar número de copia
  const contactos = cargarContactosZonas();
  const infoCopia = contactos.numeroCopia ? 
    `\n━━━━ NÚMERO DE COPIA ━━━━\nActivo: ${contactos.numeroCopia}\nTodas las notificaciones se copian a este número` : 
    '\n━━━━ NÚMERO DE COPIA ━━━━\nNo configurado';
  
  U.alert('📊 ESTADÍSTICAS DEL SISTEMA',
    `━━━━ ESTADO ACTUAL ━━━━\nÓrdenes retenidas actualmente: ${ora}\nÓrdenes liberadas (histórico): ${olh}\n\n` +
    `━━━━ NOTIFICACIONES ENVIADAS ━━━━\nTotal notificaciones (sin pruebas): ${s.total}\n├─ Estado Retenida: ${s.retenidas}\n└─ Estado Liberada: ${s.liberadas}\n\n` +
    `━━━━ ACTIVIDAD DE HOY ━━━━\nFecha: ${hoy}\nRetenciones notificadas: ${s.enviadasHoyRetenida}\nLiberaciones notificadas: ${s.enviadasHoyLiberada}\n\n` +
    `━━━━ INFORMACIÓN ADICIONAL ━━━━\nPruebas realizadas: ${s.pruebasTotal}\nTotal registros: ${datos.length}` +
    infoCopia);
}

function ejecutarPrueba(tipo, esLiberada = false) {
  const ui = SpreadsheetApp.getUi();
  
  const r = ui.prompt(`Prueba de ${esLiberada ? 'Liberación' : 'Retención'}`, 'Ingresa el número de orden:', ui.ButtonSet.OK_CANCEL);
  if (r.getSelectedButton() !== ui.Button.OK) return;
  
  const ordenNum = r.getResponseText().trim();
  if (!ordenNum) {
    U.alert('Error', 'Debes ingresar un número de orden');
    return;
  }
  
  let oe = null;
  for (const nh of [CONFIG.HOJAS.ordenes.n, CONFIG.HOJAS.logs.n]) {
    const h = U.getSheet(nh, null, false);
    if (!h) continue;
    
    const d = h.getDataRange().getValues();
    const co = nh === CONFIG.HOJAS.ordenes.n ? 2 : 0;
    
    for (let i = 1; i < d.length; i++) {
      if (String(d[i][co]) === String(ordenNum)) {
        oe = {
          zona: d[i][nh === CONFIG.HOJAS.ordenes.n ? 0 : 1],
          cliente: d[i][nh === CONFIG.HOJAS.ordenes.n ? 1 : 2],
          orden: ordenNum,
          fecha: d[i][3],
          observacion: nh === CONFIG.HOJAS.ordenes.n ? d[i][4].replace(`${ordenNum}: `, '') : d[i][7]
        };
        break;
      }
    }
    if (oe) break;
  }
  
  if (!oe) {
    U.alert('Error', `No se encontró la orden ${ordenNum}`);
    return;
  }
  
  if (ui.alert('Confirmar Prueba',
    `¿Enviar notificación de ${esLiberada ? 'LIBERACIÓN' : 'RETENCIÓN'} para?\n\nOrden: ${oe.orden}\nCliente: ${oe.cliente}\nZona: ${oe.zona}\n\nNOTA: Esto es solo una prueba.`,
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const oenv = [{ orden: oe.orden, tipo: `${esLiberada ? 'Orden liberada' : tipo} (PRUEBA)`, datos: oe, esLiberada }];
  const sh = { control: U.getSheet(CONFIG.HOJAS.control.n, CONFIG.HOJAS.control.h) };
  
  enviarNotificaciones(oenv, sh, {}, U.fDate(U.getHoraColombia()), U.fDate(U.getHoraColombia(), "HH:mm:ss"));
  
  U.alert('✅ Prueba Enviada', `Se envió la notificación para la orden ${ordenNum}.\n\nRevisa WhatsApp del representante de ${oe.zona}.`);
}

function probarNotificacionOrdenRetenida() {
  const ui = SpreadsheetApp.getUi();
  const tn = ui.alert('Tipo de Notificación',
    '¿Qué tipo de notificación quieres enviar?\n\nYES = Nueva Orden Retenida\nNO = Orden que Volvió a Retención',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (tn === ui.Button.CANCEL) return;
  ejecutarPrueba(tn === ui.Button.YES ? 'Nueva orden retenida' : 'Orden volvió a retención', false);
}

const probarLiberacionOrdenExistente = () => ejecutarPrueba('Orden liberada', true);
const probarNotificacionOrdenLiberada = () => ejecutarPrueba('Orden liberada', true);

function probarNotificacionRetenidaPersonalizada() {
  const ui = SpreadsheetApp.getUi();
  const campos = ['Número de orden:', 'Nombre del cliente:', 'Zona (debe existir en ContactosZonas):', 'Motivo de retención:'];
  const v = [];
  
  for (const c of campos) {
    const r = ui.prompt('Datos de Prueba', c, ui.ButtonSet.OK_CANCEL);
    if (r.getSelectedButton() !== ui.Button.OK) return;
    v.push(r.getResponseText().trim());
  }
  
  const [ordenNum, cliente, zona, observacion] = v;
  
  if (ui.alert('Confirmar Prueba Personalizada',
    `¿Enviar notificación de RETENCIÓN con estos datos?\n\nOrden: ${ordenNum}\nCliente: ${cliente}\nZona: ${zona}\nMotivo: ${observacion || "PRUEBA DEL SISTEMA"}\n\nNOTA: Esto es solo una prueba.`,
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const oenv = [{
    orden: ordenNum, tipo: 'Nueva orden retenida (PRUEBA PERSONALIZADA)',
    datos: { zona, cliente, fecha: U.getHoraColombia(), observacion: observacion || "PRUEBA DEL SISTEMA" },
    esLiberada: false
  }];
  
  const sh = { control: U.getSheet(CONFIG.HOJAS.control.n, CONFIG.HOJAS.control.h) };
  enviarNotificaciones(oenv, sh, {}, U.fDate(U.getHoraColombia()), U.fDate(U.getHoraColombia(), "HH:mm:ss"));
  
  U.alert('✅ Prueba Personalizada Enviada', `Se envió la notificación de retención.\n\nRevisa WhatsApp del representante de ${zona}.`);
}

// ================== GESTIÓN DE CONTACTOS ==================
function gestionarContactos() {
  const hc = U.getSheet(CONFIG.HOJAS.contactos.n, null, false);
  
  if (!hc) {
    if (SpreadsheetApp.getUi().alert('Hoja de Contactos no encontrada',
        '¿Deseas crear la hoja de contactos ahora?',
        SpreadsheetApp.getUi().ButtonSet.YES_NO) === SpreadsheetApp.getUi().Button.YES) {
      configuracionInicial();
    }
    return;
  }
  
  const d = hc.getDataRange().getValues().slice(1);
  const s = d.reduce((a, r) => {
    a[r[4] === "SI" ? 'activos' : 'inactivos']++;
    return a;
  }, { activos: 0, inactivos: 0 });
  
  const zsc = d.filter(r => r[4] !== "SI" || !r[2]).map(r => r[0]);
  
  // Verificar número de copia
  const contactos = cargarContactosZonas();
  const infoCopia = contactos.numeroCopia ? 
    `📱 NÚMERO DE COPIA: ${contactos.numeroCopia}\n\n` : '';
  
  let msg = infoCopia + `Total de zonas: ${d.length}\nContactos activos: ${s.activos}\nContactos inactivos: ${s.inactivos}\n\n`;
  
  if (zsc.length) {
    msg += `⚠️ ZONAS SIN CONTACTO ACTIVO:\n${zsc.slice(0, 10).join('\n')}`;
    if (zsc.length > 10) msg += `\n... y ${zsc.length - 10} más`;
    msg += '\n\n';
  }
  
  msg += 'Para editar contactos, ve a la hoja "ContactosZonas"';
  U.alert('📱 Gestión de Contactos', msg);
}

function verificarContactosZona() {
  const ui = SpreadsheetApp.getUi();
  const r = ui.prompt('Verificar Contacto de Zona', 'Ingresa el nombre de la zona a verificar:', ui.ButtonSet.OK_CANCEL);
  
  if (r.getSelectedButton() !== ui.Button.OK) return;
  
  const zb = r.getResponseText().trim();
  if (!zb) {
    U.alert('Error', 'Debes ingresar un nombre de zona');
    return;
  }
  
  const hc = U.getSheet(CONFIG.HOJAS.contactos.n);
  const d = hc.getDataRange().getValues();
  
  let dz = null;
  for (let i = 1; i < d.length; i++) {
    if (String(d[i][0]).toLowerCase().includes(zb.toLowerCase())) {
      dz = { zona: d[i][0], nombre: d[i][1], whatsapp: d[i][2], email: d[i][3], activo: d[i][4] };
      break;
    }
  }
  
  if (!dz) {
    U.alert('Zona No Encontrada', `No se encontró ninguna zona que contenga "${zb}"`);
    return;
  }
  
  U.alert('Información de Contacto',
    `📍 INFORMACIÓN DE LA ZONA\n\nZona: ${dz.zona}\nRepresentante: ${dz.nombre}\nWhatsApp: ${dz.whatsapp || 'NO CONFIGURADO'}\n` +
    `Email: ${dz.email || 'No configurado'}\nEstado: ${dz.activo}\n\n` +
    `${dz.activo === 'SI' && dz.whatsapp ? '✅ Esta zona ESTÁ recibiendo notificaciones' : '❌ Esta zona NO está recibiendo notificaciones'}`);
}

// ================== MENÚ ==================
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  ui.createMenu('🔧 Sistema de Órdenes')
    .addSubMenu(ui.createMenu('🔐 Seguridad')
      .addItem('⚙️ Configurar Credenciales', 'configurarCredencialesSeguras')
      .addItem('👁️ Ver Credenciales Guardadas', 'verPropiedadesGuardadas')
      .addItem('✏️ Actualizar Credencial', 'actualizarCredencial')
      .addItem('🗑️ Eliminar Credencial', 'eliminarCredencial'))
    .addSeparator()
    .addSubMenu(ui.createMenu('⚙️ Configurar Triggers')
      .addItem('🚀 Configuración Completa Personalizada', 'configurarTriggerCompleto')
      .addSeparator()
      .addItem('🕐 Solo Verificación: Cada 5 min (24 horas)', 'configurarTriggersDiarios')
      .addItem('🏢 Solo Verificación: Cada 5 min (horario laboral)', 'configurarTriggersHorarioLaboral')
      .addSeparator()
      .addItem('📅 Ver Triggers Activos', 'verTriggersActivos')
      .addItem('🛑 Detener todos los triggers', 'detenerTriggers'))
    .addItem('📊 Ver Estadísticas', 'verEstadisticas')
    .addSubMenu(ui.createMenu('📱 Contactos')
      .addItem('📋 Ver Resumen de Contactos', 'gestionarContactos')
      .addItem('🔍 Verificar Contacto de Zona', 'verificarContactosZona')
      .addSeparator()
      .addItem('📲 Configurar Número de Copia', 'configurarNumeroCopia')
      .addItem('👁️ Verificar Número de Copia', 'verificarNumeroCopia'))
    .addSeparator()
    .addSubMenu(ui.createMenu('🧪 Pruebas de Notificaciones')
      .addItem('📋 Probar Retención (Orden Existente)', 'probarNotificacionOrdenRetenida')
      .addItem('✏️ Probar Retención (Datos Personalizados)', 'probarNotificacionRetenidaPersonalizada')
      .addSeparator()
      .addItem('✅ Probar Liberación (Solo Retenidas)', 'probarLiberacionOrdenExistente')
      .addItem('🔔 Probar Liberación (Cualquier Orden)', 'probarNotificacionOrdenLiberada'))
    .addSeparator()
    .addItem('🔄 Ejecutar Reporte Diario Ahora', 'reporteDiario')
    .addItem('🔍 Verificar Cambios Ahora', 'verificarCambios')
    .addToUi();
}
