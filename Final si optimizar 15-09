// ================== CONFIGURACI√ìN INICIAL DE SEGURIDAD ==================
// IMPORTANTE: Ejecuta configurarCredencialesSeguras() UNA SOLA VEZ, luego puedes eliminar esta funci√≥n

function getCredenciales() {
  Logger.log('===== INICIO getCredenciales() =====');
  const scriptProperties = PropertiesService.getScriptProperties();
  
  const credenciales = {
    DB: {
      url: scriptProperties.getProperty('DB_URL'),
      user: scriptProperties.getProperty('DB_USER'),
      pass: scriptProperties.getProperty('DB_PASS')
    },
    API: {
      url: scriptProperties.getProperty('API_URL'),
      token: scriptProperties.getProperty('API_TOKEN'),
      channel: scriptProperties.getProperty('API_CHANNEL')
    }
  };
  
  Logger.log('Credenciales DB encontradas: ' + (credenciales.DB.url ? 'SI' : 'NO'));
  Logger.log('Credenciales API encontradas: ' + (credenciales.API.url ? 'SI' : 'NO'));
  Logger.log('===== FIN getCredenciales() =====');
  
  return credenciales;
}

function verPropiedadesGuardadas() {
  Logger.log('===== INICIO verPropiedadesGuardadas() =====');
  const scriptProperties = PropertiesService.getScriptProperties();
  const propiedades = scriptProperties.getKeys();
  
  Logger.log(`Total de propiedades encontradas: ${propiedades.length}`);
  
  if (propiedades.length === 0) {
    Logger.log('No hay credenciales guardadas - mostrando alerta');
    SpreadsheetApp.getUi().alert('Sin Credenciales', 
      'No hay credenciales guardadas.\n\nEjecuta primero configurarCredencialesSeguras()', 
      SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  let mensaje = 'üîê Credenciales guardadas:\n\n';
  propiedades.forEach(prop => {
    Logger.log(`Propiedad encontrada: ${prop}`);
    mensaje += `‚Ä¢ ${prop}\n`;
  });
  
  mensaje += '\n\nNOTA: Los valores est√°n encriptados y seguros.';
  
  SpreadsheetApp.getUi().alert('Credenciales Seguras', mensaje, SpreadsheetApp.getUi().ButtonSet.OK);
  Logger.log('===== FIN verPropiedadesGuardadas() =====');
}

function actualizarCredencial() {
  Logger.log('===== INICIO actualizarCredencial() =====');
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  
  const credencial = ui.prompt(
    'Actualizar Credencial',
    'Opciones disponibles:\n' +
    '‚Ä¢ DB_URL\n‚Ä¢ DB_USER\n‚Ä¢ DB_PASS\n‚Ä¢ API_URL\n‚Ä¢ API_TOKEN\n‚Ä¢ API_CHANNEL\n\n' +
    'Escribe el nombre de la credencial:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (credencial.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ la actualizaci√≥n');
    return;
  }
  
  const nombre = credencial.getResponseText().trim();
  Logger.log(`Credencial a actualizar: ${nombre}`);
  
  const credencialesValidas = ['DB_URL', 'DB_USER', 'DB_PASS', 'API_URL', 'API_TOKEN', 'API_CHANNEL'];
  
  if (!credencialesValidas.includes(nombre)) {
    Logger.log(`Error: Credencial no v√°lida: ${nombre}`);
    ui.alert('‚ùå Error', 'Nombre de credencial no v√°lido.', ui.ButtonSet.OK);
    return;
  }
  
  const valor = ui.prompt(
    'Nuevo Valor',
    `Ingresa el nuevo valor para ${nombre}:`,
    ui.ButtonSet.OK_CANCEL
  );
  
  if (valor.getSelectedButton() === ui.Button.OK) {
    scriptProperties.setProperty(nombre, valor.getResponseText());
    Logger.log(`Credencial actualizada exitosamente: ${nombre}`);
    ui.alert('‚úÖ √âxito', `La credencial "${nombre}" ha sido actualizada.`, ui.ButtonSet.OK);
  } else {
    Logger.log('Usuario cancel√≥ el ingreso del valor');
  }
  Logger.log('===== FIN actualizarCredencial() =====');
}

function eliminarCredencial() {
  Logger.log('===== INICIO eliminarCredencial() =====');
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  const propiedades = scriptProperties.getKeys();
  
  Logger.log(`Total de propiedades disponibles: ${propiedades.length}`);
  
  if (propiedades.length === 0) {
    Logger.log('No hay credenciales para eliminar');
    ui.alert('Sin Credenciales', 'No hay credenciales guardadas.', ui.ButtonSet.OK);
    return;
  }
  
  const response = ui.prompt(
    'Eliminar Credencial',
    'Credenciales disponibles:\n' + propiedades.join('\n') + '\n\nEscribe el nombre de la credencial a eliminar:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const credencial = response.getResponseText().trim();
    Logger.log(`Intentando eliminar credencial: ${credencial}`);
    
    if (propiedades.includes(credencial)) {
      scriptProperties.deleteProperty(credencial);
      Logger.log(`Credencial eliminada exitosamente: ${credencial}`);
      ui.alert('‚úÖ √âxito', `La credencial "${credencial}" ha sido eliminada.`, ui.ButtonSet.OK);
    } else {
      Logger.log(`Error: No se encontr√≥ la credencial: ${credencial}`);
      ui.alert('‚ùå Error', `No se encontr√≥ la credencial "${credencial}".`, ui.ButtonSet.OK);
    }
  } else {
    Logger.log('Usuario cancel√≥ la eliminaci√≥n');
  }
  Logger.log('===== FIN eliminarCredencial() =====');
}

// ================== CONFIGURACI√ìN Y CONSTANTES ==================

const CONFIG = {
  HOJAS: {
    ordenes: { nombre: "OrdenesRetenidas", headers: ["Zona", "Cliente", "√ìrden", "Fecha", "Observaci√≥n", "Estado", "Motivo Retenci√≥n"] },
    logs: { nombre: "LogsLiberaciones", headers: ["OrderNum", "Zona", "Cliente", "Fecha Liberaci√≥n", "Hora Liberaci√≥n", "UsuarioID", "Nombre Usuario", "Observaciones", "Estado"] },
    control: { nombre: "ControlEnvios", headers: ["N√∫mero de Orden", "Estado Actual", "Fecha √öltimo Env√≠o", "Hora √öltimo Env√≠o", "Tipo de Notificaci√≥n", "¬øRetenida Notificada Hoy?", "¬øLiberaci√≥n Notificada Hoy?", "Cliente", "Zona"] },
    contactos: { nombre: "ContactosZonas", headers: ["Zona", "Nombre Representante", "WhatsApp", "Email", "Activo"] }
  },
  CONTACTOS_INICIALES: [
    ["Zona1Cundinamarca-Boyac√°-Santa", "Juan Camilo Gil Orjuela", "3182260739", "", "SI"],
    ["Zona2-Cundinamarca", "Sergio Andres Rojas Sanchez", "3182260739", "", "SI"],
    ["Zona3-Boyac√°", "Yury Fonseca Patarroyo", "3182260739", "", "SI"],
    ["Zona4-Santander-Cesar", "Oscar Fernando Chingate Cruz", "3182260739", "", "SI"],
    ["Zona5-Norte de Santander", "Freddy Andres Bastianelli Fontana", "3182260739", "", "SI"],
    ["Zona6-Suroeste Antioque√±o", "Carlos Andres Arboleda Tabares", "3182260739", "", "SI"],
    ["Zona7-Oriente y Nte Antioqu√≠a", "Rafael Leonardo Pe√±a Sarmiento", "3182260739", "", "SI"],
    ["Zona8-Meta", "Ximena Nathalia Nu√±ez Cruz", "3182260739", "", "SI"],
    ["Zona9-Casanar√©", "Angel Alonso Vasquez Morales", "3182260739", "", "SI"],
    ["Zona10-Tolima Centro - Norte", "Assad Fraija Lopera", "3182260739", "", "SI"],
    ["Zona11-Tolima Sur y Oriente", "Edna Liliana Portillo", "3182260739", "", "SI"],
    ["Zona12-Huila Norte", "Domingo Jose Soto Martinez", "3182260739", "", "SI"],
    ["Zona14-HuilaCentroSur-Caquet√°", "Ivan Dario Lopez Rubio", "3182260739", "", "SI"],
    ["Zona15-Cauca", "Claudia Patricia Ussa", "3182260739", "", "SI"],
    ["Zona16-Nari√±o", "Carlos Alberto Castillo √ëa√±ez", "3182260739", "", "SI"],
    ["Zona17-Valle", "Diego Herney Guisa Velasquez", "3182260739", "", "SI"],
    ["Zona18-Eje Cafetero", "Juan Pablo Londo√±o Aristizabal", "3182260739", "", "SI"],
    ["Zona 19 Palma", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 20 Urab√°", "Gadelia Gliseth Gomez Gomez", "3182260739", "", "SI"],
    ["Zona 21 Ca√±a", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 23 - Caribe seco", "Sandra Judith Castillo", "3182260739", "", "SI"],
    ["Zona 25 Flores", "Javier Leonardo Erazo Velandia", "3182260739", "", "SI"],
    ["Ecuador", "Sandra Valverde", "3182260739", "", "SI"],
    ["Licitaciones Colinagro", "Sandra Valverde", "3182260739", "", "SI"],
    ["Bolivia", "Representante sin asignar", "3182260739", "", "SI"],
    ["Gerencia General", "Representante sin asignar", "3182260739", "", "SI"],
    ["Republica Dominicana", "Representante sin asignar", "3182260739", "", "SI"]
  ]
};

// ================== FUNCIONES AUXILIARES ==================

function getSheet(nombre, headers, crear = true) {
  Logger.log(`===== INICIO getSheet(${nombre}) =====`);
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let hoja = ss.getSheetByName(nombre);
  
  if (!hoja && crear) {
    Logger.log(`Hoja ${nombre} no existe, cre√°ndola...`);
    hoja = ss.insertSheet(nombre);
    if (headers) {
      Logger.log(`Agregando headers a ${nombre}: ${headers.join(', ')}`);
      hoja.getRange(1, 1, 1, headers.length).setValues([headers])
        .setFontWeight("bold").setBackground("#4285f4").setFontColor("white");
      hoja.setFrozenRows(1);
      hoja.autoResizeColumns(1, headers.length);
    }
  } else if (hoja) {
    Logger.log(`Hoja ${nombre} encontrada exitosamente`);
  } else {
    Logger.log(`Hoja ${nombre} no encontrada y crear=${crear}`);
  }
  
  Logger.log(`===== FIN getSheet(${nombre}) =====`);
  return hoja;
}

function formatDate(fecha, formato = "dd/MM/yyyy") {
  Logger.log(`formatDate: Entrada=${fecha}, Formato=${formato}`);
  if (!fecha) {
    Logger.log('formatDate: Sin fecha, retornando "Sin fecha"');
    return "Sin fecha";
  }
  try {
    const fechaObj = fecha instanceof Date ? fecha : new Date(fecha);
    const resultado = Utilities.formatDate(fechaObj, "America/Bogota", formato);
    Logger.log(`formatDate: Resultado=${resultado}`);
    return resultado;
  } catch (e) {
    Logger.log(`formatDate: Error=${e.message}, retornando string original`);
    return String(fecha);
  }
}

function getHoraColombia() {
  Logger.log('Obteniendo hora de Colombia...');
  const ahora = new Date();
  const horaColombia = new Date(ahora.toLocaleString("en-US", {timeZone: "America/Bogota"}));
  Logger.log(`Hora Colombia: ${horaColombia}`);
  return horaColombia;
}

function procesarFecha(fechaString) {
  Logger.log(`procesarFecha: Entrada=${fechaString}`);
  if (!fechaString) {
    Logger.log('procesarFecha: Sin fecha, retornando vac√≠o');
    return "";
  }
  
  fechaString = String(fechaString);
  
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(fechaString)) {
    Logger.log('procesarFecha: Ya est√° en formato DD/MM/YYYY');
    return fechaString;
  }
  
  if (fechaString.includes('T') || fechaString.includes('-')) {
    try {
      const soloFecha = fechaString.split('T')[0];
      
      if (soloFecha.includes('-')) {
        const partes = soloFecha.split('-');
        if (partes.length === 3) {
          const a√±o = partes[0];
          const mes = partes[1].padStart(2, '0');
          const dia = partes[2].padStart(2, '0');
          const resultado = `${dia}/${mes}/${a√±o}`;
          Logger.log(`procesarFecha: Convertido a ${resultado}`);
          return resultado;
        }
      }
      
      const fecha = new Date(fechaString);
      const dia = String(fecha.getDate()).padStart(2, '0');
      const mes = String(fecha.getMonth() + 1).padStart(2, '0');
      const a√±o = fecha.getFullYear();
      const resultado = `${dia}/${mes}/${a√±o}`;
      Logger.log(`procesarFecha: Convertido usando Date a ${resultado}`);
      return resultado;
    } catch (e) {
      Logger.log(`procesarFecha: Error=${e.message}`);
      return fechaString.split('T')[0];
    }
  }
  
  Logger.log(`procesarFecha: Retornando sin cambios=${fechaString}`);
  return fechaString;
}

function formatearNombreCorto(nombreCompleto) {
  Logger.log(`formatearNombreCorto: Entrada="${nombreCompleto}"`);
  if (!nombreCompleto) {
    Logger.log('formatearNombreCorto: Sin nombre, retornando "Representante"');
    return "Representante";
  }
  
  const partes = nombreCompleto.trim().split(/\s+/);
  Logger.log(`formatearNombreCorto: ${partes.length} partes encontradas`);
  
  if (partes.length === 1) return partes[0];
  if (partes.length === 2) return partes.join(' ');
  
  const preposiciones = ['de', 'del', 'la', 'las', 'los', 'da', 'do', 'dos'];
  
  let nombres = [];
  let i = 0;
  
  while (i < partes.length && i < 2) {
    if (!preposiciones.includes(partes[i].toLowerCase())) {
      nombres.push(partes[i]);
    }
    i++;
  }
  
  if (nombres.length === 0) {
    nombres = partes.slice(0, 2);
  }
  
  const resultado = nombres.join(' ');
  Logger.log(`formatearNombreCorto: Resultado="${resultado}"`);
  return resultado;
}

function showAlert(titulo, mensaje) {
  Logger.log(`showAlert: T√≠tulo="${titulo}"`);
  Logger.log(`showAlert: Mensaje="${mensaje}"`);
  SpreadsheetApp.getUi().alert(titulo, mensaje, SpreadsheetApp.getUi().ButtonSet.OK);
}

// ================== CONFIGURACI√ìN INICIAL ==================

function configuracionInicial() {
  Logger.log('===== INICIO configuracionInicial() =====');
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, CONFIG.HOJAS.contactos.headers);
  
  if (hojaContactos.getLastRow() === 1) {
    Logger.log('Hoja de contactos vac√≠a, agregando datos iniciales...');
    Logger.log(`Agregando ${CONFIG.CONTACTOS_INICIALES.length} contactos iniciales`);
    
    hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, CONFIG.HOJAS.contactos.headers.length)
      .setValues(CONFIG.CONTACTOS_INICIALES);
      
    showAlert('‚úÖ Hoja de Contactos Creada', 
      'Se ha creado la hoja "ContactosZonas" con los datos iniciales.\n\n' +
      'Puedes actualizar los n√∫meros de WhatsApp y nombres directamente en esta hoja.');
  } else {
    Logger.log(`Hoja de contactos ya tiene ${hojaContactos.getLastRow() - 1} registros`);
  }
  Logger.log('===== FIN configuracionInicial() =====');
}

// ================== CARGA DE CONTACTOS ==================

function cargarContactosZonas() {
  Logger.log('===== INICIO cargarContactosZonas() =====');
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  
  if (!hojaContactos) {
    Logger.log('ERROR: No se encontr√≥ la hoja ContactosZonas');
    throw new Error("No se encontr√≥ la hoja ContactosZonas. Ejecuta configuracionInicial() primero.");
  }
  
  SpreadsheetApp.flush();
  
  const datos = hojaContactos.getDataRange().getValues();
  const zonaANumero = {};
  const zonaANombre = {};
  
  Logger.log(`Cargando ${datos.length - 1} contactos desde la hoja ContactosZonas`);
  
  datos.slice(1).forEach((row, index) => {
    const [zona, nombre, whatsapp, email, activo] = row;
    
    const zonaLimpia = String(zona).trim();
    const nombreLimpio = String(nombre).trim();
    const whatsappLimpio = String(whatsapp).trim().replace(/\D/g, '');
    const activoLimpio = String(activo).trim().toUpperCase();
    
    Logger.log(`Procesando fila ${index + 2}: Zona="${zonaLimpia}", Activo="${activoLimpio}"`);
    
    if (zonaLimpia.includes("23")) {
      Logger.log(`Zona 23 encontrada: Nombre="${nombreLimpio}", WhatsApp="${whatsappLimpio}", Activo="${activoLimpio}"`);
    }
    
    if (activoLimpio === "SI" && zonaLimpia && whatsappLimpio) {
      zonaANumero[zonaLimpia] = whatsappLimpio;
      zonaANombre[zonaLimpia] = nombreLimpio || "Representante sin asignar";
      
      Logger.log(`‚úÖ Contacto cargado: ${zonaLimpia} -> ${nombreLimpio} (${whatsappLimpio})`);
    } else if (zonaLimpia) {
      Logger.log(`‚ùå Contacto NO cargado: ${zonaLimpia} - Activo: ${activoLimpio}, WhatsApp: ${whatsappLimpio}`);
    }
  });
  
  Logger.log(`Total de contactos activos cargados: ${Object.keys(zonaANumero).length}`);
  Logger.log('===== FIN cargarContactosZonas() =====');
  
  return { zonaANumero, zonaANombre };
}

// ================== TRIGGERS ==================

function configurarTriggersDiarios() {
  Logger.log('===== INICIO configurarTriggersDiarios() =====');
  configuracionInicial();
  
  Logger.log('Eliminando triggers existentes...');
  ScriptApp.getProjectTriggers().forEach(trigger => {
    Logger.log(`Eliminando trigger: ${trigger.getHandlerFunction()}`);
    ScriptApp.deleteTrigger(trigger);
  });
  
  Logger.log('Creando trigger de reporte diario a las 7:00 AM...');
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(7).everyDays(1).create();
  
  Logger.log('Creando trigger de verificaci√≥n cada 5 minutos...');
  ScriptApp.newTrigger('verificarCambios').timeBased().everyMinutes(5).create();
  
  showAlert('‚úÖ Sistema Configurado', 
    'El sistema enviar√° autom√°ticamente:\n\n' +
    '‚Ä¢ 7:00 AM: Todas las √≥rdenes retenidas (reporte diario)\n' +
    '‚Ä¢ Cada 5 minutos: Verificaci√≥n de cambios (liberaciones y nuevas √≥rdenes)\n\n' +
    'NOTA: Las notificaciones de cambios funcionan las 24 horas');
    
  Logger.log('===== FIN configurarTriggersDiarios() =====');
}

function configurarTriggersHorarioLaboral() {
  Logger.log('===== INICIO configurarTriggersHorarioLaboral() =====');
  configuracionInicial();
  
  Logger.log('Eliminando triggers existentes...');
  ScriptApp.getProjectTriggers().forEach(trigger => {
    Logger.log(`Eliminando trigger: ${trigger.getHandlerFunction()}`);
    ScriptApp.deleteTrigger(trigger);
  });
  
  Logger.log('Creando trigger de reporte diario a las 7:00 AM...');
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(7).everyDays(1).create();
  
  Logger.log('Creando trigger de verificaci√≥n horario laboral cada 5 minutos...');
  ScriptApp.newTrigger('verificarCambiosHorarioLaboral').timeBased().everyMinutes(5).create();
  
  showAlert('‚úÖ Sistema Configurado (Horario Laboral)', 
    'El sistema enviar√° autom√°ticamente:\n\n' +
    '‚Ä¢ 7:00 AM: Todas las √≥rdenes retenidas (reporte diario)\n' +
    '‚Ä¢ Cada 5 minutos (8 AM - 6 PM): Verificaci√≥n de cambios\n\n' +
    'NOTA: Las verificaciones solo funcionan en horario laboral');
    
  Logger.log('===== FIN configurarTriggersHorarioLaboral() =====');
}

function reporteDiario() {
  Logger.log('===== INICIO reporteDiario() =====');
  Logger.log('Ejecutando actualizaci√≥n y env√≠o como REPORTE DIARIO...');
  actualizarYEnviarOrdenesCredito(true);
  Logger.log('===== FIN reporteDiario() =====');
}

function verificarCambios() {
  Logger.log('===== INICIO verificarCambios() =====');
  Logger.log('Ejecutando verificaci√≥n de cambios...');
  actualizarYEnviarOrdenesCredito(false);
  Logger.log('===== FIN verificarCambios() =====');
}

function verificarCambiosHorarioLaboral() {
  Logger.log('===== INICIO verificarCambiosHorarioLaboral() =====');
  const ahora = new Date();
  const horaColombia = new Date(ahora.toLocaleString("en-US", {timeZone: "America/Bogota"}));
  const horaActual = horaColombia.getHours();
  
  Logger.log(`Hora actual en Colombia: ${horaActual}:00`);
  
  if (horaActual >= 8 && horaActual < 18) {
    Logger.log('Dentro de horario laboral, ejecutando verificaci√≥n...');
    verificarCambios();
  } else {
    Logger.log(`Verificaci√≥n omitida - fuera de horario laboral (${horaActual}:00 hora Colombia)`);
  }
  Logger.log('===== FIN verificarCambiosHorarioLaboral() =====');
}

function configurarReporteDiarioPersonalizado() {
  Logger.log('===== INICIO configurarReporteDiarioPersonalizado() =====');
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.prompt(
    '‚è∞ Configurar Hora del Reporte Diario',
    'Ingresa la hora para el reporte diario (0-23):\n\n' +
    'Ejemplos:\n' +
    '‚Ä¢ 7 = 7:00 AM\n' +
    '‚Ä¢ 13 = 1:00 PM\n' +
    '‚Ä¢ 18 = 6:00 PM',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ la configuraci√≥n');
    return;
  }
  
  const hora = parseInt(response.getResponseText().trim());
  Logger.log(`Hora ingresada: ${hora}`);
  
  if (isNaN(hora) || hora < 0 || hora > 23) {
    Logger.log(`ERROR: Hora inv√°lida: ${hora}`);
    showAlert('‚ùå Error', 'Debes ingresar un n√∫mero v√°lido entre 0 y 23');
    return;
  }
  
  Logger.log('Eliminando triggers de reporteDiario existentes...');
  ScriptApp.getProjectTriggers().forEach(trigger => {
    if (trigger.getHandlerFunction() === 'reporteDiario') {
      Logger.log('Eliminando trigger de reporteDiario anterior');
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  Logger.log(`Creando nuevo trigger de reporteDiario para las ${hora}:00`);
  ScriptApp.newTrigger('reporteDiario')
    .timeBased()
    .atHour(hora)
    .everyDays(1)
    .create();
  
  const horaFormateada = hora === 0 ? '12:00 AM' : 
                        hora < 12 ? `${hora}:00 AM` : 
                        hora === 12 ? '12:00 PM' : 
                        `${hora - 12}:00 PM`;
  
  Logger.log(`Trigger configurado exitosamente para ${horaFormateada}`);
  
  showAlert('‚úÖ Reporte Diario Configurado', 
    `El reporte diario se enviar√° todos los d√≠as a las ${horaFormateada}\n\n` +
    'NOTA: Los triggers de verificaci√≥n de cambios no se han modificado.');
    
  Logger.log('===== FIN configurarReporteDiarioPersonalizado() =====');
}

function configurarTriggerCompleto() {
  Logger.log('===== INICIO configurarTriggerCompleto() =====');
  const ui = SpreadsheetApp.getUi();
  
  const responseReporte = ui.prompt(
    '‚è∞ Hora del Reporte Diario',
    'Ingresa la hora para el reporte diario (0-23):\n\n' +
    'Ejemplos: 7 = 7:00 AM, 13 = 1:00 PM',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (responseReporte.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ en hora del reporte');
    return;
  }
  
  const horaReporte = parseInt(responseReporte.getResponseText().trim());
  Logger.log(`Hora del reporte ingresada: ${horaReporte}`);
  
  if (isNaN(horaReporte) || horaReporte < 0 || horaReporte > 23) {
    Logger.log(`ERROR: Hora inv√°lida: ${horaReporte}`);
    showAlert('‚ùå Error', 'Hora inv√°lida para el reporte diario');
    return;
  }
  
  const tipoVerificacion = ui.alert(
    'üîÑ Tipo de Verificaci√≥n de Cambios',
    '¬øC√≥mo deseas configurar la verificaci√≥n de cambios?\n\n' +
    'YES = Cada 5 minutos (24 horas)\n' +
    'NO = Cada 5 minutos (solo horario laboral 8AM-6PM)',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (tipoVerificacion === ui.Button.CANCEL) {
    Logger.log('Usuario cancel√≥ en tipo de verificaci√≥n');
    return;
  }
  
  Logger.log(`Tipo de verificaci√≥n seleccionado: ${tipoVerificacion === ui.Button.YES ? '24 horas' : 'horario laboral'}`);
  
  configuracionInicial();
  
  Logger.log('Eliminando todos los triggers existentes...');
  ScriptApp.getProjectTriggers().forEach(trigger => {
    Logger.log(`Eliminando trigger: ${trigger.getHandlerFunction()}`);
    ScriptApp.deleteTrigger(trigger);
  });
  
  Logger.log(`Creando trigger de reporteDiario para las ${horaReporte}:00`);
  ScriptApp.newTrigger('reporteDiario')
    .timeBased()
    .atHour(horaReporte)
    .everyDays(1)
    .create();
  
  if (tipoVerificacion === ui.Button.YES) {
    Logger.log('Creando trigger de verificarCambios (24 horas)');
    ScriptApp.newTrigger('verificarCambios')
      .timeBased()
      .everyMinutes(5)
      .create();
  } else {
    Logger.log('Creando trigger de verificarCambiosHorarioLaboral');
    ScriptApp.newTrigger('verificarCambiosHorarioLaboral')
      .timeBased()
      .everyMinutes(5)
      .create();
  }
  
  const horaFormateada = horaReporte === 0 ? '12:00 AM' : 
                        horaReporte < 12 ? `${horaReporte}:00 AM` : 
                        horaReporte === 12 ? '12:00 PM' : 
                        `${horaReporte - 12}:00 PM`;
  
  const tipoConfig = tipoVerificacion === ui.Button.YES ? '24 horas' : 'horario laboral (8AM-6PM)';
  
  Logger.log('Configuraci√≥n completa exitosa');
  
  showAlert('‚úÖ Sistema Completamente Configurado', 
    `Configuraci√≥n aplicada:\n\n` +
    `üìä Reporte diario: ${horaFormateada}\n` +
    `üîÑ Verificaci√≥n de cambios: Cada 5 minutos (${tipoConfig})\n\n` +
    'El sistema est√° listo para enviar notificaciones autom√°ticas.');
    
  Logger.log('===== FIN configurarTriggerCompleto() =====');
}

function verTriggersActivos() {
  Logger.log('===== INICIO verTriggersActivos() =====');
  const triggers = ScriptApp.getProjectTriggers();
  
  Logger.log(`Total de triggers encontrados: ${triggers.length}`);
  
  if (triggers.length === 0) {
    showAlert('üìÖ Triggers Activos', 'No hay triggers configurados actualmente.');
    return;
  }
  
  let mensaje = `Total de triggers activos: ${triggers.length}\n\n`;
  
  triggers.forEach((trigger, index) => {
    const funcion = trigger.getHandlerFunction();
    const tipo = trigger.getEventType();
    
    Logger.log(`Trigger ${index + 1}: ${funcion} - Tipo: ${tipo}`);
    
    mensaje += `${index + 1}. ${funcion}\n`;
    
    if (funcion === 'reporteDiario') {
      mensaje += `   ‚è∞ Reporte diario\n`;
    } else if (funcion === 'verificarCambios') {
      mensaje += `   üîÑ Verificaci√≥n cada 5 minutos (24/7)\n`;
    } else if (funcion === 'verificarCambiosHorarioLaboral') {
      mensaje += `   üîÑ Verificaci√≥n cada 5 minutos (horario laboral)\n`;
    }
    
    mensaje += '\n';
  });
  
  showAlert('üìÖ Triggers Activos', mensaje);
  Logger.log('===== FIN verTriggersActivos() =====');
}

function detenerTriggers() {
  Logger.log('===== INICIO detenerTriggers() =====');
  const triggers = ScriptApp.getProjectTriggers();
  
  Logger.log(`Eliminando ${triggers.length} triggers...`);
  
  triggers.forEach(trigger => {
    Logger.log(`Eliminando trigger: ${trigger.getHandlerFunction()}`);
    ScriptApp.deleteTrigger(trigger);
  });
  
  showAlert('üõë Triggers Detenidos', 
    `Se han eliminado ${triggers.length} triggers.\n\n` +
    'El sistema NO enviar√° notificaciones autom√°ticas hasta que vuelvas a configurar los triggers.');
    
  Logger.log('===== FIN detenerTriggers() =====');
}

// ================== FUNCI√ìN PRINCIPAL ==================

function actualizarYEnviarOrdenesCredito(esReporteDiario = true) {
  Logger.log('===== INICIO actualizarYEnviarOrdenesCredito() =====');
  Logger.log(`Tipo de ejecuci√≥n: ${esReporteDiario ? 'REPORTE DIARIO' : 'VERIFICACI√ìN DE CAMBIOS'}`);
  
  // Obtener credenciales de forma segura
  const credenciales = getCredenciales();
  
  // Verificar que las credenciales existan
  if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
    Logger.log('ERROR: Credenciales de base de datos no encontradas');
    SpreadsheetApp.getUi().alert(
      '‚ùå Error de Configuraci√≥n',
      'No se encontraron las credenciales de la base de datos.\n\n' +
      'Por favor, ejecuta primero la funci√≥n configurarCredencialesSeguras() desde el editor de scripts.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = {};
  
  Logger.log('Obteniendo hojas del spreadsheet...');
  Object.entries(CONFIG.HOJAS).forEach(([key, config]) => {
    if (key !== 'contactos') {
      sheets[key] = getSheet(config.nombre, config.headers);
      Logger.log(`Hoja ${key} obtenida: ${sheets[key] ? 'SI' : 'NO'}`);
    }
  });
  
  Logger.log('Limpiando hoja de √≥rdenes retenidas...');
  sheets.ordenes.clear();
  sheets.ordenes.getRange(1, 1, 1, CONFIG.HOJAS.ordenes.headers.length)
    .setValues([CONFIG.HOJAS.ordenes.headers]);
  
  const controlData = {};
  const hoy = getHoraColombia();
  const fechaHoy = formatDate(hoy);
  
  Logger.log(`Fecha de hoy: ${fechaHoy}`);
  
  if (sheets.control.getLastRow() > 1) {
    Logger.log('Cargando datos de control existentes...');
    sheets.control.getDataRange().getValues().slice(1).forEach((row, index) => {
      const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = row;
      controlData[orden] = { 
        estado, fechaEnvio, horaEnvio, tipoNotificacion,
        enviadoHoyRetenida: (fechaEnvio === fechaHoy) ? enviadoHoyRetenida : "NO",
        enviadoHoyLiberada: (fechaEnvio === fechaHoy) ? enviadoHoyLiberada : "NO",
        cliente, zona, fila: index + 2 
      };
    });
    Logger.log(`Cargados ${Object.keys(controlData).length} registros de control`);
  }
  
  // Usar credenciales seguras para la conexi√≥n
  Logger.log('Conectando a la base de datos...');
  const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
  const ordenesRetenidasActuales = new Map();
  const ordenesLiberadasActuales = new Map();
  
  try {
    Logger.log('Ejecutando query de √≥rdenes retenidas...');
    const queryRetenidas = `
      SELECT d.OrderHed_OrderNum, CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha,
             d.Zona, d.Customer_Name, d.ObservacionesRetencionCredito
      FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
      WHERE d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0 
        AND d.Zona != 'Comercial Agrosoil'
        AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
      ORDER BY d.OrderHed_OrderNum DESC`;
    
    const stmt1 = conn.createStatement();
    const results1 = stmt1.executeQuery(queryRetenidas);
    const filasOrdenes = [];
    const ordenesVistas = new Set();
    
    while (results1.next()) {
      const orden = results1.getString("OrderHed_OrderNum");
      if (ordenesVistas.has(orden)) continue;
      ordenesVistas.add(orden);
      
      const datos = {
        zona: results1.getString("Zona"),
        cliente: results1.getString("Customer_Name"),
        fecha: procesarFecha(results1.getString("Fecha")),
        observacion: (results1.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
      };
      
      filasOrdenes.push([
        datos.zona, datos.cliente, orden, datos.fecha,
        `${orden}: ${datos.observacion}`, "RETENIDA", "CR√âDITO"
      ]);
      
      ordenesRetenidasActuales.set(orden, datos);
    }
    stmt1.close();
    
    Logger.log(`Encontradas ${ordenesRetenidasActuales.size} √≥rdenes retenidas`);
    
    if (filasOrdenes.length > 0) {
      Logger.log(`Escribiendo ${filasOrdenes.length} √≥rdenes retenidas en la hoja`);
      sheets.ordenes.getRange(2, 1, filasOrdenes.length, CONFIG.HOJAS.ordenes.headers.length)
        .setValues(filasOrdenes);
    }
    
    Logger.log('Ejecutando query de √≥rdenes liberadas...');
    const queryLiberadas = `
      SELECT d.OrderHed_OrderNum, d.Zona, d.Customer_Name,
             CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha,
             CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS HoraLiberacionCredito,
             oh.CreditOverrideUserID, u.Name, d.ObservacionesRetencionCredito,
             CONVERT(VARCHAR(19), d.FechaLiberacionCredito, 120) AS FechaHoraCompleta
      FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
      JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
        ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
      LEFT JOIN EpicorTrain10.dbo.UserFile u WITH (NOLOCK) 
        ON oh.CreditOverrideUserID = u.DcdUserID
      WHERE d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 
        AND d.Zona != 'Comercial Agrosoil' AND oh.CreditOverride = 1 
        AND d.FechaLiberacionCredito IS NOT NULL
        AND d.FechaLiberacionCredito >= DATEADD(day, -1, GETDATE())
      ORDER BY d.FechaLiberacionCredito DESC, d.HoraLiberacionCredito DESC`;
    
    const stmt2 = conn.createStatement();
    const results2 = stmt2.executeQuery(queryLiberadas);
    const dataLiberadas = [];
    
    while (results2.next()) {
      const ordenNum = results2.getString("OrderHed_OrderNum");
      const fechaLiberacion = results2.getString("Fecha") || "";
      const horaLiberacion = results2.getString("HoraLiberacionCredito") || "";
      const fechaHoraCompleta = results2.getString("FechaHoraCompleta") || "";
      
      const datosLiberacion = {
        zona: results2.getString("Zona"),
        cliente: results2.getString("Customer_Name"),
        fecha: fechaLiberacion,
        hora: horaLiberacion,
        fechaHoraCompleta: fechaHoraCompleta,
        observacion: (results2.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
      };
      
      datosLiberacion.fecha = procesarFecha(datosLiberacion.fecha);
      
      dataLiberadas.push([
        ordenNum,
        datosLiberacion.zona,
        datosLiberacion.cliente,
        datosLiberacion.fecha || "",
        datosLiberacion.hora || "",
        results2.getString("CreditOverrideUserID") || "",
        results2.getString("Name") || "",
        datosLiberacion.observacion,
        "LIBERADA"
      ]);
      
      ordenesLiberadasActuales.set(ordenNum, datosLiberacion);
    }
    stmt2.close();
    
    Logger.log(`Encontradas ${ordenesLiberadasActuales.size} √≥rdenes liberadas recientes`);
    
    if (dataLiberadas.length > 0) {
      Logger.log(`Escribiendo ${dataLiberadas.length} √≥rdenes liberadas en logs`);
      const marcaTiempo = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
      const datosConSeparador = [...dataLiberadas, 
        ["", "", "", "", "", "", "", "", `‚Üê Nuevas liberaciones: ${marcaTiempo}`]];
      sheets.logs.insertRowsAfter(1, datosConSeparador.length);
      sheets.logs.getRange(2, 1, datosConSeparador.length, CONFIG.HOJAS.logs.headers.length)
        .setValues(datosConSeparador);
    }
    
  } finally {
    Logger.log('Cerrando conexi√≥n a base de datos...');
    conn.close();
  }
  
  Logger.log('Procesando √≥rdenes para env√≠o...');
  const ordenesParaEnviar = [];
  const horaActual = formatDate(hoy, "HH:mm:ss");
  
  // Procesar √≥rdenes retenidas
  Logger.log('Evaluando √≥rdenes retenidas para notificaci√≥n...');
  ordenesRetenidasActuales.forEach((datos, orden) => {
    const control = controlData[orden];
    let debeEnviar = false;
    let tipo = '';
    
    if (!control) {
      debeEnviar = true;
      tipo = 'Nueva orden retenida';
      Logger.log(`Orden ${orden}: Nueva orden detectada`);
    } else if (control.estado === 'LIBERADA' && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Orden volvi√≥ a retenci√≥n';
      Logger.log(`Orden ${orden}: Volvi√≥ a retenci√≥n`);
    } else if (esReporteDiario && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Reporte diario 7:00 AM';
      Logger.log(`Orden ${orden}: Incluida en reporte diario`);
    }
    
    if (debeEnviar) {
      ordenesParaEnviar.push({ orden, tipo, datos, esLiberada: false });
    }
  });
  
  // Procesar √≥rdenes liberadas
  Logger.log('Evaluando √≥rdenes liberadas para notificaci√≥n...');
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    const control = controlData[orden];
    let debeEnviar = false;
    
    if (control && control.estado === 'RETENIDA' && control.enviadoHoyLiberada === "NO") {
      debeEnviar = true;
      Logger.log(`Orden ${orden}: Liberada (estaba retenida)`);
    } else if (!control) {
      debeEnviar = true;
      Logger.log(`Orden ${orden}: Liberada (nueva)`);
    }
    
    if (debeEnviar) {
      const datosCompletos = {
        zona: datosLiberacion.zona,
        cliente: datosLiberacion.cliente,
        fecha: datosLiberacion.fecha,
        hora: datosLiberacion.hora || "",
        observacion: datosLiberacion.observacion
      };
      
      ordenesParaEnviar.push({
        orden,
        tipo: 'Orden liberada',
        datos: datosCompletos,
        esLiberada: true
      });
    }
  });
  
  // Actualizar control data para √≥rdenes liberadas nuevas
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    if (!controlData[orden]) {
      Logger.log(`Agregando orden liberada ${orden} a control data`);
      controlData[orden] = {
        estado: 'LIBERADA',
        fechaEnvio: fechaHoy,
        horaEnvio: horaActual,
        tipoNotificacion: 'Orden liberada',
        enviadoHoyRetenida: "NO",
        enviadoHoyLiberada: "NO",
        cliente: datosLiberacion.cliente,
        zona: datosLiberacion.zona,
        fila: null
      };
    }
  });
  
  Logger.log(`Total de √≥rdenes para enviar: ${ordenesParaEnviar.length}`);
  
  // Usar la funci√≥n que incluye copias
  enviarNotificacionesConCopia(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual);
  
  Logger.log(`‚úÖ Proceso completo - ${esReporteDiario ? 'REPORTE DIARIO' : 'VERIFICACI√ìN'} - Enviadas: ${ordenesParaEnviar.length}`);
  Logger.log('===== FIN actualizarYEnviarOrdenesCredito() =====');
}

// ================== FUNCI√ìN DE ENV√çO ==================

function enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  Logger.log('===== INICIO enviarNotificaciones() =====');
  Logger.log(`√ìrdenes a enviar: ${ordenesParaEnviar.length}`);
  
  if (ordenesParaEnviar.length === 0) {
    Logger.log('No hay √≥rdenes para enviar');
    return;
  }
  
  // Obtener credenciales de forma segura
  const credenciales = getCredenciales();
  
  // Verificar credenciales de API
  if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
    Logger.log('ERROR: Credenciales de API no encontradas');
    SpreadsheetApp.getUi().alert(
      '‚ùå Error de Configuraci√≥n',
      'No se encontraron las credenciales de la API.\n\n' +
      'Por favor, ejecuta primero la funci√≥n configurarCredencialesSeguras() desde el editor de scripts.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  Logger.log('Cargando contactos de zonas...');
  const contactos = cargarContactosZonas();
  const fechaReporte = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
  const actualizacionesControl = [];
  
  const ordenesAProcesar = ordenesParaEnviar.slice(0, 200);
  Logger.log(`Procesando ${ordenesAProcesar.length} √≥rdenes (m√°ximo 200)`);
  
  ordenesAProcesar.forEach(({ orden, tipo, datos, esLiberada }) => {
    Logger.log(`\n--- Procesando orden ${orden} ---`);
    const numeroWhatsApp = contactos.zonaANumero[datos.zona];
    const representante = contactos.zonaANombre[datos.zona];
    
    Logger.log(`Zona: ${datos.zona}`);
    Logger.log(`WhatsApp encontrado: ${numeroWhatsApp || 'NO ENCONTRADO'}`);
    Logger.log(`Representante: ${representante || 'NO ENCONTRADO'}`);
    
    if (!numeroWhatsApp) {
      Logger.log(`‚ö†Ô∏è ADVERTENCIA: No se encontr√≥ contacto para zona: ${datos.zona}`);
      Logger.log(`Se usar√° n√∫mero por defecto: 3182260739`);
    }
    
    const numeroFinal = numeroWhatsApp || "3182260739";
    const telefono = "57" + numeroFinal;
    const representanteFinal = representante || "Representante sin asignar";
    const representanteCorto = formatearNombreCorto(representanteFinal);
    
    const mensaje = esLiberada ? '‚úÖ ORDEN LIBERADA' : 
      tipo.includes('Nueva') ? 'üÜï NUEVA ORDEN RETENIDA' :
      tipo.includes('volvi√≥') ? '‚ö†Ô∏è ORDEN VOLVI√ì A RETENCI√ìN' : 
      'üìä REPORTE DIARIO 7:00 AM';
    
    Logger.log(`Tipo de mensaje: ${mensaje}`);
    Logger.log(`Es liberada: ${esLiberada}`);
    
    // No modificar el n√∫mero de orden
    const ordenFormateada = orden.toString();
    
    const params = esLiberada ? {
      "1": `#${ordenFormateada}`, // Agregar # al inicio
      "2": procesarFecha(datos.fecha) + (datos.hora ? " " + datos.hora : ""),
      "3": datos.cliente,
      "4": datos.zona,
      "5": representanteCorto,
      "6": datos.observacion,
      "7": "3103149259"
    } : {
      "1": fechaReporte,
      "2": representanteCorto,
      "3": datos.zona,
      "4": datos.cliente,
      "5": `${mensaje} üîπ Orden #${ordenFormateada} | ${procesarFecha(datos.fecha)}`, // Usar # y | como separador
      "6": `üìÑ Orden #${ordenFormateada}: ${datos.observacion}`, // Agregar "Orden" antes
      "7": "3103149259"
    };
    
    try {
      Logger.log(`Enviando notificaci√≥n ${esLiberada ? 'LIBERACI√ìN' : 'RETENCI√ìN'} para orden ${orden}`);
      Logger.log(`Tel√©fono destino: ${telefono} (${representanteCorto})`);
      Logger.log(`Plantilla: ${esLiberada ? 'reporte_ordenes_liberadasv1' : 'reporte_ordenes_retenidasv_0'}`);
      
      const payload = {
        chatPlatform: "whatsapp",
        chatChannelNumber: credenciales.API.channel,
        platformContactId: telefono,
        ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv_0",
        params,
        clientPayload: `orden_${tipo}_${orden}_${Date.now()}`
      };
      
      Logger.log(`Payload: ${JSON.stringify(payload)}`);
      
      const response = UrlFetchApp.fetch(credenciales.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": credenciales.API.token },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      Logger.log(`Respuesta status: ${response.getResponseCode()}`);
      Logger.log(`Respuesta: ${texto.substring(0, 200)}...`);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        Logger.log(`‚úÖ Notificaci√≥n enviada exitosamente para orden ${orden} a ${telefono}`);
        
        const controlExistente = controlData[orden];
        
        actualizacionesControl.push({
          orden, 
          estado: esLiberada ? 'LIBERADA' : 'RETENIDA',
          fechaEnvio: fechaHoy,
          horaEnvio: horaActual,
          tipoNotificacion: tipo,
          enviadoHoyRetenida: !esLiberada ? "SI" : (controlExistente?.enviadoHoyRetenida || "NO"),
          enviadoHoyLiberada: esLiberada ? "SI" : (controlExistente?.enviadoHoyLiberada || "NO"),
          cliente: datos.cliente,
          zona: datos.zona,
          fila: controlExistente?.fila
        });
      } else {
        Logger.log(`‚ùå Error en respuesta para orden ${orden}: ${texto}`);
      }
    } catch (e) {
      Logger.log(`‚ùå Error enviando ${orden}: ${e.message}`);
      Logger.log(`Stack trace: ${e.stack}`);
    }
    
    Logger.log('Esperando 1 segundo antes de siguiente env√≠o...');
    Utilities.sleep(1000);
  });
  
  Logger.log(`\nActualizando ${actualizacionesControl.length} registros de control...`);
  
  actualizacionesControl.forEach(act => {
    const valores = [
      act.orden, act.estado, act.fechaEnvio, act.horaEnvio, 
      act.tipoNotificacion, act.enviadoHoyRetenida, act.enviadoHoyLiberada,
      act.cliente, act.zona
    ];
    
    if (act.fila) {
      Logger.log(`Actualizando fila ${act.fila} para orden ${act.orden}`);
      sheets.control.getRange(act.fila, 1, 1, 9).setValues([valores]);
    } else {
      Logger.log(`Agregando nueva fila para orden ${act.orden}`);
      sheets.control.appendRow(valores);
    }
  });
  
  if (sheets.control.getLastRow() > 1) {
    Logger.log('Aplicando formato condicional a hoja de control...');
    const rangoEstado = sheets.control.getRange(2, 2, sheets.control.getLastRow() - 1, 1);
    sheets.control.clearConditionalFormatRules();
    
    ['RETENIDA', 'LIBERADA'].forEach((estado, i) => {
      const regla = SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(estado)
        .setBackground(i === 0 ? '#ffcdd2' : '#c8e6c9')
        .setFontColor(i === 0 ? '#c62828' : '#2e7d32')
        .setRanges([rangoEstado])
        .build();
      sheets.control.setConditionalFormatRules([...sheets.control.getConditionalFormatRules(), regla]);
    });
    
    sheets.control.autoResizeColumns(1, 9);
  }
  
  Logger.log('===== FIN enviarNotificaciones() =====');
}

// ================== ESTAD√çSTICAS ==================

function verEstadisticas() {
  Logger.log('===== INICIO verEstadisticas() =====');
  const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
  
  if (!hojaControl || hojaControl.getLastRow() <= 1) {
    Logger.log('No hay datos disponibles para estad√≠sticas');
    showAlert('üìä Estad√≠sticas', 'No hay datos disponibles');
    return;
  }
  
  const datos = hojaControl.getDataRange().getValues().slice(1);
  const hoy = formatDate(getHoraColombia());
  const palabrasPrueba = ['PRUEBA', 'TEST', 'TESTING', 'DEMO'];
  
  Logger.log(`Procesando ${datos.length} registros de control...`);
  
  const stats = datos.reduce((acc, row) => {
    const [orden, estado, fechaEnvio, , tipoMensaje, enviadaRetenida, enviadaLiberada] = row;
    const esPrueba = palabrasPrueba.some(p => 
      String(orden).toUpperCase().includes(p) || 
      String(tipoMensaje).toUpperCase().includes(p)
    );
    
    if (esPrueba) {
      acc.pruebasTotal++;
    } else {
      acc.total++;
      if (estado === 'RETENIDA') acc.retenidas++;
      if (estado === 'LIBERADA') acc.liberadas++;
      if (fechaEnvio === hoy && enviadaRetenida === "SI") acc.enviadasHoyRetenida++;
      if (fechaEnvio === hoy && enviadaLiberada === "SI") acc.enviadasHoyLiberada++;
    }
    return acc;
  }, { total: 0, retenidas: 0, liberadas: 0, enviadasHoyRetenida: 0, enviadasHoyLiberada: 0, pruebasTotal: 0 });
  
  Logger.log(`Estad√≠sticas calculadas: ${JSON.stringify(stats)}`);
  
  const hojaOrdenes = getSheet(CONFIG.HOJAS.ordenes.nombre, null, false);
  const hojaLogs = getSheet(CONFIG.HOJAS.logs.nombre, null, false);
  
  const ordenesRetenidasActuales = hojaOrdenes ? hojaOrdenes.getLastRow() - 1 : 0;
  const ordenesLiberadasHistorico = hojaLogs ? 
    new Set(hojaLogs.getDataRange().getValues().slice(1)
      .filter(row => row[0] && !String(row[0]).includes('‚Üê'))
      .map(row => row[0])).size : 0;
  
  Logger.log(`√ìrdenes retenidas actuales: ${ordenesRetenidasActuales}`);
  Logger.log(`√ìrdenes liberadas hist√≥ricas: ${ordenesLiberadasHistorico}`);
  
  showAlert('üìä ESTAD√çSTICAS DEL SISTEMA',
    `‚îÅ‚îÅ‚îÅ‚îÅ ESTADO ACTUAL ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `√ìrdenes retenidas actualmente: ${ordenesRetenidasActuales}\n` +
    `√ìrdenes liberadas (hist√≥rico): ${ordenesLiberadasHistorico}\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ NOTIFICACIONES ENVIADAS ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `Total notificaciones (sin pruebas): ${stats.total}\n` +
    `‚îú‚îÄ Estado Retenida: ${stats.retenidas}\n` +
    `‚îî‚îÄ Estado Liberada: ${stats.liberadas}\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ ACTIVIDAD DE HOY ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `Fecha: ${hoy}\n` +
    `Retenciones notificadas: ${stats.enviadasHoyRetenida}\n` +
    `Liberaciones notificadas: ${stats.enviadasHoyLiberada}\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ INFORMACI√ìN ADICIONAL ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `Pruebas realizadas: ${stats.pruebasTotal}\n` +
    `Total registros: ${datos.length}`
  );
  
  Logger.log('===== FIN verEstadisticas() =====');
}

// ================== FUNCIONES DE PRUEBA ==================

function ejecutarPrueba(tipo, esLiberada = false) {
  Logger.log(`===== INICIO ejecutarPrueba(${tipo}, ${esLiberada}) =====`);
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  const response = ui.prompt(
    `Prueba de ${esLiberada ? 'Liberaci√≥n' : 'Retenci√≥n'}`,
    'Ingresa el n√∫mero de orden:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ la prueba');
    return;
  }
  
  const ordenNum = response.getResponseText().trim();
  Logger.log(`N√∫mero de orden ingresado: ${ordenNum}`);
  
  if (!ordenNum) {
    Logger.log('ERROR: No se ingres√≥ n√∫mero de orden');
    showAlert('Error', 'Debes ingresar un n√∫mero de orden');
    return;
  }
  
  const hojas = [CONFIG.HOJAS.ordenes.nombre, CONFIG.HOJAS.logs.nombre];
  let ordenEncontrada = null;
  
  Logger.log('Buscando orden en las hojas...');
  
  for (const nombreHoja of hojas) {
    const hoja = getSheet(nombreHoja, null, false);
    if (!hoja) continue;
    
    Logger.log(`Buscando en hoja ${nombreHoja}...`);
    const datos = hoja.getDataRange().getValues();
    const colOrden = nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 2 : 0;
    
    for (let i = 1; i < datos.length; i++) {
      if (String(datos[i][colOrden]) === String(ordenNum)) {
        ordenEncontrada = {
          zona: datos[i][nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 0 : 1],
          cliente: datos[i][nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 1 : 2],
          orden: ordenNum,
          fecha: datos[i][3],
          observacion: nombreHoja === CONFIG.HOJAS.ordenes.nombre ? 
            datos[i][4].replace(`${ordenNum}: `, '') : datos[i][7]
        };
        Logger.log(`Orden encontrada en ${nombreHoja}: ${JSON.stringify(ordenEncontrada)}`);
        break;
      }
    }
    if (ordenEncontrada) break;
  }
  
  if (!ordenEncontrada) {
    Logger.log(`ERROR: No se encontr√≥ la orden ${ordenNum}`);
    showAlert('Error', `No se encontr√≥ la orden ${ordenNum}`);
    return;
  }
  
  const confirmar = ui.alert(
    'Confirmar Prueba',
    `¬øEnviar notificaci√≥n de ${esLiberada ? 'LIBERACI√ìN' : 'RETENCI√ìN'} para?\n\n` +
    `Orden: ${ordenEncontrada.orden}\n` +
    `Cliente: ${ordenEncontrada.cliente}\n` +
    `Zona: ${ordenEncontrada.zona}\n\n` +
    'NOTA: Esto es solo una prueba.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar !== ui.Button.YES) {
    Logger.log('Usuario cancel√≥ la confirmaci√≥n');
    return;
  }
  
  const ordenesParaEnviar = [{
    orden: ordenEncontrada.orden,
    tipo: `${esLiberada ? 'Orden liberada' : tipo} (PRUEBA)`,
    datos: ordenEncontrada,
    esLiberada
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  const fechaHoy = formatDate(getHoraColombia());
  const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
  
  Logger.log('Enviando notificaci√≥n de prueba...');
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
  
  showAlert('‚úÖ Prueba Enviada',
    `Se envi√≥ la notificaci√≥n para la orden ${ordenNum}.\n\n` +
    `Revisa WhatsApp del representante de ${ordenEncontrada.zona}.`
  );
  
  Logger.log('===== FIN ejecutarPrueba() =====');
}

function probarNotificacionOrdenRetenida() {
  Logger.log('===== INICIO probarNotificacionOrdenRetenida() =====');
  const ui = SpreadsheetApp.getUi();
  const tipoNotificacion = ui.alert(
    'Tipo de Notificaci√≥n',
    '¬øQu√© tipo de notificaci√≥n quieres enviar?\n\n' +
    'YES = Nueva Orden Retenida\n' +
    'NO = Orden que Volvi√≥ a Retenci√≥n',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (tipoNotificacion === ui.Button.CANCEL) {
    Logger.log('Usuario cancel√≥ selecci√≥n de tipo');
    return;
  }
  
  const tipo = tipoNotificacion === ui.Button.YES ? 
    'Nueva orden retenida' : 'Orden volvi√≥ a retenci√≥n';
  
  Logger.log(`Tipo seleccionado: ${tipo}`);
  ejecutarPrueba(tipo, false);
  Logger.log('===== FIN probarNotificacionOrdenRetenida() =====');
}

function probarLiberacionOrdenExistente() {
  Logger.log('===== INICIO probarLiberacionOrdenExistente() =====');
  ejecutarPrueba('Orden liberada', true);
  Logger.log('===== FIN probarLiberacionOrdenExistente() =====');
}

function probarNotificacionOrdenLiberada() {
  Logger.log('===== INICIO probarNotificacionOrdenLiberada() =====');
  ejecutarPrueba('Orden liberada', true);
  Logger.log('===== FIN probarNotificacionOrdenLiberada() =====');
}

function probarNotificacionRetenidaPersonalizada() {
  Logger.log('===== INICIO probarNotificacionRetenidaPersonalizada() =====');
  const ui = SpreadsheetApp.getUi();
  const campos = ['N√∫mero de orden:', 'Nombre del cliente:', 'Zona (debe existir en ContactosZonas):', 'Motivo de retenci√≥n:'];
  const valores = [];
  
  for (const campo of campos) {
    const response = ui.prompt('Datos de Prueba', campo, ui.ButtonSet.OK_CANCEL);
    if (response.getSelectedButton() !== ui.Button.OK) {
      Logger.log('Usuario cancel√≥ ingreso de datos');
      return;
    }
    valores.push(response.getResponseText().trim());
  }
  
  const [ordenNum, cliente, zona, observacion] = valores;
  
  Logger.log(`Datos ingresados: Orden=${ordenNum}, Cliente=${cliente}, Zona=${zona}, Observaci√≥n=${observacion}`);
  
  const confirmar = ui.alert(
    'Confirmar Prueba Personalizada',
    `¬øEnviar notificaci√≥n de RETENCI√ìN con estos datos?\n\n` +
    `Orden: ${ordenNum}\n` +
    `Cliente: ${cliente}\n` +
    `Zona: ${zona}\n` +
    `Motivo: ${observacion || "PRUEBA DEL SISTEMA"}\n\n` +
    'NOTA: Esto es solo una prueba.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar !== ui.Button.YES) {
    Logger.log('Usuario cancel√≥ confirmaci√≥n');
    return;
  }
  
  const ordenesParaEnviar = [{
    orden: ordenNum,
    tipo: 'Nueva orden retenida (PRUEBA PERSONALIZADA)',
    datos: {
      zona,
      cliente,
      fecha: getHoraColombia(),
      observacion: observacion || "PRUEBA DEL SISTEMA"
    },
    esLiberada: false
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  const fechaHoy = formatDate(getHoraColombia());
  const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
  
  Logger.log('Enviando notificaci√≥n personalizada...');
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
  
  showAlert('‚úÖ Prueba Personalizada Enviada',
    `Se envi√≥ la notificaci√≥n de retenci√≥n.\n\n` +
    `Revisa WhatsApp del representante de ${zona}.`
  );
  
  Logger.log('===== FIN probarNotificacionRetenidaPersonalizada() =====');
}

// ================== GESTI√ìN DE CONTACTOS ==================

function gestionarContactos() {
  Logger.log('===== INICIO gestionarContactos() =====');
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, null, false);
  
  if (!hojaContactos) {
    Logger.log('Hoja de contactos no encontrada');
    const ui = SpreadsheetApp.getUi();
    if (ui.alert('Hoja de Contactos no encontrada',
        '¬øDeseas crear la hoja de contactos ahora?',
        ui.ButtonSet.YES_NO) === ui.Button.YES) {
      configuracionInicial();
    }
    return;
  }
  
  const datos = hojaContactos.getDataRange().getValues().slice(1);
  Logger.log(`Total de zonas en hoja: ${datos.length}`);
  
  const stats = datos.reduce((acc, row) => {
    acc[row[4] === "SI" ? 'activos' : 'inactivos']++;
    return acc;
  }, { activos: 0, inactivos: 0 });
  
  Logger.log(`Contactos activos: ${stats.activos}, Inactivos: ${stats.inactivos}`);
  
  const zonasSinContacto = datos
    .filter(row => row[4] !== "SI" || !row[2])
    .map(row => row[0]);
  
  Logger.log(`Zonas sin contacto activo: ${zonasSinContacto.length}`);
  
  let mensaje = `Total de zonas: ${datos.length}\n` +
    `Contactos activos: ${stats.activos}\n` +
    `Contactos inactivos: ${stats.inactivos}\n\n`;
  
  if (zonasSinContacto.length > 0) {
    mensaje += `‚ö†Ô∏è ZONAS SIN CONTACTO ACTIVO:\n` +
      zonasSinContacto.slice(0, 10).join('\n') +
      (zonasSinContacto.length > 10 ? `\n... y ${zonasSinContacto.length - 10} m√°s` : '') +
      '\n\n';
  }
  
  mensaje += 'Para editar contactos, ve a la hoja "ContactosZonas"';
  
  showAlert('üì± Gesti√≥n de Contactos', mensaje);
  Logger.log('===== FIN gestionarContactos() =====');
}

function verificarContactosZona() {
  Logger.log('===== INICIO verificarContactosZona() =====');
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(
    'Verificar Contacto de Zona',
    'Ingresa el nombre de la zona a verificar:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ verificaci√≥n');
    return;
  }
  
  const zonaBuscada = response.getResponseText().trim();
  Logger.log(`Buscando zona: ${zonaBuscada}`);
  
  if (!zonaBuscada) {
    Logger.log('ERROR: No se ingres√≥ nombre de zona');
    showAlert('Error', 'Debes ingresar un nombre de zona');
    return;
  }
  
  const contactos = cargarContactosZonas();
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  const datos = hojaContactos.getDataRange().getValues();
  
  let zonaEncontrada = null;
  let datosZona = null;
  
  for (let i = 1; i < datos.length; i++) {
    const zona = String(datos[i][0]);
    if (zona.toLowerCase().includes(zonaBuscada.toLowerCase())) {
      zonaEncontrada = zona;
      datosZona = {
        zona: datos[i][0],
        nombre: datos[i][1],
        whatsapp: datos[i][2],
        email: datos[i][3],
        activo: datos[i][4]
      };
      Logger.log(`Zona encontrada: ${JSON.stringify(datosZona)}`);
      break;
    }
  }
  
  if (!zonaEncontrada) {
    Logger.log(`No se encontr√≥ zona que contenga: ${zonaBuscada}`);
    showAlert('Zona No Encontrada', 
      `No se encontr√≥ ninguna zona que contenga "${zonaBuscada}"`);
    return;
  }
  
  const mensaje = `üìç INFORMACI√ìN DE LA ZONA\n\n` +
    `Zona: ${datosZona.zona}\n` +
    `Representante: ${datosZona.nombre}\n` +
    `WhatsApp: ${datosZona.whatsapp || 'NO CONFIGURADO'}\n` +
    `Email: ${datosZona.email || 'No configurado'}\n` +
    `Estado: ${datosZona.activo}\n\n` +
    `${datosZona.activo === 'SI' && datosZona.whatsapp ? 
      '‚úÖ Esta zona EST√Å recibiendo notificaciones' : 
      '‚ùå Esta zona NO est√° recibiendo notificaciones'}`;
  
  showAlert('Informaci√≥n de Contacto', mensaje);
  Logger.log('===== FIN verificarContactosZona() =====');
}

// ================== PRUEBA TODO EL SISTEMA ==================

function probarTodoElSistema() {
  Logger.log('===== INICIO PRUEBA EXHAUSTIVA DE TODO EL SISTEMA =====');
  const ui = SpreadsheetApp.getUi();
  
  const confirmar = ui.alert(
    'üî¨ Prueba Exhaustiva del Sistema',
    'Esta prueba ejecutar√° TODAS las funciones del sistema:\n\n' +
    '1. Diagn√≥stico completo del sistema\n' +
    '2. Prueba de notificaci√≥n retenida (orden existente)\n' +
    '3. Prueba de notificaci√≥n retenida (personalizada)\n' +
    '4. Prueba de notificaci√≥n liberada\n' +
    '5. Verificaci√≥n de estad√≠sticas\n' +
    '6. Verificaci√≥n de contactos\n\n' +
    '‚ö†Ô∏è Se enviar√°n varias notificaciones de prueba\n\n' +
    '¬øDeseas continuar?',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar !== ui.Button.YES) {
    Logger.log('Usuario cancel√≥ la prueba exhaustiva');
    return;
  }
  
  const resultadosPruebas = {
    sistemaCompleto: { estado: '‚è≥', detalles: '', logs: [] },
    ordenRetenidaExistente: { estado: '‚è≥', detalles: '', logs: [] },
    ordenRetenidaPersonalizada: { estado: '‚è≥', detalles: '', logs: [] },
    ordenLiberada: { estado: '‚è≥', detalles: '', logs: [] },
    estadisticas: { estado: '‚è≥', detalles: '', logs: [] },
    contactos: { estado: '‚è≥', detalles: '', logs: [] }
  };
  
  // Funci√≥n auxiliar para capturar logs
  function capturarLogs(funcion, nombrePrueba) {
    const logsAntes = Logger.getLog();
    let resultado = { exito: false, error: null };
    
    try {
      funcion();
      resultado.exito = true;
    } catch (e) {
      resultado.error = e.message;
      Logger.log(`ERROR en ${nombrePrueba}: ${e.message}`);
    }
    
    const logsDespues = Logger.getLog();
    const nuevosLogs = logsDespues.substring(logsAntes.length);
    
    return { resultado, logs: nuevosLogs };
  }
  
  // 1. PRUEBA DEL SISTEMA COMPLETO
  Logger.log('\n========== 1. EJECUTANDO PRUEBA DEL SISTEMA COMPLETO ==========');
  try {
    // Ejecutar la prueba pero interceptar el alert
    const originalAlert = SpreadsheetApp.getUi().alert;
    let reporteCapturado = '';
    
    SpreadsheetApp.getUi().alert = function(titulo, mensaje, botones) {
      if (titulo === 'Resultado de la Prueba') {
        reporteCapturado = mensaje;
      }
      return SpreadsheetApp.getUi().Button.OK;
    };
    
    probarSistemaCompleto();
    
    SpreadsheetApp.getUi().alert = originalAlert;
    
    if (reporteCapturado.includes('SISTEMA FUNCIONANDO CORRECTAMENTE')) {
      resultadosPruebas.sistemaCompleto.estado = '‚úÖ';
      resultadosPruebas.sistemaCompleto.detalles = 'Sistema base funcionando correctamente';
    } else {
      resultadosPruebas.sistemaCompleto.estado = '‚ö†Ô∏è';
      resultadosPruebas.sistemaCompleto.detalles = 'Sistema con advertencias (ver logs)';
    }
    resultadosPruebas.sistemaCompleto.logs.push(reporteCapturado);
  } catch (e) {
    resultadosPruebas.sistemaCompleto.estado = '‚ùå';
    resultadosPruebas.sistemaCompleto.detalles = `Error: ${e.message}`;
    Logger.log(`ERROR en prueba sistema completo: ${e.message}`);
  }
  
  // 2. PRUEBA ORDEN RETENIDA (BUSCAR EXISTENTE)
  Logger.log('\n========== 2. PRUEBA ORDEN RETENIDA EXISTENTE ==========');
  try {
    // Primero buscar una orden real en las hojas
    const hojaOrdenes = getSheet(CONFIG.HOJAS.ordenes.nombre, null, false);
    let ordenPrueba = null;
    
    if (hojaOrdenes && hojaOrdenes.getLastRow() > 1) {
      const datos = hojaOrdenes.getDataRange().getValues();
      if (datos.length > 1) {
        ordenPrueba = datos[1][2]; // Columna C = Orden
        Logger.log(`Orden encontrada para prueba: ${ordenPrueba}`);
      }
    }
    
    if (ordenPrueba) {
      // Simular la ejecuci√≥n sin interacci√≥n del usuario
      const ordenEncontrada = {
        zona: hojaOrdenes.getRange(2, 1).getValue(),
        cliente: hojaOrdenes.getRange(2, 2).getValue(),
        orden: ordenPrueba,
        fecha: hojaOrdenes.getRange(2, 4).getValue(),
        observacion: hojaOrdenes.getRange(2, 5).getValue()
      };
      
      Logger.log(`Datos de orden para prueba: ${JSON.stringify(ordenEncontrada)}`);
      
      // Crear notificaci√≥n de prueba
      const ordenesParaEnviar = [{
        orden: ordenEncontrada.orden,
        tipo: 'Nueva orden retenida (PRUEBA AUTOM√ÅTICA)',
        datos: ordenEncontrada,
        esLiberada: false
      }];
      
      const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
      const fechaHoy = formatDate(getHoraColombia());
      const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
      
      enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
      
      resultadosPruebas.ordenRetenidaExistente.estado = '‚úÖ';
      resultadosPruebas.ordenRetenidaExistente.detalles = `Probado con orden ${ordenPrueba}`;
    } else {
      resultadosPruebas.ordenRetenidaExistente.estado = '‚ö†Ô∏è';
      resultadosPruebas.ordenRetenidaExistente.detalles = 'No hay √≥rdenes retenidas para probar';
    }
  } catch (e) {
    resultadosPruebas.ordenRetenidaExistente.estado = '‚ùå';
    resultadosPruebas.ordenRetenidaExistente.detalles = `Error: ${e.message}`;
    Logger.log(`ERROR en prueba orden retenida existente: ${e.message}`);
  }
  
  // 3. PRUEBA ORDEN RETENIDA PERSONALIZADA
  Logger.log('\n========== 3. PRUEBA ORDEN RETENIDA PERSONALIZADA ==========');
  try {
    const ordenesParaEnviar = [{
      orden: 'TEST-' + Date.now(),
      tipo: 'Nueva orden retenida (PRUEBA PERSONALIZADA AUTOM√ÅTICA)',
      datos: {
        zona: 'Zona de Prueba Autom√°tica',
        cliente: 'Cliente de Prueba Autom√°tica',
        fecha: getHoraColombia(),
        observacion: 'PRUEBA AUTOM√ÅTICA DEL SISTEMA - IGNORAR'
      },
      esLiberada: false
    }];
    
    const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
    const fechaHoy = formatDate(getHoraColombia());
    const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
    
    Logger.log(`Enviando notificaci√≥n personalizada de prueba...`);
    enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
    
    resultadosPruebas.ordenRetenidaPersonalizada.estado = '‚úÖ';
    resultadosPruebas.ordenRetenidaPersonalizada.detalles = 'Notificaci√≥n personalizada enviada';
  } catch (e) {
    resultadosPruebas.ordenRetenidaPersonalizada.estado = '‚ùå';
    resultadosPruebas.ordenRetenidaPersonalizada.detalles = `Error: ${e.message}`;
    Logger.log(`ERROR en prueba orden retenida personalizada: ${e.message}`);
  }
  
  // 4. PRUEBA ORDEN LIBERADA
  Logger.log('\n========== 4. PRUEBA ORDEN LIBERADA ==========');
  try {
    const ordenesParaEnviar = [{
      orden: 'LIB-' + Date.now(),
      tipo: 'Orden liberada (PRUEBA AUTOM√ÅTICA)',
      datos: {
        zona: 'Zona de Prueba Liberaci√≥n',
        cliente: 'Cliente Liberado de Prueba',
        fecha: formatDate(getHoraColombia()),
        hora: formatDate(getHoraColombia(), "HH:mm:ss"),
        observacion: 'ORDEN LIBERADA - PRUEBA AUTOM√ÅTICA'
      },
      esLiberada: true
    }];
    
    const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
    const fechaHoy = formatDate(getHoraColombia());
    const horaActual = formatDate(getHoraColombia(), "HH:mm:ss");
    
    Logger.log(`Enviando notificaci√≥n de liberaci√≥n de prueba...`);
    enviarNotificaciones(ordenesParaEnviar, sheets, {}, fechaHoy, horaActual);
    
    resultadosPruebas.ordenLiberada.estado = '‚úÖ';
    resultadosPruebas.ordenLiberada.detalles = 'Notificaci√≥n de liberaci√≥n enviada';
  } catch (e) {
    resultadosPruebas.ordenLiberada.estado = '‚ùå';
    resultadosPruebas.ordenLiberada.detalles = `Error: ${e.message}`;
    Logger.log(`ERROR en prueba orden liberada: ${e.message}`);
  }
  
  // 5. VERIFICAR ESTAD√çSTICAS
  Logger.log('\n========== 5. VERIFICANDO ESTAD√çSTICAS ==========');
  try {
    const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
    if (hojaControl && hojaControl.getLastRow() > 1) {
      const totalRegistros = hojaControl.getLastRow() - 1;
      Logger.log(`Total de registros en control: ${totalRegistros}`);
      
      resultadosPruebas.estadisticas.estado = '‚úÖ';
      resultadosPruebas.estadisticas.detalles = `${totalRegistros} registros en control`;
    } else {
      resultadosPruebas.estadisticas.estado = '‚ö†Ô∏è';
      resultadosPruebas.estadisticas.detalles = 'Sin datos de control a√∫n';
    }
  } catch (e) {
    resultadosPruebas.estadisticas.estado = '‚ùå';
    resultadosPruebas.estadisticas.detalles = `Error: ${e.message}`;
    Logger.log(`ERROR verificando estad√≠sticas: ${e.message}`);
  }
  
  // 6. VERIFICAR CONTACTOS
  Logger.log('\n========== 6. VERIFICANDO CONTACTOS ==========');
  try {
    const contactos = cargarContactosZonas();
    const totalContactos = Object.keys(contactos.zonaANumero).length;
    const zonasEjemplo = Object.keys(contactos.zonaANumero).slice(0, 3);
    
    Logger.log(`Total contactos activos: ${totalContactos}`);
    Logger.log(`Zonas ejemplo: ${zonasEjemplo.join(', ')}`);
    
    resultadosPruebas.contactos.estado = totalContactos > 0 ? '‚úÖ' : '‚ùå';
    resultadosPruebas.contactos.detalles = `${totalContactos} contactos activos`;
  } catch (e) {
    resultadosPruebas.contactos.estado = '‚ùå';
    resultadosPruebas.contactos.detalles = `Error: ${e.message}`;
    Logger.log(`ERROR verificando contactos: ${e.message}`);
  }
  
  // GENERAR REPORTE FINAL DETALLADO
  Logger.log('\n========== GENERANDO REPORTE FINAL ==========');
  
  let reporte = 'üî¨ REPORTE DE PRUEBA EXHAUSTIVA DEL SISTEMA\n';
  reporte += '=' .repeat(50) + '\n\n';
  
  const pruebasOK = Object.values(resultadosPruebas).filter(r => r.estado === '‚úÖ').length;
  const pruebasError = Object.values(resultadosPruebas).filter(r => r.estado === '‚ùå').length;
  const pruebasAdvertencia = Object.values(resultadosPruebas).filter(r => r.estado === '‚ö†Ô∏è').length;
  
  reporte += `üìä RESUMEN: ${pruebasOK} OK, ${pruebasError} ERROR, ${pruebasAdvertencia} ADVERTENCIAS\n\n`;
  
  reporte += '1Ô∏è‚É£ DIAGN√ìSTICO DEL SISTEMA: ' + resultadosPruebas.sistemaCompleto.estado + '\n';
  reporte += '   ' + resultadosPruebas.sistemaCompleto.detalles + '\n\n';
  
  reporte += '2Ô∏è‚É£ NOTIFICACI√ìN RETENIDA (EXISTENTE): ' + resultadosPruebas.ordenRetenidaExistente.estado + '\n';
  reporte += '   ' + resultadosPruebas.ordenRetenidaExistente.detalles + '\n\n';
  
  reporte += '3Ô∏è‚É£ NOTIFICACI√ìN RETENIDA (PERSONALIZADA): ' + resultadosPruebas.ordenRetenidaPersonalizada.estado + '\n';
  reporte += '   ' + resultadosPruebas.ordenRetenidaPersonalizada.detalles + '\n\n';
  
  reporte += '4Ô∏è‚É£ NOTIFICACI√ìN LIBERADA: ' + resultadosPruebas.ordenLiberada.estado + '\n';
  reporte += '   ' + resultadosPruebas.ordenLiberada.detalles + '\n\n';
  
  reporte += '5Ô∏è‚É£ ESTAD√çSTICAS: ' + resultadosPruebas.estadisticas.estado + '\n';
  reporte += '   ' + resultadosPruebas.estadisticas.detalles + '\n\n';
  
  reporte += '6Ô∏è‚É£ CONTACTOS: ' + resultadosPruebas.contactos.estado + '\n';
  reporte += '   ' + resultadosPruebas.contactos.detalles + '\n\n';
  
  reporte += '=' .repeat(50) + '\n\n';
  
  if (pruebasError > 0) {
    reporte += '‚ö†Ô∏è ACCIONES REQUERIDAS:\n';
    Object.entries(resultadosPruebas).forEach(([prueba, resultado]) => {
      if (resultado.estado === '‚ùå') {
        reporte += `‚Ä¢ Revisar: ${prueba} - ${resultado.detalles}\n`;
      }
    });
  } else if (pruebasAdvertencia > 0) {
    reporte += '‚ö†Ô∏è ADVERTENCIAS:\n';
    Object.entries(resultadosPruebas).forEach(([prueba, resultado]) => {
      if (resultado.estado === '‚ö†Ô∏è') {
        reporte += `‚Ä¢ ${prueba}: ${resultado.detalles}\n`;
      }
    });
  } else {
    reporte += '‚úÖ ¬°TODAS LAS PRUEBAS PASARON EXITOSAMENTE!\n';
    reporte += 'El sistema est√° funcionando correctamente en todos sus componentes.';
  }
  
  // Mostrar el reporte
  ui.alert('Resultado de Prueba Exhaustiva', reporte, ui.ButtonSet.OK);
  
  // Preguntar si quiere ver los logs detallados
  const verLogs = ui.alert(
    'Logs Detallados',
    '¬øDeseas ver los logs detallados de todas las pruebas?\n\n' +
    'Esto puede ser √∫til para debugging.',
    ui.ButtonSet.YES_NO
  );
  
  if (verLogs === ui.Button.YES) {
    // Crear un documento temporal con todos los logs
    const logsCompletos = Logger.getLog();
    
    // Crear una nueva hoja temporal para los logs
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const hojaLogs = ss.insertSheet('LOGS_PRUEBA_' + new Date().getTime());
    hojaLogs.getRange('A1').setValue('LOGS COMPLETOS DE LA PRUEBA EXHAUSTIVA');
    hojaLogs.getRange('A2').setValue('Fecha: ' + new Date());
    hojaLogs.getRange('A3').setValue('=' .repeat(80));
    
    // Dividir los logs en l√≠neas y escribirlos
    const lineasLog = logsCompletos.split('\n');
    const datosLogs = lineasLog.map(linea => [linea]);
    
    if (datosLogs.length > 0) {
      hojaLogs.getRange(5, 1, datosLogs.length, 1).setValues(datosLogs);
    }
    
    // Formatear la hoja
    hojaLogs.setColumnWidth(1, 800);
    hojaLogs.getRange('A1:A3').setFontWeight('bold');
    
    ui.alert(
      'Logs Guardados',
      `Los logs completos se han guardado en la hoja:\n"${hojaLogs.getName()}"\n\n` +
      'Puedes revisarlos y eliminar la hoja cuando termines.',
      ui.ButtonSet.OK
    );
  }
  
  Logger.log('\n' + reporte);
  Logger.log('===== FIN PRUEBA EXHAUSTIVA DE TODO EL SISTEMA =====');
}

// ================== PRUEBA COMPLETA DEL SISTEMA ==================

function probarSistemaCompleto() {
  Logger.log('===== INICIO PRUEBA COMPLETA DEL SISTEMA =====');
  const ui = SpreadsheetApp.getUi();
  
  const confirmar = ui.alert(
    'üß™ Prueba Completa del Sistema',
    'Esta prueba verificar√°:\n\n' +
    '1. Credenciales guardadas\n' +
    '2. Conexi√≥n a base de datos\n' +
    '3. Hojas del spreadsheet\n' +
    '4. Carga de contactos\n' +
    '5. Lectura de √≥rdenes\n' +
    '6. Env√≠o de notificaci√≥n de prueba\n\n' +
    '¬øDeseas continuar?',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar !== ui.Button.YES) {
    Logger.log('Usuario cancel√≥ la prueba completa');
    return;
  }
  
  const resultados = {
    credenciales: { estado: '‚è≥', detalles: '' },
    baseDatos: { estado: '‚è≥', detalles: '' },
    hojas: { estado: '‚è≥', detalles: '' },
    contactos: { estado: '‚è≥', detalles: '' },
    ordenesRetenidas: { estado: '‚è≥', detalles: '' },
    ordenesLiberadas: { estado: '‚è≥', detalles: '' },
    notificacion: { estado: '‚è≥', detalles: '' }
  };
  
  // 1. VERIFICAR CREDENCIALES
  Logger.log('\n--- VERIFICANDO CREDENCIALES ---');
  try {
    const credenciales = getCredenciales();
    const credencialesFaltantes = [];
    
    if (!credenciales.DB.url) credencialesFaltantes.push('DB_URL');
    if (!credenciales.DB.user) credencialesFaltantes.push('DB_USER');
    if (!credenciales.DB.pass) credencialesFaltantes.push('DB_PASS');
    if (!credenciales.API.url) credencialesFaltantes.push('API_URL');
    if (!credenciales.API.token) credencialesFaltantes.push('API_TOKEN');
    if (!credenciales.API.channel) credencialesFaltantes.push('API_CHANNEL');
    
    if (credencialesFaltantes.length === 0) {
      resultados.credenciales.estado = '‚úÖ';
      resultados.credenciales.detalles = 'Todas las credenciales est√°n configuradas';
      Logger.log('‚úÖ Todas las credenciales encontradas');
    } else {
      resultados.credenciales.estado = '‚ùå';
      resultados.credenciales.detalles = `Faltan: ${credencialesFaltantes.join(', ')}`;
      Logger.log(`‚ùå Credenciales faltantes: ${credencialesFaltantes.join(', ')}`);
    }
  } catch (e) {
    resultados.credenciales.estado = '‚ùå';
    resultados.credenciales.detalles = `Error: ${e.message}`;
    Logger.log(`‚ùå Error verificando credenciales: ${e.message}`);
  }
  
  // 2. VERIFICAR CONEXI√ìN A BASE DE DATOS
  if (resultados.credenciales.estado === '‚úÖ') {
    Logger.log('\n--- PROBANDO CONEXI√ìN A BASE DE DATOS ---');
    try {
      const credenciales = getCredenciales();
      const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
      
      // Prueba simple de conexi√≥n
      const stmt = conn.createStatement();
      const results = stmt.executeQuery("SELECT 1 AS test");
      results.next();
      const testResult = results.getInt("test");
      stmt.close();
      conn.close();
      
      if (testResult === 1) {
        resultados.baseDatos.estado = '‚úÖ';
        resultados.baseDatos.detalles = 'Conexi√≥n exitosa';
        Logger.log('‚úÖ Conexi√≥n a base de datos exitosa');
      }
    } catch (e) {
      resultados.baseDatos.estado = '‚ùå';
      resultados.baseDatos.detalles = `Error: ${e.message}`;
      Logger.log(`‚ùå Error conectando a base de datos: ${e.message}`);
    }
  } else {
    resultados.baseDatos.estado = '‚ö†Ô∏è';
    resultados.baseDatos.detalles = 'No se pudo probar (faltan credenciales)';
  }
  
  // 3. VERIFICAR HOJAS DEL SPREADSHEET
  Logger.log('\n--- VERIFICANDO HOJAS DEL SPREADSHEET ---');
  try {
    const hojasRequeridas = Object.values(CONFIG.HOJAS).map(h => h.nombre);
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const hojasExistentes = ss.getSheets().map(s => s.getName());
    const hojasFaltantes = hojasRequeridas.filter(h => !hojasExistentes.includes(h));
    
    if (hojasFaltantes.length === 0) {
      resultados.hojas.estado = '‚úÖ';
      resultados.hojas.detalles = `Todas las hojas existen (${hojasRequeridas.length})`;
      Logger.log('‚úÖ Todas las hojas requeridas existen');
    } else {
      // Intentar crear las hojas faltantes
      Logger.log(`Creando ${hojasFaltantes.length} hojas faltantes...`);
      hojasFaltantes.forEach(nombreHoja => {
        const configHoja = Object.values(CONFIG.HOJAS).find(h => h.nombre === nombreHoja);
        if (configHoja) {
          getSheet(configHoja.nombre, configHoja.headers);
        }
      });
      resultados.hojas.estado = '‚úÖ';
      resultados.hojas.detalles = `Creadas ${hojasFaltantes.length} hojas faltantes`;
    }
  } catch (e) {
    resultados.hojas.estado = '‚ùå';
    resultados.hojas.detalles = `Error: ${e.message}`;
    Logger.log(`‚ùå Error verificando hojas: ${e.message}`);
  }
  
  // 4. VERIFICAR CARGA DE CONTACTOS
  Logger.log('\n--- VERIFICANDO CONTACTOS ---');
  try {
    const contactos = cargarContactosZonas();
    const totalContactos = Object.keys(contactos.zonaANumero).length;
    
    if (totalContactos > 0) {
      resultados.contactos.estado = '‚úÖ';
      resultados.contactos.detalles = `${totalContactos} contactos activos cargados`;
      Logger.log(`‚úÖ ${totalContactos} contactos cargados exitosamente`);
      
      // Verificar algunas zonas espec√≠ficas
      const zonasImportantes = ['Zona1Cundinamarca-Boyac√°-Santa', 'Zona17-Valle', 'Zona 23 - Caribe seco'];
      const zonasSinContacto = zonasImportantes.filter(z => !contactos.zonaANumero[z]);
      
      if (zonasSinContacto.length > 0) {
        resultados.contactos.detalles += ` (Advertencia: ${zonasSinContacto.length} zonas importantes sin contacto)`;
      }
    } else {
      resultados.contactos.estado = '‚ùå';
      resultados.contactos.detalles = 'No se encontraron contactos activos';
    }
  } catch (e) {
    resultados.contactos.estado = '‚ùå';
    resultados.contactos.detalles = `Error: ${e.message}`;
    Logger.log(`‚ùå Error cargando contactos: ${e.message}`);
  }
  
  // 5. VERIFICAR LECTURA DE √ìRDENES RETENIDAS
  if (resultados.baseDatos.estado === '‚úÖ') {
    Logger.log('\n--- VERIFICANDO LECTURA DE √ìRDENES RETENIDAS ---');
    try {
      const credenciales = getCredenciales();
      const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
      
      const query = `
        SELECT TOP 5 d.OrderHed_OrderNum, d.Zona, d.Customer_Name
        FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
        WHERE d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0 
          AND d.Zona != 'Comercial Agrosoil'
          AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
        ORDER BY d.OrderHed_OrderNum DESC`;
      
      const stmt = conn.createStatement();
      const results = stmt.executeQuery(query);
      
      let contador = 0;
      while (results.next() && contador < 5) {
        contador++;
      }
      
      stmt.close();
      conn.close();
      
      resultados.ordenesRetenidas.estado = '‚úÖ';
      resultados.ordenesRetenidas.detalles = `Query ejecutada exitosamente (${contador} √≥rdenes encontradas)`;
      Logger.log(`‚úÖ Query de √≥rdenes retenidas exitosa: ${contador} √≥rdenes`);
    } catch (e) {
      resultados.ordenesRetenidas.estado = '‚ùå';
      resultados.ordenesRetenidas.detalles = `Error: ${e.message}`;
      Logger.log(`‚ùå Error leyendo √≥rdenes retenidas: ${e.message}`);
    }
  } else {
    resultados.ordenesRetenidas.estado = '‚ö†Ô∏è';
    resultados.ordenesRetenidas.detalles = 'No se pudo probar (sin conexi√≥n a BD)';
  }
  
  // 6. VERIFICAR LECTURA DE √ìRDENES LIBERADAS
  if (resultados.baseDatos.estado === '‚úÖ') {
    Logger.log('\n--- VERIFICANDO LECTURA DE √ìRDENES LIBERADAS ---');
    try {
      const credenciales = getCredenciales();
      const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
      
      const query = `
        SELECT TOP 5 d.OrderHed_OrderNum, d.Zona, d.Customer_Name
        FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
        JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
          ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
        WHERE d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 
          AND d.Zona != 'Comercial Agrosoil' AND oh.CreditOverride = 1 
          AND d.FechaLiberacionCredito IS NOT NULL
          AND d.FechaLiberacionCredito >= DATEADD(day, -7, GETDATE())
        ORDER BY d.FechaLiberacionCredito DESC`;
      
      const stmt = conn.createStatement();
      const results = stmt.executeQuery(query);
      
      let contador = 0;
      while (results.next() && contador < 5) {
        contador++;
      }
      
      stmt.close();
      conn.close();
      
      resultados.ordenesLiberadas.estado = '‚úÖ';
      resultados.ordenesLiberadas.detalles = `Query ejecutada exitosamente (${contador} √≥rdenes encontradas)`;
      Logger.log(`‚úÖ Query de √≥rdenes liberadas exitosa: ${contador} √≥rdenes`);
    } catch (e) {
      resultados.ordenesLiberadas.estado = '‚ùå';
      resultados.ordenesLiberadas.detalles = `Error: ${e.message}`;
      Logger.log(`‚ùå Error leyendo √≥rdenes liberadas: ${e.message}`);
    }
  } else {
    resultados.ordenesLiberadas.estado = '‚ö†Ô∏è';
    resultados.ordenesLiberadas.detalles = 'No se pudo probar (sin conexi√≥n a BD)';
  }
  
  // 7. VERIFICAR ENV√çO DE NOTIFICACI√ìN
  Logger.log('\n--- VERIFICANDO ENV√çO DE NOTIFICACI√ìN ---');
  const preguntarNotificacion = ui.alert(
    'Prueba de Notificaci√≥n',
    '¬øDeseas enviar una notificaci√≥n de prueba?\n\n' +
    'Se enviar√° al n√∫mero por defecto (3182260739)',
    ui.ButtonSet.YES_NO
  );
  
  if (preguntarNotificacion === ui.Button.YES && resultados.credenciales.estado === '‚úÖ') {
    try {
      const credenciales = getCredenciales();
      const fechaReporte = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
      
      const params = {
        "1": fechaReporte,
        "2": "Sistema",
        "3": "Zona de Prueba",
        "4": "Cliente de Prueba",
        "5": "üß™ PRUEBA DEL SISTEMA üîπ Orden: TEST-001",
        "6": "üìÑ TEST-001: ESTA ES UNA PRUEBA DEL SISTEMA",
        "7": "3103149259"
      };
      
      const response = UrlFetchApp.fetch(credenciales.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": credenciales.API.token },
        payload: JSON.stringify({
          chatPlatform: "whatsapp",
          chatChannelNumber: credenciales.API.channel,
          platformContactId: "573182260739",
          ruleNameOrId: "reporte_ordenes_retenidasv_0",
          params,
          clientPayload: `prueba_sistema_${Date.now()}`
        }),
        muteHttpExceptions: true
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        resultados.notificacion.estado = '‚úÖ';
        resultados.notificacion.detalles = 'Notificaci√≥n enviada exitosamente';
        Logger.log('‚úÖ Notificaci√≥n de prueba enviada exitosamente');
      } else {
        resultados.notificacion.estado = '‚ùå';
        resultados.notificacion.detalles = `Error en respuesta: ${response.getResponseCode()}`;
        Logger.log(`‚ùå Error en respuesta de API: ${texto}`);
      }
    } catch (e) {
      resultados.notificacion.estado = '‚ùå';
      resultados.notificacion.detalles = `Error: ${e.message}`;
      Logger.log(`‚ùå Error enviando notificaci√≥n: ${e.message}`);
    }
  } else {
    resultados.notificacion.estado = '‚è≠Ô∏è';
    resultados.notificacion.detalles = 'Prueba omitida por el usuario';
  }
  
  // GENERAR REPORTE FINAL
  Logger.log('\n--- GENERANDO REPORTE FINAL ---');
  let reporte = 'üß™ REPORTE DE PRUEBA DEL SISTEMA\n';
  reporte += '=' .repeat(40) + '\n\n';
  
  const componentesOK = Object.values(resultados).filter(r => r.estado === '‚úÖ').length;
  const componentesError = Object.values(resultados).filter(r => r.estado === '‚ùå').length;
  
  reporte += `üìä RESUMEN: ${componentesOK} OK, ${componentesError} ERROR\n\n`;
  
  reporte += '1Ô∏è‚É£ CREDENCIALES: ' + resultados.credenciales.estado + '\n';
  reporte += '   ' + resultados.credenciales.detalles + '\n\n';
  
  reporte += '2Ô∏è‚É£ BASE DE DATOS: ' + resultados.baseDatos.estado + '\n';
  reporte += '   ' + resultados.baseDatos.detalles + '\n\n';
  
  reporte += '3Ô∏è‚É£ HOJAS SPREADSHEET: ' + resultados.hojas.estado + '\n';
  reporte += '   ' + resultados.hojas.detalles + '\n\n';
  
  reporte += '4Ô∏è‚É£ CONTACTOS: ' + resultados.contactos.estado + '\n';
  reporte += '   ' + resultados.contactos.detalles + '\n\n';
  
  reporte += '5Ô∏è‚É£ √ìRDENES RETENIDAS: ' + resultados.ordenesRetenidas.estado + '\n';
  reporte += '   ' + resultados.ordenesRetenidas.detalles + '\n\n';
  
  reporte += '6Ô∏è‚É£ √ìRDENES LIBERADAS: ' + resultados.ordenesLiberadas.estado + '\n';
  reporte += '   ' + resultados.ordenesLiberadas.detalles + '\n\n';
  
  reporte += '7Ô∏è‚É£ NOTIFICACIONES: ' + resultados.notificacion.estado + '\n';
  reporte += '   ' + resultados.notificacion.detalles + '\n\n';
  
  reporte += '=' .repeat(40) + '\n';
  
  if (componentesError > 0) {
    reporte += '\n‚ö†Ô∏è ACCI√ìN REQUERIDA:\n';
    if (resultados.credenciales.estado === '‚ùå') {
      reporte += '‚Ä¢ Ejecuta "configurarCredencialesSeguras()" desde el men√∫\n';
    }
    if (resultados.contactos.estado === '‚ùå') {
      reporte += '‚Ä¢ Verifica la hoja "ContactosZonas" y marca contactos como activos\n';
    }
  } else {
    reporte += '\n‚úÖ ¬°SISTEMA FUNCIONANDO CORRECTAMENTE!';
  }
  
  // Mostrar reporte
  ui.alert('Resultado de la Prueba', reporte, ui.ButtonSet.OK);
  
  // Guardar reporte en logs
  Logger.log('\n' + reporte);
  Logger.log('===== FIN PRUEBA COMPLETA DEL SISTEMA =====');
}

// ================== GESTI√ìN DE COPIAS DE REPORTES ==================

function configurarCopiasReportes() {
  Logger.log('===== INICIO configurarCopiasReportes() =====');
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  
  // Obtener configuraci√≥n actual
  const copiaActiva = scriptProperties.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = scriptProperties.getProperty('NUMERO_COPIA') || '';
  const zonasCopia = scriptProperties.getProperty('ZONAS_COPIA') || '';
  
  let mensaje = 'üìã CONFIGURACI√ìN ACTUAL DE COPIAS\n\n';
  mensaje += `Estado: ${copiaActiva ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n`;
  if (numeroCopia) {
    mensaje += `N√∫mero: ${numeroCopia}\n`;
    mensaje += `Zonas: ${zonasCopia || 'TODAS'}\n`;
  }
  mensaje += '\n¬øQu√© deseas hacer?';
  
  const opcion = ui.alert(
    'üì± Gesti√≥n de Copias de Reportes',
    mensaje,
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (opcion === ui.Button.CANCEL) {
    Logger.log('Usuario cancel√≥');
    return;
  }
  
  if (opcion === ui.Button.NO) {
    // Desactivar copias
    desactivarCopias();
    return;
  }
  
  // Configurar nuevas copias
  configurarNuevasCopias();
  
  Logger.log('===== FIN configurarCopiasReportes() =====');
}

function configurarNuevasCopias() {
  Logger.log('===== INICIO configurarNuevasCopias() =====');
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  
  // 1. Solicitar n√∫mero de WhatsApp
  const numeroResponse = ui.prompt(
    'üì± N√∫mero de WhatsApp',
    'Ingresa el n√∫mero de WhatsApp para recibir copias:\n\n' +
    'Formato: Solo n√∫meros (ej: 3182260739)\n' +
    'NO incluyas el c√≥digo de pa√≠s (+57)',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (numeroResponse.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ ingreso de n√∫mero');
    return;
  }
  
  const numero = numeroResponse.getResponseText().trim().replace(/\D/g, '');
  
  if (!numero || numero.length < 10) {
    showAlert('‚ùå Error', 'N√∫mero inv√°lido. Debe tener al menos 10 d√≠gitos.');
    return;
  }
  
  Logger.log(`N√∫mero ingresado: ${numero}`);
  
  // 2. Cargar zonas disponibles
  const contactos = cargarContactosZonas();
  const zonasDisponibles = Object.keys(contactos.zonaANumero).sort();
  
  if (zonasDisponibles.length === 0) {
    showAlert('‚ùå Error', 'No hay zonas configuradas. Verifica la hoja ContactosZonas.');
    return;
  }
  
  // 3. Preguntar si quiere todas las zonas o seleccionar
  const tipoSeleccion = ui.alert(
    'üåé Selecci√≥n de Zonas',
    '¬øQu√© zonas quieres incluir en las copias?\n\n' +
    'YES = Todas las zonas\n' +
    'NO = Seleccionar zonas espec√≠ficas',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (tipoSeleccion === ui.Button.CANCEL) {
    Logger.log('Usuario cancel√≥ selecci√≥n de zonas');
    return;
  }
  
  let zonasSeleccionadas = [];
  
  if (tipoSeleccion === ui.Button.YES) {
    // Todas las zonas
    zonasSeleccionadas = zonasDisponibles;
    Logger.log('Seleccionadas todas las zonas');
  } else {
    // Selecci√≥n manual
    zonasSeleccionadas = seleccionarZonasManual(zonasDisponibles);
    if (zonasSeleccionadas.length === 0) {
      Logger.log('No se seleccionaron zonas');
      return;
    }
  }
  
  // 4. Guardar configuraci√≥n
  scriptProperties.setProperty('COPIA_ACTIVA', 'SI');
  scriptProperties.setProperty('NUMERO_COPIA', numero);
  scriptProperties.setProperty('ZONAS_COPIA', zonasSeleccionadas.join(','));
  
  Logger.log(`Configuraci√≥n guardada: ${zonasSeleccionadas.length} zonas`);
  
  // 5. Enviar notificaci√≥n de prueba
  const enviarPrueba = ui.alert(
    'üß™ Prueba de Configuraci√≥n',
    '¬øDeseas enviar una notificaci√≥n de prueba al n√∫mero configurado?\n\n' +
    `N√∫mero: ${numero}\n` +
    `Zonas: ${zonasSeleccionadas.length} seleccionadas`,
    ui.ButtonSet.YES_NO
  );
  
  if (enviarPrueba === ui.Button.YES) {
    enviarNotificacionPruebaCopia(numero, zonasSeleccionadas);
  }
  
  showAlert('‚úÖ Copias Configuradas',
    `Las copias de reportes han sido configuradas:\n\n` +
    `üì± N√∫mero: ${numero}\n` +
    `üåé Zonas: ${zonasSeleccionadas.length} zonas seleccionadas\n\n` +
    `A partir de ahora, este n√∫mero recibir√° copias de los reportes de las zonas seleccionadas.`
  );
  
  Logger.log('===== FIN configurarNuevasCopias() =====');
}

function seleccionarZonasManual(zonasDisponibles) {
  Logger.log('===== INICIO seleccionarZonasManual() =====');
  const ui = SpreadsheetApp.getUi();
  
  // Crear la lista completa de zonas
  let mensaje = 'LISTA COMPLETA DE ZONAS DISPONIBLES:\n\n';
  
  zonasDisponibles.forEach((zona, index) => {
    mensaje += `${index + 1}. ${zona}\n`;
  });
  
  mensaje += '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
  mensaje += 'INSTRUCCIONES:\n';
  mensaje += '‚Ä¢ Escribe los n√∫meros de las zonas separados por comas\n';
  mensaje += '‚Ä¢ Ejemplo: 1,3,5,8,12\n';
  mensaje += '‚Ä¢ Para rangos usa guion: 1-5,10,15-20\n';
  mensaje += '‚Ä¢ Escribe "TODAS" para seleccionar todas\n';
  mensaje += '‚Ä¢ Escribe "NINGUNA" para cancelar';
  
  const response = ui.prompt(
    'üåé Selecci√≥n de Zonas para Copias',
    mensaje,
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() !== ui.Button.OK) {
    Logger.log('Usuario cancel√≥ selecci√≥n');
    return [];
  }
  
  const seleccion = response.getResponseText().trim().toUpperCase();
  
  if (seleccion === 'NINGUNA' || seleccion === '') {
    Logger.log('Usuario no seleccion√≥ ninguna zona');
    return [];
  }
  
  if (seleccion === 'TODAS') {
    Logger.log('Usuario seleccion√≥ todas las zonas');
    return zonasDisponibles;
  }
  
  // Procesar la selecci√≥n
  const zonasSeleccionadas = [];
  const partes = seleccion.split(',');
  
  partes.forEach(parte => {
    parte = parte.trim();
    
    // Verificar si es un rango (ej: 1-5)
    if (parte.includes('-')) {
      const [inicio, fin] = parte.split('-').map(n => parseInt(n.trim()));
      
      if (!isNaN(inicio) && !isNaN(fin) && inicio > 0 && fin <= zonasDisponibles.length) {
        for (let i = inicio; i <= fin; i++) {
          const zona = zonasDisponibles[i - 1];
          if (zona && !zonasSeleccionadas.includes(zona)) {
            zonasSeleccionadas.push(zona);
          }
        }
      }
    } else {
      // Es un n√∫mero simple
      const num = parseInt(parte);
      if (!isNaN(num) && num > 0 && num <= zonasDisponibles.length) {
        const zona = zonasDisponibles[num - 1];
        if (zona && !zonasSeleccionadas.includes(zona)) {
          zonasSeleccionadas.push(zona);
        }
      }
    }
  });
  
  Logger.log(`Zonas seleccionadas: ${zonasSeleccionadas.length} - ${zonasSeleccionadas.join(', ')}`);
  
  // Mostrar confirmaci√≥n
  if (zonasSeleccionadas.length > 0) {
    let mensajeConfirmacion = `Has seleccionado ${zonasSeleccionadas.length} zona(s):\n\n`;
    
    // Mostrar m√°ximo 10 zonas en la confirmaci√≥n
    const zonasAMostrar = zonasSeleccionadas.slice(0, 10);
    zonasAMostrar.forEach(zona => {
      mensajeConfirmacion += `‚Ä¢ ${zona}\n`;
    });
    
    if (zonasSeleccionadas.length > 10) {
      mensajeConfirmacion += `\n... y ${zonasSeleccionadas.length - 10} zonas m√°s`;
    }
    
    mensajeConfirmacion += '\n\n¬øConfirmar esta selecci√≥n?';
    
    const confirmar = ui.alert(
      '‚úÖ Confirmar Selecci√≥n',
      mensajeConfirmacion,
      ui.ButtonSet.YES_NO
    );
    
    if (confirmar !== ui.Button.YES) {
      // Permitir reseleccionar
      return seleccionarZonasManual(zonasDisponibles);
    }
  }
  
  return zonasSeleccionadas;
}

function desactivarCopias() {
  Logger.log('===== INICIO desactivarCopias() =====');
  const ui = SpreadsheetApp.getUi();
  const scriptProperties = PropertiesService.getScriptProperties();
  
  const confirmar = ui.alert(
    'üõë Desactivar Copias',
    '¬øEst√°s seguro de que deseas desactivar las copias de reportes?\n\n' +
    'El n√∫mero configurado dejar√° de recibir notificaciones.',
    ui.ButtonSet.YES_NO
  );
  
  if (confirmar === ui.Button.YES) {
    scriptProperties.setProperty('COPIA_ACTIVA', 'NO');
    Logger.log('Copias desactivadas');
    showAlert('‚úÖ Copias Desactivadas', 
      'Las copias de reportes han sido desactivadas.\n\n' +
      'La configuraci√≥n se mantiene guardada y puede reactivarse cuando desees.');
  }
  
  Logger.log('===== FIN desactivarCopias() =====');
}

function verConfiguracionCopias() {
  Logger.log('===== INICIO verConfiguracionCopias() =====');
  const scriptProperties = PropertiesService.getScriptProperties();
  
  const copiaActiva = scriptProperties.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = scriptProperties.getProperty('NUMERO_COPIA') || 'No configurado';
  const zonasCopia = scriptProperties.getProperty('ZONAS_COPIA') || '';
  
  let mensaje = 'üìã CONFIGURACI√ìN DE COPIAS DE REPORTES\n';
  mensaje += '=' .repeat(40) + '\n\n';
  
  mensaje += `üìä Estado: ${copiaActiva ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n`;
  mensaje += `üì± N√∫mero: ${numeroCopia}\n\n`;
  
  if (zonasCopia) {
    const zonasArray = zonasCopia.split(',');
    mensaje += `üåé Zonas configuradas (${zonasArray.length}):\n\n`;
    
    // Mostrar primeras 10 zonas
    zonasArray.slice(0, 10).forEach((zona, index) => {
      mensaje += `${index + 1}. ${zona}\n`;
    });
    
    if (zonasArray.length > 10) {
      mensaje += `\n... y ${zonasArray.length - 10} zonas m√°s`;
    }
  } else {
    mensaje += 'üåé Zonas: TODAS (configuraci√≥n predeterminada)';
  }
  
  showAlert('Configuraci√≥n de Copias', mensaje);
  Logger.log('===== FIN verConfiguracionCopias() =====');
}

function enviarNotificacionPruebaCopia(numero, zonas) {
  Logger.log('===== INICIO enviarNotificacionPruebaCopia() =====');
  
  try {
    const credenciales = getCredenciales();
    
    // Verificar credenciales
    if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
      Logger.log('ERROR: Credenciales de API incompletas');
      showAlert('‚ùå Error de Configuraci√≥n', 
        'No se encontraron las credenciales de la API.\n\n' +
        'Configura las credenciales primero desde el men√∫ Seguridad.');
      return;
    }
    
    const fechaReporte = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
    
    // Crear mensaje descriptivo con las zonas
    let mensajeZonas = `Recibir√°s copias de ${zonas.length} zona(s):\n`;
    if (zonas.length <= 5) {
      mensajeZonas += zonas.map(z => `‚Ä¢ ${z}`).join('\n');
    } else {
      mensajeZonas += zonas.slice(0, 3).map(z => `‚Ä¢ ${z}`).join('\n');
      mensajeZonas += `\n... y ${zonas.length - 3} zonas m√°s`;
    }
    
    const params = {
      "1": fechaReporte,
      "2": "Sistema",
      "3": "Configuraci√≥n de Copias",
      "4": "PRUEBA DEL SISTEMA",
      "5": "üß™ CONFIGURACI√ìN EXITOSA - COPIAS DE REPORTES",
      "6": mensajeZonas,
      "7": "3103149259"
    };
    
    const telefono = "57" + numero;
    
    Logger.log(`Enviando prueba a: ${telefono}`);
    Logger.log(`API URL: ${credenciales.API.url}`);
    Logger.log(`Canal: ${credenciales.API.channel}`);
    
    const payload = {
      chatPlatform: "whatsapp",
      chatChannelNumber: credenciales.API.channel,
      platformContactId: telefono,
      ruleNameOrId: "reporte_ordenes_retenidasv_0",
      params,
      clientPayload: `prueba_copia_config_${Date.now()}`
    };
    
    Logger.log(`Payload completo: ${JSON.stringify(payload)}`);
    
    const response = UrlFetchApp.fetch(credenciales.API.url, {
      method: "post",
      contentType: "application/json",
      headers: { "access-token": credenciales.API.token },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const responseCode = response.getResponseCode();
    const texto = response.getContentText();
    
    Logger.log(`C√≥digo de respuesta: ${responseCode}`);
    Logger.log(`Respuesta completa: ${texto}`);
    
    // Analizar respuesta
    try {
      const responseData = JSON.parse(texto);
      
      if (responseCode === 200 && (texto.includes("success") || (responseData.id && responseData.problems === null))) {
        Logger.log('‚úÖ Notificaci√≥n de prueba enviada exitosamente');
        showAlert('‚úÖ Prueba Enviada', 
          `Se envi√≥ una notificaci√≥n de prueba al n√∫mero ${numero}\n\n` +
          'Verifica que la hayas recibido en WhatsApp.');
      } else {
        Logger.log(`‚ùå Error en la respuesta: ${JSON.stringify(responseData)}`);
        
        // Mensaje de error m√°s detallado
        let mensajeError = 'No se pudo enviar la notificaci√≥n de prueba.\n\n';
        
        if (responseData.message) {
          mensajeError += `Mensaje: ${responseData.message}\n`;
        }
        
        if (responseData.problems) {
          mensajeError += `Problemas: ${JSON.stringify(responseData.problems)}\n`;
        }
        
        mensajeError += '\nPosibles causas:\n';
        mensajeError += '‚Ä¢ El n√∫mero no est√° registrado en WhatsApp\n';
        mensajeError += '‚Ä¢ Problema con la plantilla de WhatsApp\n';
        mensajeError += '‚Ä¢ Error en las credenciales de API\n\n';
        mensajeError += 'Las copias se han configurado de todas formas.';
        
        showAlert('‚ö†Ô∏è Advertencia', mensajeError);
      }
    } catch (parseError) {
      Logger.log(`Error parseando respuesta: ${parseError.message}`);
      showAlert('‚ö†Ô∏è Advertencia', 
        'Respuesta inesperada del servidor.\n\n' +
        `C√≥digo: ${responseCode}\n` +
        `Respuesta: ${texto.substring(0, 100)}...\n\n` +
        'Las copias se han configurado pero verifica que funcionen.');
    }
    
  } catch (e) {
    Logger.log(`‚ùå Error cr√≠tico: ${e.message}`);
    Logger.log(`Stack trace: ${e.stack}`);
    
    let mensajeError = 'Error al enviar la prueba:\n\n';
    
    if (e.message.includes('Invalid argument')) {
      mensajeError += 'Problema con los par√°metros de la API.\n';
    } else if (e.message.includes('DNS')) {
      mensajeError += 'No se puede conectar al servidor de WhatsApp.\n';
    } else if (e.message.includes('401') || e.message.includes('403')) {
      mensajeError += 'Token de API inv√°lido o sin permisos.\n';
    } else {
      mensajeError += e.message + '\n';
    }
    
    mensajeError += '\nLas copias se han configurado pero no se pudo enviar la prueba.\n';
    mensajeError += 'Verifica las credenciales de API en el men√∫ Seguridad.';
    
    showAlert('‚ùå Error', mensajeError);
  }
  
  Logger.log('===== FIN enviarNotificacionPruebaCopia() =====');
}

// Modificar la funci√≥n enviarNotificaciones para incluir copias
function enviarNotificacionesConCopia(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  Logger.log('===== INICIO enviarNotificacionesConCopia() =====');
  
  if (ordenesParaEnviar.length === 0) {
    Logger.log('No hay √≥rdenes para enviar');
    return;
  }
  
  // Obtener credenciales de forma segura
  const credenciales = getCredenciales();
  
  // Verificar credenciales de API
  if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
    Logger.log('ERROR: Credenciales de API no encontradas');
    SpreadsheetApp.getUi().alert(
      '‚ùå Error de Configuraci√≥n',
      'No se encontraron las credenciales de la API.\n\n' +
      'Por favor, ejecuta primero la funci√≥n configurarCredencialesSeguras() desde el editor de scripts.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    return;
  }
  
  // Verificar configuraci√≥n de copias
  const scriptProperties = PropertiesService.getScriptProperties();
  const copiaActiva = scriptProperties.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = scriptProperties.getProperty('NUMERO_COPIA');
  const zonasCopia = scriptProperties.getProperty('ZONAS_COPIA');
  
  Logger.log(`Copias activas: ${copiaActiva}, N√∫mero: ${numeroCopia}`);
  
  // Determinar zonas permitidas para copias
  let zonasPermitidasCopia = null;
  if (copiaActiva && numeroCopia && zonasCopia && zonasCopia !== 'TODAS') {
    zonasPermitidasCopia = zonasCopia.split(',');
    Logger.log(`Zonas permitidas para copia: ${zonasPermitidasCopia.join(', ')}`);
  }
  
  Logger.log('Cargando contactos de zonas...');
  const contactos = cargarContactosZonas();
  const fechaReporte = formatDate(getHoraColombia(), "dd/MM/yyyy HH:mm:ss");
  const actualizacionesControl = [];
  
  const ordenesAProcesar = ordenesParaEnviar.slice(0, 200);
  Logger.log(`Procesando ${ordenesAProcesar.length} √≥rdenes (m√°ximo 200)`);
  
  ordenesAProcesar.forEach(({ orden, tipo, datos, esLiberada }) => {
    Logger.log(`\n--- Procesando orden ${orden} ---`);
    const numeroWhatsApp = contactos.zonaANumero[datos.zona];
    const representante = contactos.zonaANombre[datos.zona];
    
    Logger.log(`Zona: ${datos.zona}`);
    Logger.log(`WhatsApp encontrado: ${numeroWhatsApp || 'NO ENCONTRADO'}`);
    Logger.log(`Representante: ${representante || 'NO ENCONTRADO'}`);
    
    if (!numeroWhatsApp) {
      Logger.log(`‚ö†Ô∏è ADVERTENCIA: No se encontr√≥ contacto para zona: ${datos.zona}`);
      Logger.log(`Se usar√° n√∫mero por defecto: 3182260739`);
    }
    
    const numeroFinal = numeroWhatsApp || "3182260739";
    const telefono = "57" + numeroFinal;
    const representanteFinal = representante || "Representante sin asignar";
    const representanteCorto = formatearNombreCorto(representanteFinal);
    
    const mensaje = esLiberada ? '‚úÖ ORDEN LIBERADA' : 
      tipo.includes('Nueva') ? 'üÜï NUEVA ORDEN RETENIDA' :
      tipo.includes('volvi√≥') ? '‚ö†Ô∏è ORDEN VOLVI√ì A RETENCI√ìN' : 
      'üìä REPORTE DIARIO 7:00 AM';
    
    Logger.log(`Tipo de mensaje: ${mensaje}`);
    Logger.log(`Es liberada: ${esLiberada}`);
    
    // No modificar el n√∫mero de orden, pero agregar formato para evitar detecci√≥n como tel√©fono
    const ordenFormateada = orden.toString();
    
    const params = esLiberada ? {
      "1": `#${ordenFormateada}`, // Agregar # al inicio para liberadas
      "2": procesarFecha(datos.fecha) + (datos.hora ? " " + datos.hora : ""),
      "3": datos.cliente,
      "4": datos.zona,
      "5": representanteCorto,
      "6": datos.observacion,
      "7": "3103149259"
    } : {
      "1": fechaReporte,
      "2": representanteCorto,
      "3": datos.zona,
      "4": datos.cliente,
      "5": `${mensaje} üîπ Orden #${ordenFormateada} | ${procesarFecha(datos.fecha)}`, // Cambio aqu√≠: # y |
      "6": `üìÑ Orden #${ordenFormateada}: ${datos.observacion}`, // Cambio aqu√≠: agregar "Orden #"
      "7": "3103149259"
    };
    
    // Enviar notificaci√≥n principal
    try {
      Logger.log(`Enviando notificaci√≥n ${esLiberada ? 'LIBERACI√ìN' : 'RETENCI√ìN'} para orden ${orden}`);
      Logger.log(`Tel√©fono destino: ${telefono} (${representanteCorto})`);
      Logger.log(`Plantilla: ${esLiberada ? 'reporte_ordenes_liberadasv1' : 'reporte_ordenes_retenidasv_0'}`);
      
      const payload = {
        chatPlatform: "whatsapp",
        chatChannelNumber: credenciales.API.channel,
        platformContactId: telefono,
        ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv_0",
        params,
        clientPayload: `orden_${tipo}_${orden}_${Date.now()}`
      };
      
      Logger.log(`Payload: ${JSON.stringify(payload)}`);
      
      const response = UrlFetchApp.fetch(credenciales.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": credenciales.API.token },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      Logger.log(`Respuesta status: ${response.getResponseCode()}`);
      Logger.log(`Respuesta: ${texto.substring(0, 200)}...`);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        Logger.log(`‚úÖ Notificaci√≥n enviada exitosamente para orden ${orden} a ${telefono}`);
        
        const controlExistente = controlData[orden];
        
        actualizacionesControl.push({
          orden, 
          estado: esLiberada ? 'LIBERADA' : 'RETENIDA',
          fechaEnvio: fechaHoy,
          horaEnvio: horaActual,
          tipoNotificacion: tipo,
          enviadoHoyRetenida: !esLiberada ? "SI" : (controlExistente?.enviadoHoyRetenida || "NO"),
          enviadoHoyLiberada: esLiberada ? "SI" : (controlExistente?.enviadoHoyLiberada || "NO"),
          cliente: datos.cliente,
          zona: datos.zona,
          fila: controlExistente?.fila
        });
        
        // Enviar copia si est√° configurada y la zona est√° permitida
        if (copiaActiva && numeroCopia) {
          const debeEnviarCopia = !zonasPermitidasCopia || zonasPermitidasCopia.includes(datos.zona);
          
          if (debeEnviarCopia) {
            Logger.log(`Enviando copia a supervisor (${numeroCopia}) para zona ${datos.zona}`);
            
            const telefonoCopia = "57" + numeroCopia;
            const payloadCopia = {
              chatPlatform: "whatsapp",
              chatChannelNumber: credenciales.API.channel,
              platformContactId: telefonoCopia,
              ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv_0",
              params, // Usar los mismos par√°metros
              clientPayload: `copia_${tipo}_${orden}_${Date.now()}`
            };
            
            try {
              const responseCopia = UrlFetchApp.fetch(credenciales.API.url, {
                method: "post",
                contentType: "application/json",
                headers: { "access-token": credenciales.API.token },
                payload: JSON.stringify(payloadCopia),
                muteHttpExceptions: true
              });
              
              const textoCopia = responseCopia.getContentText();
              
              if (textoCopia.includes("success")) {
                Logger.log(`‚úÖ Copia enviada exitosamente a ${telefonoCopia}`);
              } else {
                Logger.log(`‚ùå Error enviando copia: ${textoCopia}`);
              }
            } catch (eCopia) {
              Logger.log(`‚ùå Error enviando copia: ${eCopia.message}`);
            }
          } else {
            Logger.log(`Zona ${datos.zona} no est√° en la lista de copias, omitiendo`);
          }
        }
      } else {
        Logger.log(`‚ùå Error en respuesta para orden ${orden}: ${texto}`);
      }
    } catch (e) {
      Logger.log(`‚ùå Error enviando ${orden}: ${e.message}`);
      Logger.log(`Stack trace: ${e.stack}`);
    }
    
    Logger.log('Esperando 1 segundo antes de siguiente env√≠o...');
    Utilities.sleep(1000);
  });
  
  Logger.log(`\nActualizando ${actualizacionesControl.length} registros de control...`);
  
  actualizacionesControl.forEach(act => {
    const valores = [
      act.orden, act.estado, act.fechaEnvio, act.horaEnvio, 
      act.tipoNotificacion, act.enviadoHoyRetenida, act.enviadoHoyLiberada,
      act.cliente, act.zona
    ];
    
    if (act.fila) {
      Logger.log(`Actualizando fila ${act.fila} para orden ${act.orden}`);
      sheets.control.getRange(act.fila, 1, 1, 9).setValues([valores]);
    } else {
      Logger.log(`Agregando nueva fila para orden ${act.orden}`);
      sheets.control.appendRow(valores);
    }
  });
  
  if (sheets.control.getLastRow() > 1) {
    Logger.log('Aplicando formato condicional a hoja de control...');
    const rangoEstado = sheets.control.getRange(2, 2, sheets.control.getLastRow() - 1, 1);
    sheets.control.clearConditionalFormatRules();
    
    ['RETENIDA', 'LIBERADA'].forEach((estado, i) => {
      const regla = SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(estado)
        .setBackground(i === 0 ? '#ffcdd2' : '#c8e6c9')
        .setFontColor(i === 0 ? '#c62828' : '#2e7d32')
        .setRanges([rangoEstado])
        .build();
      sheets.control.setConditionalFormatRules([...sheets.control.getConditionalFormatRules(), regla]);
    });
    
    sheets.control.autoResizeColumns(1, 9);
  }
  
  Logger.log('===== FIN enviarNotificacionesConCopia() =====');
}

// ================== MEN√ö ==================

function onOpen() {
  Logger.log('===== INICIO onOpen() =====');
  const ui = SpreadsheetApp.getUi();
  
  ui.createMenu('üîß Sistema de √ìrdenes')
    .addSubMenu(ui.createMenu('üîê Seguridad')
      .addItem('‚öôÔ∏è Configurar Credenciales', 'configurarCredencialesSeguras')
      .addItem('üëÅÔ∏è Ver Credenciales Guardadas', 'verPropiedadesGuardadas')
      .addItem('‚úèÔ∏è Actualizar Credencial', 'actualizarCredencial')
      .addItem('üóëÔ∏è Eliminar Credencial', 'eliminarCredencial'))
    .addSeparator()
    .addSubMenu(ui.createMenu('‚öôÔ∏è Configurar Triggers')
      .addItem('üöÄ Configuraci√≥n Completa Personalizada', 'configurarTriggerCompleto')
      .addSeparator()
      .addItem('üïê Solo Verificaci√≥n: Cada 5 min (24 horas)', 'configurarTriggersDiarios')
      .addItem('üè¢ Solo Verificaci√≥n: Cada 5 min (horario laboral)', 'configurarTriggersHorarioLaboral')
      .addItem('‚è∞ Solo Reporte Diario: Hora personalizada', 'configurarReporteDiarioPersonalizado')
      .addSeparator()
      .addItem('üìÖ Ver Triggers Activos', 'verTriggersActivos')
      .addItem('üõë Detener todos los triggers', 'detenerTriggers'))
    .addItem('üìä Ver Estad√≠sticas', 'verEstadisticas')
    .addSubMenu(ui.createMenu('üì± Contactos')
      .addItem('üìã Ver Resumen de Contactos', 'gestionarContactos')
      .addItem('üîç Verificar Contacto de Zona', 'verificarContactosZona'))
    .addSubMenu(ui.createMenu('üì® Copias de Reportes')
      .addItem('‚öôÔ∏è Configurar/Desactivar Copias', 'configurarCopiasReportes')
      .addItem('üëÅÔ∏è Ver Configuraci√≥n Actual', 'verConfiguracionCopias'))
    .addSeparator()
    .addSubMenu(ui.createMenu('üß™ Pruebas de Notificaciones')
      .addItem('üî¨ Probar Sistema (Diagn√≥stico)', 'probarSistemaCompleto')
      .addItem('üß¨ PROBAR TODO EL SISTEMA', 'probarTodoElSistema')
      .addSeparator()
      .addItem('üìã Probar Retenci√≥n (Orden Existente)', 'probarNotificacionOrdenRetenida')
      .addItem('‚úèÔ∏è Probar Retenci√≥n (Datos Personalizados)', 'probarNotificacionRetenidaPersonalizada')
      .addSeparator()
      .addItem('‚úÖ Probar Liberaci√≥n (Solo Retenidas)', 'probarLiberacionOrdenExistente')
      .addItem('üîî Probar Liberaci√≥n (Cualquier Orden)', 'probarNotificacionOrdenLiberada'))
    .addSeparator()
    .addItem('üîÑ Ejecutar Reporte Diario Ahora', 'reporteDiario')
    .addItem('üîç Verificar Cambios Ahora', 'verificarCambios')
    .addToUi();
    
  Logger.log('Men√∫ creado exitosamente');
  Logger.log('===== FIN onOpen() =====');
}
