// ================== CONFIGURACI√ìN Y CONSTANTES ==================
// üéØ PERSONALIZA AQU√ç LOS NOMBRES DE LAS HOJAS
const CONFIG = {
  HOJAS: {
    ordenes: {
      nombre: "üìã √ìrdenes Retenidas",  // ‚Üê Puedes cambiar este nombre
      headers: ["Zona", "Cliente", "N√∫mero Orden", "Fecha", "Observaci√≥n", "Estado", "Motivo"]
    },
    logs: {
      nombre: "üìú Historial Liberaciones",  // ‚Üê Puedes cambiar este nombre
      headers: ["Orden", "Zona", "Cliente", "Fecha Liberaci√≥n", "Hora", "Usuario", "Nombre Usuario", "Observaciones", "Estado"]
    },
    control: {
      nombre: "üéõÔ∏è Control de Env√≠os",  // ‚Üê Puedes cambiar este nombre
      headers: ["Orden", "Estado", "Fecha Env√≠o", "Hora Env√≠o", "Tipo Notificaci√≥n", "Retenida Hoy", "Liberada Hoy", "Cliente", "Zona"]
    },
    contactos: {
      nombre: "üì± Contactos por Zona",  // ‚Üê Puedes cambiar este nombre
      headers: ["Zona", "Nombre Representante", "WhatsApp", "Email", "Activo"]
    },
    errores: {
      nombre: "‚ö†Ô∏è Log de Errores",  // ‚Üê Puedes cambiar este nombre
      headers: ["Fecha", "Hora", "Tipo", "Error", "Detalles"]
    }
  },
  
  // üéØ PERSONALIZA AQU√ç TUS ZONAS Y CONTACTOS INICIALES
  // ‚ö†Ô∏è IMPORTANTE: Edita estos datos seg√∫n tus zonas reales
  // Formato: [Zona, Nombre Representante, WhatsApp, Email, Activo]
  CONTACTOS_INICIALES: [
    ["Zona 1", "Representante Zona 1", "3000000001", "zona1@empresa.com", "SI"],
    ["Zona 2", "Representante Zona 2", "3000000002", "zona2@empresa.com", "SI"],
    ["Zona 3", "Representante Zona 3", "3000000003", "zona3@empresa.com", "SI"],
    ["Zona 4", "Representante Zona 4", "3000000004", "zona4@empresa.com", "SI"],
    ["Zona 5", "Representante Zona 5", "3000000005", "zona5@empresa.com", "SI"],
    // ‚≠ê AGREGA O ELIMINA ZONAS SEG√öN NECESITES
    // ["Zona X", "Nombre del Representante", "3XXXXXXXXX", "email@empresa.com", "SI"],
  ],
  
  // Configuraci√≥n de historial (en meses)
  MESES_HISTORIAL: 2,  // ‚Üê Cambia aqu√≠ cu√°ntos meses de historial mantener
  
  // Nombre de tu empresa/proyecto
  NOMBRE_SISTEMA: "Sistema de √ìrdenes Retenidas"  // ‚Üê Cambia aqu√≠ el nombre
};

const CACHE = { credenciales: null, contactos: null, ultimaCarga: 0 };
const SHEETS_CACHE = {};
const PREPOSICIONES = new Set(['de', 'del', 'la', 'las', 'los', 'da', 'do', 'dos', 'y', 'e']);

// ================== FUNCIONES AUXILIARES ==================
const showAlert = (titulo, mensaje) => SpreadsheetApp.getUi().alert(titulo, mensaje, SpreadsheetApp.getUi().ButtonSet.OK);

function registrarError(tipo, error, detalles = '') {
  try {
    const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, CONFIG.HOJAS.errores.headers);
    const fecha = formatDate(new Date());
    const hora = formatDate(new Date(), "HH:mm:ss");
    
    const ultimaFila = hojaErrores.getLastRow();
    const maxFilas = hojaErrores.getMaxRows();
    
    if (ultimaFila >= maxFilas - 10) {
      const mitad = Math.floor(ultimaFila / 2);
      hojaErrores.deleteRows(2, mitad);
    } else if (ultimaFila > 1001) {
      hojaErrores.deleteRows(2, ultimaFila - 1001);
    }
    
    hojaErrores.appendRow([fecha, hora, tipo, error, detalles]);
  } catch (e) {
    Logger.log(`Error al registrar error: ${e.message}`);
  }
}

function verificarZonaHoraria() {
  const zonaActual = Session.getScriptTimeZone();
  if (zonaActual !== "America/Bogota") {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      ss.setSpreadsheetTimeZone("America/Bogota");
      Logger.log("‚úÖ Zona horaria actualizada a America/Bogota");
    } catch (e) {
      registrarError("Zona Horaria", "No se pudo establecer zona horaria America/Bogota", e.message);
    }
  }
}

function getCredenciales() {
  if (CACHE.credenciales) return CACHE.credenciales;
  const props = PropertiesService.getScriptProperties();
  CACHE.credenciales = {
    DB: { 
      url: props.getProperty('DB_URL'), 
      user: props.getProperty('DB_USER'), 
      pass: props.getProperty('DB_PASS') 
    },
    API: { 
      url: props.getProperty('API_URL'), 
      token: props.getProperty('API_TOKEN'), 
      channel: props.getProperty('API_CHANNEL') 
    }
  };
  return CACHE.credenciales;
}

function getSheet(nombre, headers = null, crear = true) {
  if (SHEETS_CACHE[nombre]) return SHEETS_CACHE[nombre];
  
  let hoja = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(nombre);
  
  if (!hoja && crear) {
    hoja = SpreadsheetApp.getActiveSpreadsheet().insertSheet(nombre);
    
    if (headers) {
      hoja.getRange(1, 1, 1, headers.length)
        .setValues([headers])
        .setFontWeight("bold")
        .setBackground("#4285f4")
        .setFontColor("white")
        .setHorizontalAlignment("center");
      
      hoja.setFrozenRows(1);
      hoja.autoResizeColumns(1, headers.length);
      
      Logger.log(`‚úÖ Hoja creada: ${nombre}`);
    }
  }
  
  if (hoja) SHEETS_CACHE[nombre] = hoja;
  return hoja;
}

function formatDate(fecha, formato = "dd/MM/yyyy") {
  if (!fecha) return "Sin fecha";
  try {
    const fechaObj = fecha instanceof Date ? fecha : new Date(fecha);
    return Utilities.formatDate(fechaObj, "America/Bogota", formato);
  } catch (e) {
    return String(fecha);
  }
}

function procesarFecha(fechaString) {
  if (!fechaString) return "";
  fechaString = String(fechaString);
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(fechaString)) return fechaString;
  if (fechaString.includes('T') || fechaString.includes('-')) {
    try {
      const [a√±o, mes, dia] = fechaString.split('T')[0].split('-');
      return `${dia.padStart(2, '0')}/${mes.padStart(2, '0')}/${a√±o}`;
    } catch (e) {}
  }
  return fechaString;
}

function formatearNombreCorto(nombreCompleto) {
  if (!nombreCompleto) return "Representante";
  const partes = nombreCompleto.trim().split(/\s+/).slice(0, 2)
    .filter(parte => !PREPOSICIONES.has(parte.toLowerCase()));
  return partes.length > 0 ? partes.join(' ') : nombreCompleto.split(/\s+/).slice(0, 2).join(' ');
}

// ================== FUNCIONES DE NORMALIZACI√ìN ==================
function normalizarTexto(texto) {
  if (!texto) return "";
  texto = String(texto).trim();
  if (texto === texto.toUpperCase()) {
    return texto.toLowerCase().split(' ').map(palabra => {
      if (PREPOSICIONES.has(palabra.toLowerCase()) && palabra.length <= 3) {
        return palabra.toLowerCase();
      }
      return palabra.charAt(0).toUpperCase() + palabra.slice(1).toLowerCase();
    }).join(' ');
  }
  return texto;
}

function normalizarCliente(cliente) {
  if (!cliente) return "";
  cliente = String(cliente).trim();
  if (cliente === cliente.toUpperCase()) {
    const palabrasEspeciales = {
      'sas': 'SAS', 's.a.s': 'S.A.S', 's.a': 'S.A', 'sa': 'S.A',
      'ltda': 'Ltda', 'cia': 'C√≠a', 'e.u': 'E.U', 'eu': 'E.U'
    };
    return cliente.toLowerCase().split(' ').map(palabra => {
      const palabraLower = palabra.toLowerCase().replace(/\./g, '');
      if (palabrasEspeciales[palabraLower]) return palabrasEspeciales[palabraLower];
      if (PREPOSICIONES.has(palabra.toLowerCase()) && palabra.length <= 3) return palabra.toLowerCase();
      return palabra.charAt(0).toUpperCase() + palabra.slice(1).toLowerCase();
    }).join(' ');
  }
  return cliente;
}

function normalizarObservacion(observacion) {
  if (!observacion) return "";
  observacion = String(observacion).trim();
  if (observacion === observacion.toUpperCase()) {
    return observacion.toLowerCase().split(' ').map(palabra => {
      if (PREPOSICIONES.has(palabra.toLowerCase()) && palabra.length <= 3) {
        return palabra.toLowerCase();
      }
      return palabra.charAt(0).toUpperCase() + palabra.slice(1).toLowerCase();
    }).join(' ');
  }
  return observacion;
}

function normalizarNombreZona(zona) {
  if (!zona) return "";
  return String(zona).trim();
}

// ================== LIMPIEZA DE HISTORIAL ==================
function limpiarHistorialAntiguo(hojaLogs) {
  try {
    const ultimaFila = hojaLogs.getLastRow();
    if (ultimaFila <= 1) return;
    
    const fechaLimite = new Date();
    fechaLimite.setMonth(fechaLimite.getMonth() - CONFIG.MESES_HISTORIAL);
    
    const datos = hojaLogs.getRange(2, 1, ultimaFila - 1, CONFIG.HOJAS.logs.headers.length).getValues();
    const datosRecientes = [];
    let registrosEliminados = 0;
    
    for (let i = 0; i < datos.length; i++) {
      const fechaLiberacion = datos[i][3];
      if (!fechaLiberacion) continue;
      
      try {
        const partesFecha = String(fechaLiberacion).split('/');
        if (partesFecha.length === 3) {
          const fechaRegistro = new Date(partesFecha[2], partesFecha[1] - 1, partesFecha[0]);
          if (fechaRegistro >= fechaLimite) {
            datosRecientes.push(datos[i]);
          } else {
            registrosEliminados++;
          }
        } else {
          datosRecientes.push(datos[i]);
        }
      } catch (e) {
        datosRecientes.push(datos[i]);
      }
    }
    
    if (registrosEliminados > 0) {
      if (ultimaFila > 1) hojaLogs.deleteRows(2, ultimaFila - 1);
      if (datosRecientes.length > 0) {
        hojaLogs.getRange(2, 1, datosRecientes.length, CONFIG.HOJAS.logs.headers.length).setValues(datosRecientes);
      }
      Logger.log(`‚úÖ Historial limpiado: ${registrosEliminados} eliminados, ${datosRecientes.length} conservados`);
    }
  } catch (e) {
    Logger.log(`‚ùå Error al limpiar historial: ${e.message}`);
  }
}

function limpiarControlEnviosAntiguo(hojaControl) {
  try {
    const ultimaFila = hojaControl.getLastRow();
    if (ultimaFila <= 1) return;
    
    const fechaLimite = new Date();
    fechaLimite.setDate(fechaLimite.getDate() - 30);
    
    const datos = hojaControl.getRange(2, 1, ultimaFila - 1, 9).getValues();
    const datosRecientes = [];
    let eliminados = 0;
    
    for (let i = 0; i < datos.length; i++) {
      const fechaEnvio = datos[i][2];
      try {
        const partes = String(fechaEnvio).split('/');
        if (partes.length === 3) {
          const fecha = new Date(partes[2], partes[1] - 1, partes[0]);
          if (fecha >= fechaLimite) {
            datosRecientes.push(datos[i]);
          } else {
            eliminados++;
          }
        } else {
          datosRecientes.push(datos[i]);
        }
      } catch (e) {
        datosRecientes.push(datos[i]);
      }
    }
    
    if (eliminados > 0) {
      if (ultimaFila > 1) hojaControl.deleteRows(2, ultimaFila - 1);
      if (datosRecientes.length > 0) {
        hojaControl.getRange(2, 1, datosRecientes.length, 9).setValues(datosRecientes);
      }
      Logger.log(`‚úÖ Control limpiado: ${eliminados} eliminados, ${datosRecientes.length} conservados`);
    }
  } catch (e) {
    Logger.log(`‚ùå Error al limpiar control: ${e.message}`);
  }
}

// ================== GESTI√ìN DE CREDENCIALES ==================
function verPropiedadesGuardadas() {
  const propiedades = PropertiesService.getScriptProperties().getKeys();
  showAlert('üîê Credenciales Guardadas', 
    propiedades.length ? 
      `Credenciales configuradas:\n\n${propiedades.map(p => `‚úÖ ${p}`).join('\n')}` : 
      '‚ùå No hay credenciales guardadas\n\nVe a: üîê Seguridad ‚Üí ‚úèÔ∏è Actualizar Credencial');
}

function actualizarCredencial() {
  const ui = SpreadsheetApp.getUi();
  
  const credencial = ui.prompt(
    '‚úèÔ∏è Actualizar Credencial', 
    'Opciones disponibles:\n\n' +
    '‚Ä¢ DB_URL (URL de la base de datos)\n' +
    '‚Ä¢ DB_USER (Usuario SQL)\n' +
    '‚Ä¢ DB_PASS (Contrase√±a SQL)\n' +
    '‚Ä¢ API_URL (URL de WhatsApp API)\n' +
    '‚Ä¢ API_TOKEN (Token de acceso)\n' +
    '‚Ä¢ API_CHANNEL (Canal/N√∫mero)\n\n' +
    'Ingresa el nombre de la credencial:', 
    ui.ButtonSet.OK_CANCEL
  );
  
  if (credencial.getSelectedButton() !== ui.Button.OK) return;
  
  const nombre = credencial.getResponseText().trim();
  const validas = ['DB_URL', 'DB_USER', 'DB_PASS', 'API_URL', 'API_TOKEN', 'API_CHANNEL'];
  
  if (!validas.includes(nombre)) { 
    showAlert('‚ùå Error', `Credencial no v√°lida.\n\nOpciones: ${validas.join(', ')}`); 
    return; 
  }
  
  const valor = ui.prompt(
    `Valor para ${nombre}`, 
    `Ingresa el nuevo valor para ${nombre}:`, 
    ui.ButtonSet.OK_CANCEL
  );
  
  if (valor.getSelectedButton() === ui.Button.OK) {
    PropertiesService.getScriptProperties().setProperty(nombre, valor.getResponseText());
    CACHE.credenciales = null;
    showAlert('‚úÖ √âxito', `${nombre} actualizada correctamente`);
  }
}

function eliminarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const propiedades = props.getKeys();
  
  if (!propiedades.length) { 
    showAlert('Sin Credenciales', 'No hay credenciales guardadas'); 
    return; 
  }
  
  const response = ui.prompt(
    'Eliminar Credencial', 
    `Credenciales actuales:\n${propiedades.join('\n')}\n\nIngresa el nombre a eliminar:`, 
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const credencial = response.getResponseText().trim();
    if (propiedades.includes(credencial)) {
      props.deleteProperty(credencial);
      CACHE.credenciales = null;
      showAlert('‚úÖ √âxito', `${credencial} eliminada`);
    } else {
      showAlert('‚ùå Error', 'Credencial no encontrada');
    }
  }
}

function cargarZonasDesdeEpicor() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('üì• Cargar Zonas desde Epicor', 
    'Esta funci√≥n consultar√° Epicor y crear√°/actualizar√°\n' +
    'la lista de zonas autom√°ticamente.\n\n' +
    '‚ö†Ô∏è ADVERTENCIA:\n' +
    'Esto REEMPLAZAR√Å todos los datos en:\n' +
    '"' + CONFIG.HOJAS.contactos.nombre + '"\n\n' +
    '¬øContinuar?', 
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  try {
    const credenciales = getCredenciales();
    if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
      showAlert('‚ùå Error', 
        'Primero configura las credenciales:\n\n' +
        '‚Ä¢ DB_URL\n‚Ä¢ DB_USER\n‚Ä¢ DB_PASS\n\n' +
        'Ve a: üîê Seguridad ‚Üí ‚úèÔ∏è Actualizar Credencial');
      return;
    }
    
    showAlert('‚è≥ Consultando...', 'Obteniendo zonas desde Epicor...');
    
    const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, CONFIG.HOJAS.contactos.headers);
    cargarZonasDesdeEpicorInterno(hojaContactos);
    
    const totalZonas = hojaContactos.getLastRow() - 1;
    
    showAlert('‚úÖ Zonas Cargadas', 
      `Se cargaron ${totalZonas} zonas desde Epicor.\n\n` +
      `‚ö†Ô∏è AHORA EDITA LA HOJA:\n` +
      `"${CONFIG.HOJAS.contactos.nombre}"\n\n` +
      `Las celdas en amarillo indican qu√© editar:\n` +
      `1. Reemplazar "Sin asignar" con nombres reales\n` +
      `2. Reemplazar "3000000000" con WhatsApp reales\n\n` +
      `Luego:\n` +
      `3. Configurar credenciales API\n` +
      `4. Activar triggers`);
    
  } catch (e) {
    Logger.log(`‚ùå Error: ${e.message}`);
    registrarError("Cargar Zonas", "Error al consultar Epicor", e.message);
    showAlert('‚ùå Error', 
      `No se pudieron cargar las zonas:\n\n${e.message}\n\n` +
      `Verifica:\n` +
      `‚Ä¢ Credenciales de BD correctas\n` +
      `‚Ä¢ Conexi√≥n a la base de datos\n` +
      `‚Ä¢ Tabla udvPortalCustDtlOV existe`);
  }
}

// ================== CONFIGURACI√ìN INICIAL ==================
function configuracionInicial() {
  const ui = SpreadsheetApp.getUi();
  
  Logger.log("üöÄ Iniciando configuraci√≥n del sistema...");
  
  verificarZonaHoraria();
  
  // Crear todas las hojas necesarias
  getSheet(CONFIG.HOJAS.errores.nombre, CONFIG.HOJAS.errores.headers);
  getSheet(CONFIG.HOJAS.ordenes.nombre, CONFIG.HOJAS.ordenes.headers);
  getSheet(CONFIG.HOJAS.logs.nombre, CONFIG.HOJAS.logs.headers);
  getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers);
  
  // Verificar si ya existen contactos
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, CONFIG.HOJAS.contactos.headers);
  const yaExistenContactos = hojaContactos.getLastRow() > 1;
  
  if (yaExistenContactos) {
    Logger.log("‚úÖ Ya existen contactos en la hoja");
    
    showAlert(
      '‚úÖ Sistema Configurado', 
      `Las hojas ya est√°n creadas.\n\n` +
      `La hoja "${CONFIG.HOJAS.contactos.nombre}" ya tiene datos.\n\n` +
      `Pr√≥ximos pasos:\n` +
      `1. Verifica que los contactos sean correctos\n` +
      `2. Configura credenciales en üîê Seguridad\n` +
      `3. Activa triggers en ‚öôÔ∏è Configurar Triggers`
    );
    return;
  }
  
  // Si no hay contactos, preguntar c√≥mo quiere cargarlos
  const opcion = ui.alert(
    'üì± Configurar Contactos', 
    '¬øC√≥mo quieres configurar los contactos de las zonas?\n\n' +
    'YES = Cargar zonas desde Epicor (autom√°tico)\n' +
    'NO = Crear 5 zonas de ejemplo (manual)\n' +
    'CANCEL = Configurar despu√©s', 
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (opcion === ui.Button.CANCEL) {
    Logger.log("‚ÑπÔ∏è Configuraci√≥n de contactos pospuesta");
    
    showAlert(
      '‚ÑπÔ∏è Configuraci√≥n Pendiente', 
      `Hojas b√°sicas creadas.\n\n` +
      `Para configurar contactos despu√©s:\n` +
      `‚Ä¢ üì• Cargar Zonas desde Epicor (autom√°tico)\n` +
      `‚Ä¢ Editar manualmente la hoja "${CONFIG.HOJAS.contactos.nombre}"`
    );
    return;
  }
  
  if (opcion === ui.Button.YES) {
    // Intentar cargar desde Epicor
    Logger.log("üì• Usuario eligi√≥ cargar desde Epicor");
    
    const credenciales = getCredenciales();
    if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
      showAlert(
        '‚ö†Ô∏è Faltan Credenciales', 
        `Para cargar zonas desde Epicor necesitas configurar:\n\n` +
        `‚Ä¢ DB_URL\n‚Ä¢ DB_USER\n‚Ä¢ DB_PASS\n\n` +
        `Ve a: üîê Seguridad ‚Üí ‚úèÔ∏è Actualizar Credencial\n\n` +
        `Luego ejecuta: üì• Cargar Zonas desde Epicor`
      );
      
      // Crear zonas de ejemplo mientras tanto
      hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, 5)
        .setValues(CONFIG.CONTACTOS_INICIALES);
      return;
    }
    
    // Cargar desde Epicor directamente
    try {
      showAlert('‚è≥ Cargando...', 'Consultando zonas desde Epicor...');
      cargarZonasDesdeEpicorInterno(hojaContactos);
      
      showAlert(
        '‚úÖ Configuraci√≥n Completa', 
        `Zonas cargadas desde Epicor exitosamente.\n\n` +
        `‚ö†Ô∏è AHORA EDITA LA HOJA:\n` +
        `"${CONFIG.HOJAS.contactos.nombre}"\n\n` +
        `Cambia:\n` +
        `‚Ä¢ "Sin asignar" ‚Üí Nombres reales\n` +
        `‚Ä¢ "3000000000" ‚Üí N√∫meros de WhatsApp reales\n\n` +
        `Pr√≥ximos pasos:\n` +
        `1. ‚úèÔ∏è Editar contactos\n` +
        `2. üîê Verificar credenciales API\n` +
        `3. ‚öôÔ∏è Activar triggers`
      );
      
    } catch (e) {
      Logger.log(`‚ùå Error cargando desde Epicor: ${e.message}`);
      
      showAlert(
        '‚ùå Error al Cargar', 
        `No se pudieron cargar zonas desde Epicor:\n${e.message}\n\n` +
        `Se crearon 5 zonas de ejemplo.\n` +
        `Ed√≠talas manualmente en "${CONFIG.HOJAS.contactos.nombre}"`
      );
      
      // Crear zonas de ejemplo como fallback
      hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, 5)
        .setValues(CONFIG.CONTACTOS_INICIALES);
    }
    
  } else {
    // Usuario eligi√≥ zonas de ejemplo (NO)
    Logger.log("üìù Usuario eligi√≥ crear zonas de ejemplo");
    
    hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, 5)
      .setValues(CONFIG.CONTACTOS_INICIALES);
    
    // Colorear para indicar que son ejemplos
    hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, 5)
      .setBackground("#fff4e5");
    
    showAlert(
      '‚úÖ Zonas de Ejemplo Creadas', 
      `Se crearon 5 zonas de EJEMPLO.\n\n` +
      `‚ö†Ô∏è DEBES EDITARLAS:\n` +
      `"${CONFIG.HOJAS.contactos.nombre}"\n\n` +
      `Opci√≥n A - Manual:\n` +
      `‚Ä¢ Agregar/editar todas tus zonas\n` +
      `‚Ä¢ Poner nombres y n√∫meros reales\n\n` +
      `Opci√≥n B - Autom√°tica:\n` +
      `‚Ä¢ Ve a: üì• Cargar Zonas desde Epicor\n` +
      `‚Ä¢ Las zonas se cargar√°n autom√°ticamente\n` +
      `‚Ä¢ Solo editas nombres y n√∫meros`
    );
  }
  
  Logger.log("‚úÖ Configuraci√≥n inicial completada");
}

// Funci√≥n interna para cargar zonas (usada por configuracionInicial y cargarZonasDesdeEpicor)
function cargarZonasDesdeEpicorInterno(hojaContactos) {
  const credenciales = getCredenciales();
  const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
  
  const query = `
    SELECT DISTINCT d.Zona 
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
    WHERE d.Zona IS NOT NULL 
      AND d.Zona != '' 
      AND d.Zona != 'Comercial Agrosoil'
    ORDER BY d.Zona
  `;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  
  const zonasEncontradas = [];
  while (results.next()) {
    const zona = results.getString("Zona");
    if (zona) {
      zonasEncontradas.push([
        zona,
        "Sin asignar",
        "3000000000",
        "",
        "SI"
      ]);
    }
  }
  
  stmt.close();
  conn.close();
  
  if (zonasEncontradas.length === 0) {
    throw new Error('No se encontraron zonas en Epicor');
  }
  
  // Limpiar datos existentes (mantener headers)
  if (hojaContactos.getLastRow() > 1) {
    hojaContactos.deleteRows(2, hojaContactos.getLastRow() - 1);
  }
  
  // Escribir nuevas zonas
  hojaContactos.getRange(2, 1, zonasEncontradas.length, 5).setValues(zonasEncontradas);
  
  // Colorear columna WhatsApp para indicar que falta editar
  hojaContactos.getRange(2, 3, zonasEncontradas.length, 1)
    .setBackground("#fff4e5")
    .setNote("‚ö†Ô∏è EDITAR: Reemplaza 3000000000 con el n√∫mero real de WhatsApp");
  
  // Colorear columna Representante
  hojaContactos.getRange(2, 2, zonasEncontradas.length, 1)
    .setBackground("#fff4e5")
    .setNote("‚ö†Ô∏è EDITAR: Reemplaza 'Sin asignar' con el nombre del representante");
  
  Logger.log(`‚úÖ ${zonasEncontradas.length} zonas cargadas desde Epicor`);
  registrarError("Cargar Zonas", `${zonasEncontradas.length} zonas cargadas desde Epicor`, "Exitoso");
}

function cargarContactosZonas() {
  if (CACHE.contactos && (Date.now() - CACHE.ultimaCarga) < 300000) return CACHE.contactos;
  
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  if (!hojaContactos) throw new Error("No se encontr√≥ la hoja de contactos");
  
  const datos = hojaContactos.getDataRange().getValues();
  const zonaANumero = {}, zonaANombre = {};
  
  for (let i = 1; i < datos.length; i++) {
    const [zona, nombre, whatsapp, , activo] = datos[i];
    if (String(activo).trim().toUpperCase() === "SI" && zona && whatsapp) {
      const zonaLimpia = String(zona).trim();
      const whatsappLimpio = String(whatsapp).trim().replace(/\D/g, '');
      zonaANumero[zonaLimpia] = whatsappLimpio;
      zonaANombre[zonaLimpia] = String(nombre).trim() || "Representante sin asignar";
    }
  }
  
  CACHE.contactos = { zonaANumero, zonaANombre };
  CACHE.ultimaCarga = Date.now();
  return CACHE.contactos;
}

// ================== GESTI√ìN DE TRIGGERS ==================
function configurarTriggerCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  // Asegurar configuraci√≥n inicial
  configuracionInicial();
  
  const opcionTiempo = ui.alert(
    '‚è∞ Configuraci√≥n de Tiempo', 
    'YES = Reporte diario (ej: 7:00 AM todos los d√≠as)\n' +
    'NO = Prueba √∫nica (ejecutar√° en X minutos)', 
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (opcionTiempo === ui.Button.CANCEL) return;
  
  const tipoVerificacion = ui.alert(
    'üîÑ Tipo de Verificaci√≥n', 
    'YES = 24 horas (verifica todo el d√≠a)\n' +
    'NO = Solo horario laboral (8 AM - 6 PM)', 
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (tipoVerificacion === ui.Button.CANCEL) return;
  
  const respuestaIntervalo = ui.prompt(
    '‚è±Ô∏è Intervalo de Verificaci√≥n', 
    'Cada cu√°ntos minutos debe verificar cambios:\n\n' +
    '‚Ä¢ M√≠nimo: 1 minuto\n' +
    '‚Ä¢ M√°ximo: 30 minutos\n' +
    '‚Ä¢ Recomendado: 5 minutos\n\n' +
    'Ingresa el n√∫mero:', 
    ui.ButtonSet.OK_CANCEL
  );
  
  if (respuestaIntervalo.getSelectedButton() !== ui.Button.OK) return;
  
  const minutos = parseInt(respuestaIntervalo.getResponseText().trim());
  
  if (isNaN(minutos) || minutos < 1 || minutos > 30) {
    showAlert('‚ùå Error', 'El intervalo debe ser entre 1 y 30 minutos');
    return;
  }
  
  try {
    // Eliminar todos los triggers existentes
    ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    if (opcionTiempo === ui.Button.YES) {
      const tiempoReporte = ui.prompt(
        '‚è∞ Hora del Reporte Diario', 
        'Formatos aceptados:\n' +
        '‚Ä¢ 7 (7:00 AM)\n' +
        '‚Ä¢ 7:30 (7:30 AM)\n' +
        '‚Ä¢ 15:45 (3:45 PM)\n\n' +
        'Ingresa la hora:', 
        ui.ButtonSet.OK_CANCEL
      ).getResponseText().trim();
      
      if (!tiempoReporte) { 
        showAlert('‚ùå Error', 'Debe ingresar un horario'); 
        return; 
      }
      
      let hora, minutosReporte = 0;
      if (tiempoReporte.includes(':') || tiempoReporte.includes('-')) {
        const partes = tiempoReporte.split(/[:-]/).map(p => parseInt(p.trim()));
        hora = partes[0]; 
        minutosReporte = partes[1] || 0;
      } else { 
        hora = parseInt(tiempoReporte); 
      }
      
      if (isNaN(hora) || hora < 0 || hora > 23 || isNaN(minutosReporte) || minutosReporte < 0 || minutosReporte > 59) {
        showAlert('‚ùå Error', 'Horario inv√°lido'); 
        return;
      }
      
      ScriptApp.newTrigger('reporteDiarioConManejo')
        .timeBased()
        .atHour(hora)
        .nearMinute(minutosReporte)
        .everyDays(1)
        .inTimezone("America/Bogota")
        .create();
      
      const horaFormateada = `${hora.toString().padStart(2, '0')}:${minutosReporte.toString().padStart(2, '0')}`;
      
      showAlert('‚úÖ Sistema Configurado', 
        `Configuraci√≥n guardada:\n\n` +
        `üìÖ Reporte diario: ${horaFormateada}\n` +
        `‚è±Ô∏è Verificaci√≥n: cada ${minutos} min\n` +
        `üïê Horario: ${tipoVerificacion === ui.Button.YES ? '24 horas' : '8 AM - 6 PM'}\n` +
        `üåé Zona: America/Bogota`);
        
    } else {
      const minutosEspera = parseInt(ui.prompt(
        'üß™ Prueba en X Minutos', 
        'El reporte se ejecutar√° en cu√°ntos minutos (1-59):', 
        ui.ButtonSet.OK_CANCEL
      ).getResponseText());
      
      if (isNaN(minutosEspera) || minutosEspera < 1 || minutosEspera > 59) { 
        showAlert('‚ùå Error', 'Minutos inv√°lidos'); 
        return; 
      }
      
      const ahora = new Date();
      ahora.setMinutes(ahora.getMinutes() + minutosEspera);
      
      ScriptApp.newTrigger('reporteDiarioConManejo')
        .timeBased()
        .at(ahora)
        .create();
      
      showAlert('‚úÖ Prueba Configurada', 
        `Ejecuci√≥n programada:\n\n` +
        `‚è∞ En ${minutosEspera} minutos\n` +
        `üìç Hora: ${formatDate(ahora, "HH:mm")}\n` +
        `‚è±Ô∏è Verificaci√≥n: cada ${minutos} min\n` +
        `\nEsto es una prueba √∫nica`);
    }
    
    // Crear trigger de verificaci√≥n
    const funcionVerificacion = tipoVerificacion === ui.Button.YES ? 
      'verificarCambios' : 'verificarCambiosHorarioLaboral';
    
    ScriptApp.newTrigger(funcionVerificacion)
      .timeBased()
      .everyMinutes(minutos)
      .create();
    
    registrarError("Configuraci√≥n", "Triggers configurados", 
      `Intervalo: ${minutos} min, Tipo: ${tipoVerificacion === ui.Button.YES ? '24h' : 'laboral'}`);
        
  } catch (e) {
    registrarError("Configuraci√≥n", "Error al configurar triggers", e.message);
    showAlert('‚ùå Error', 'Error: ' + e.message);
  }
}

function reporteDiarioConManejo() {
  try {
    Logger.log("üìä Iniciando reporte diario: " + new Date());
    registrarError("Reporte Diario", "Inicio", formatDate(new Date(), "HH:mm:ss"));
    actualizarYEnviarOrdenesCredito(true);
    registrarError("Reporte Diario", "Completado", formatDate(new Date(), "HH:mm:ss"));
  } catch (e) {
    Logger.log("‚ùå Error en reporte: " + e.message);
    registrarError("Reporte Diario", "Error", e.message);
  }
}

function verificarCambios() {
  try { actualizarYEnviarOrdenesCredito(false); } 
  catch (e) { registrarError("Verificar Cambios", "Error", e.message); }
}

function verificarCambiosHorarioLaboral() {
  const hora = new Date().getHours();
  if (hora >= 8 && hora < 18) verificarCambios();
}

const reporteDiario = () => reporteDiarioConManejo();

function verTriggersActivos() {
  const triggers = ScriptApp.getProjectTriggers();
  const zona = Session.getScriptTimeZone();
  const horaActual = formatDate(new Date(), "HH:mm:ss");
  
  let info = `üåé Zona horaria: ${zona}\n‚è∞ Hora actual: ${horaActual}\n\nüìÖ TRIGGERS ACTIVOS:\n\n`;
  
  if (triggers.length === 0) {
    info += '‚ùå No hay triggers configurados\n\nVe a: ‚öôÔ∏è Configurar Triggers';
  } else {
    triggers.forEach((t, i) => {
      const handler = t.getHandlerFunction();
      info += `${i + 1}. ${handler}\n`;
    });
  }
  
  showAlert('üìÖ Triggers Activos', info);
}

function detenerTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
  registrarError("Sistema", "Triggers detenidos", `Total: ${triggers.length}`);
  showAlert('üõë Triggers Detenidos', `Se eliminaron ${triggers.length} triggers`);
}

// ================== FUNCI√ìN PRINCIPAL ==================
function actualizarYEnviarOrdenesCredito(esReporteDiario = true) {
  const inicioEjecucion = new Date();
  Logger.log(`üîÑ Iniciando actualizaci√≥n - Reporte diario: ${esReporteDiario}`);
  
  try {
    const credenciales = getCredenciales();
    if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
      const error = 'Faltan credenciales de base de datos';
      registrarError("Credenciales", error);
      showAlert('‚ùå Error de Credenciales', 
        `${error}\n\nVe a: üîê Seguridad ‚Üí ‚úèÔ∏è Actualizar Credencial`);
      return;
    }
    
    const sheets = {};
    Object.entries(CONFIG.HOJAS).forEach(([key, config]) => {
      if (key !== 'contactos' && key !== 'errores') {
        sheets[key] = getSheet(config.nombre, config.headers);
      }
    });
    
    if (esReporteDiario) {
      Logger.log("üóëÔ∏è Limpiando historiales antiguos...");
      limpiarHistorialAntiguo(sheets.logs);
      limpiarControlEnviosAntiguo(sheets.control);
    }
    
    sheets.ordenes.clear();
    sheets.ordenes.getRange(1, 1, 1, CONFIG.HOJAS.ordenes.headers.length)
      .setValues([CONFIG.HOJAS.ordenes.headers]);
    
    const controlData = {}, hoy = formatDate(new Date());
    
    if (sheets.control.getLastRow() > 1) {
      const datos = sheets.control.getDataRange().getValues();
      for (let i = 1; i < datos.length; i++) {
        const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = datos[i];
        controlData[orden] = {
          estado, fechaEnvio, horaEnvio, tipoNotificacion,
          enviadoHoyRetenida: (fechaEnvio === hoy) ? enviadoHoyRetenida : "NO",
          enviadoHoyLiberada: (fechaEnvio === hoy) ? enviadoHoyLiberada : "NO",
          cliente, zona, fila: i + 1
        };
      }
    }
    
    let conn;
    try {
      conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
      
      const ordenesRetenidasActuales = new Map();
      const ordenesLiberadasActuales = new Map();
      
      procesarOrdenesRetenidas(conn, sheets, ordenesRetenidasActuales);
      procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales);
      
      const ordenesParaEnviar = prepararOrdenesParaEnvio(
        ordenesRetenidasActuales, 
        ordenesLiberadasActuales, 
        controlData, 
        esReporteDiario
      );
      
      Logger.log(`üì§ √ìrdenes a enviar: ${ordenesParaEnviar.length}`);
      
      enviarNotificaciones(ordenesParaEnviar, sheets, controlData, hoy, formatDate(new Date(), "HH:mm:ss"));
      
      const duracion = (new Date() - inicioEjecucion) / 1000;
      Logger.log(`‚úÖ Ejecuci√≥n completada en ${duracion} segundos`);
      
    } catch (e) {
      Logger.log(`‚ùå ERROR en procesamiento: ${e.message}`);
      registrarError("Procesamiento", e.message, e.stack);
      throw e;
    } finally {
      if (conn) conn.close();
    }
    
  } catch (e) {
    Logger.log(`‚ùå ERROR GENERAL: ${e.message}`);
    registrarError("Sistema", "Error general", e.message);
    throw e;
  }
}

function procesarOrdenesRetenidas(conn, sheets, ordenesRetenidasActuales) {
  const query = `
    SELECT 
      d.OrderHed_OrderNum, 
      CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha, 
      d.Zona, 
      d.Customer_Name, 
      d.ObservacionesRetencionCredito 
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK) 
    WHERE d.CreditoRetenido = 1 
      AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil' 
      AND (d.CreditOverride IS NULL OR d.CreditOverride = 0) 
    ORDER BY d.OrderHed_OrderNum DESC
  `;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  const filasOrdenes = [];
  const ordenesVistas = new Set();
  
  while (results.next()) {
    const orden = results.getString("OrderHed_OrderNum");
    if (ordenesVistas.has(orden)) continue;
    ordenesVistas.add(orden);
    
    const datos = { 
      zona: results.getString("Zona"), 
      cliente: results.getString("Customer_Name"), 
      fecha: procesarFecha(results.getString("Fecha")), 
      observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase() 
    };
    
    filasOrdenes.push([
      datos.zona, 
      datos.cliente, 
      orden, 
      datos.fecha, 
      `${orden}: ${datos.observacion}`, 
      "RETENIDA", 
      "CR√âDITO"
    ]);
    
    ordenesRetenidasActuales.set(orden, datos);
  }
  
  stmt.close();
  
  if (filasOrdenes.length > 0) {
    sheets.ordenes.getRange(2, 1, filasOrdenes.length, CONFIG.HOJAS.ordenes.headers.length)
      .setValues(filasOrdenes);
  }
  
  Logger.log(`‚úÖ √ìrdenes retenidas procesadas: ${ordenesRetenidasActuales.size}`);
}

function procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales) {
  const query = `
    SELECT 
      d.OrderHed_OrderNum, 
      d.Zona, 
      d.Customer_Name, 
      CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha, 
      CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS HoraLiberacionCredito, 
      oh.CreditOverrideUserID, 
      u.Name, 
      d.ObservacionesRetencionCredito 
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK) 
    JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
      ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company 
    LEFT JOIN EpicorTrain10.dbo.UserFile u WITH (NOLOCK) 
      ON oh.CreditOverrideUserID = u.DcdUserID 
    WHERE d.CreditoRetenido = 0 
      AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil' 
      AND oh.CreditOverride = 1 
      AND d.FechaLiberacionCredito IS NOT NULL 
      AND d.FechaLiberacionCredito >= DATEADD(day, -1, GETDATE()) 
    ORDER BY d.FechaLiberacionCredito DESC
  `;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  
  while (results.next()) {
    const ordenNum = results.getString("OrderHed_OrderNum");
    const datosLiberacion = { 
      zona: results.getString("Zona"), 
      cliente: results.getString("Customer_Name"), 
      fecha: procesarFecha(results.getString("Fecha") || ""), 
      hora: results.getString("HoraLiberacionCredito") || "", 
      observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase() 
    };
    ordenesLiberadasActuales.set(ordenNum, datosLiberacion);
  }
  
  stmt.close();
  Logger.log(`‚úÖ √ìrdenes liberadas procesadas: ${ordenesLiberadasActuales.size}`);
}

function prepararOrdenesParaEnvio(ordenesRetenidasActuales, ordenesLiberadasActuales, controlData, esReporteDiario) {
  const ordenesParaEnviar = [];
  const hoy = formatDate(new Date());
  
  // Procesar retenciones
  ordenesRetenidasActuales.forEach((datos, orden) => {
    const control = controlData[orden];
    let debeEnviar = false, tipo = '';
    
    if (!control) { 
      debeEnviar = true; 
      tipo = 'Nueva orden retenida'; 
    } else if (control.estado === 'LIBERADA' && control.enviadoHoyRetenida === "NO") { 
      debeEnviar = true; 
      tipo = 'Orden volvi√≥ a retenci√≥n'; 
    } else if (esReporteDiario && control.enviadoHoyRetenida === "NO") {
      if (control.fechaEnvio !== hoy) { 
        debeEnviar = true; 
        tipo = 'Reporte diario'; 
      }
    }
    
    if (debeEnviar) {
      ordenesParaEnviar.push({ orden, tipo, datos, esLiberada: false });
    }
  });
  
  // Procesar liberaciones
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    const control = controlData[orden];
    if ((control && control.estado === 'RETENIDA' && control.enviadoHoyLiberada === "NO") || !control) {
      ordenesParaEnviar.push({ 
        orden, 
        tipo: 'Orden liberada', 
        datos: datosLiberacion, 
        esLiberada: true 
      });
    }
  });
  
  // Registrar liberaciones en control
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    if (!controlData[orden]) {
      controlData[orden] = { 
        estado: 'LIBERADA', 
        fechaEnvio: hoy, 
        horaEnvio: formatDate(new Date(), "HH:mm:ss"), 
        tipoNotificaci√≥n: 'Orden liberada', 
        enviadoHoyRetenida: "NO", 
        enviadoHoyLiberada: "NO", 
        cliente: datosLiberacion.cliente, 
        zona: datosLiberacion.zona, 
        fila: null 
      };
    }
  });
  
  return ordenesParaEnviar;
}

// ‚≠ê‚≠ê‚≠ê FUNCI√ìN ACTUALIZADA - AGRUPA TODAS LAS √ìRDENES POR ZONA ‚≠ê‚≠ê‚≠ê
function enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  if (ordenesParaEnviar.length === 0) {
    Logger.log("‚ÑπÔ∏è No hay √≥rdenes para enviar");
    return;
  }
  
  const credenciales = getCredenciales();
  if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
    const error = 'Faltan credenciales de API';
    registrarError("API", error);
    showAlert('‚ùå Error', error);
    return;
  }
  
  // ‚≠ê OBTENER CONFIGURACI√ìN DE COPIAS
  const props = PropertiesService.getScriptProperties();
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numerosCopiaTexto = props.getProperty('NUMEROS_COPIA');
  const zonasCopia = props.getProperty('ZONAS_COPIA');
  
  let numerosCopiasArray = [];
  if (copiaActiva && numerosCopiaTexto) {
    numerosCopiasArray = numerosCopiaTexto.split(',').map(n => n.trim()).filter(n => n.length >= 10);
  }
  
  let zonasPermitidasCopia = null;
  if (copiaActiva && numerosCopiaTexto && zonasCopia && zonasCopia !== 'TODAS') {
    zonasPermitidasCopia = new Set(zonasCopia.split(','));
  }
  
  const contactos = cargarContactosZonas();
  const actualizacionesControl = [];
  
  // ‚≠ê‚≠ê CAMBIO CR√çTICO: AGRUPAR POR ZONA Y TIPO, NO POR CLIENTE ‚≠ê‚≠ê
  const ordenesPorZona = {};
  ordenesParaEnviar.forEach(({ orden, tipo, datos, esLiberada }) => {
    // Clave solo por zona y si es liberada o retenida
    const key = `${datos.zona}_${esLiberada}`;
    
    if (!ordenesPorZona[key]) {
      ordenesPorZona[key] = {
        zona: datos.zona,
        esLiberada: esLiberada,
        tipo: tipo,
        detallesOrdenes: []  // Array para guardar detalles de cada orden
      };
    }
    
    // Agregar detalles de esta orden
    ordenesPorZona[key].detallesOrdenes.push({
      orden: orden,
      cliente: datos.cliente,
      fecha: datos.fecha,
      hora: datos.hora || "",
      observacion: datos.observacion
    });
  });
  
  // Enviar notificaciones agrupadas por zona
  Object.values(ordenesPorZona).forEach(({ zona, esLiberada, tipo, detallesOrdenes }) => {
    const numeroWhatsApp = contactos.zonaANumero[zona] || "3182260739";
    const representante = contactos.zonaANombre[zona] || "Representante sin asignar";
    const telefono = "57" + numeroWhatsApp;
    const representanteCorto = formatearNombreCorto(representante);
    const zonaNormalizada = normalizarNombreZona(zona);
    
    // ‚≠ê‚≠ê PREPARACI√ìN DE DATOS MEJORADA PARA MAYOR CLARIDAD ‚≠ê‚≠ê
    
    // 1. CONSOLIDAR √ìRDENES
    const todasLasOrdenes = detallesOrdenes.map(d => d.orden);
    const cantidadOrdenes = todasLasOrdenes.length;
    const listaOrdenes = todasLasOrdenes.join(', ');
    
    // 2. CREAR RESUMEN DE √ìRDENES M√ÅS CLARO
    let resumenOrdenes = "";
    if (cantidadOrdenes === 1) {
      resumenOrdenes = `Orden ${todasLasOrdenes[0]}`;
    } else if (cantidadOrdenes <= 5) {
      resumenOrdenes = `${cantidadOrdenes} √≥rdenes: ${listaOrdenes}`;
    } else {
      // Si hay muchas √≥rdenes, abreviar la lista para que no sea muy larga en el mensaje
      resumenOrdenes = `${cantidadOrdenes} √≥rdenes: ${todasLasOrdenes.slice(0, 5).join(', ')}... (+${cantidadOrdenes - 5} m√°s)`;
    }
    
    // 3. CONSOLIDAR CLIENTES - MOSTRAR TODOS LOS NOMBRES
    const clientesUnicos = [...new Set(detallesOrdenes.map(d => normalizarCliente(d.cliente)))];
    
    // ‚≠ê MOSTRAR TODOS LOS CLIENTES, SIN IMPORTAR CU√ÅNTOS SEAN
    const resumenClientes = clientesUnicos.join(', ');
    
    // 4. CONSOLIDAR OBSERVACIONES DE FORMA M√ÅS CLARA
    const observacionesUnicas = [...new Set(detallesOrdenes
      .map(d => d.observacion)
      .filter(obs => obs && obs !== "SIN OBSERVACIONES"))];
    
    let resumenObservaciones = "";
    if (observacionesUnicas.length === 0) {
      resumenObservaciones = "Sin observaciones espec√≠ficas";
    } else if (observacionesUnicas.length === 1) {
      resumenObservaciones = normalizarObservacion(observacionesUnicas[0]);
    } else if (observacionesUnicas.length <= 3) {
      // Si hay 2 o 3 observaciones, mostrar todas
      resumenObservaciones = observacionesUnicas
        .map(obs => normalizarObservacion(obs))
        .join(' | ');
    } else {
      // Si hay m√°s de 3 observaciones diferentes, mostrar las primeras 3 y indicar que hay m√°s
      resumenObservaciones = observacionesUnicas
        .slice(0, 3)
        .map(obs => normalizarObservacion(obs))
        .join(' | ') + ` (+${observacionesUnicas.length - 3} m√°s)`;
    }
    
    // 5. USAR LA FECHA/HORA M√ÅS RECIENTE
    const fechaMasReciente = detallesOrdenes[0].fecha;
    const horaMasReciente = detallesOrdenes[0].hora;
    
    // 6. CREAR TEXTO DE ESTADO M√ÅS CLARO
    const textoEstado = esLiberada ? 
      `${cantidadOrdenes} ${cantidadOrdenes === 1 ? 'orden liberada' : '√≥rdenes liberadas'}` :
      `${cantidadOrdenes} ${cantidadOrdenes === 1 ? 'orden retenida' : '√≥rdenes retenidas'}`;
    
    // ‚≠ê‚≠ê PAR√ÅMETROS REORGANIZADOS PARA MAYOR CLARIDAD ‚≠ê‚≠ê
    const params = esLiberada ? 
      { 
        "1": representanteCorto,          
        "2": resumenOrdenes,  // Ej: "3 √≥rdenes: 134612, 134610, 134608"
        "3": `${procesarFecha(fechaMasReciente)} ${horaMasReciente}`.trim(),
        "4": resumenClientes,  // TODOS los clientes: "Cliente A, Cliente B, Cliente C, Cliente D..."
        "5": zonaNormalizada
      } : 
      { 
        "1": representanteCorto,
        "2": resumenOrdenes,  // Ej: "3 √≥rdenes: 134612, 134610, 134608"
        "3": procesarFecha(fechaMasReciente),
        "4": resumenClientes,  // TODOS los clientes: "Cliente A, Cliente B, Cliente C, Cliente D..."
        "5": zonaNormalizada,
        "6": resumenObservaciones  // Ej: "Cr√©dito superado" o "M√∫ltiples motivos: ..."
      };
    
    Logger.log(`üì® Enviando mensaje consolidado a ${representante} (${zona})`);
    Logger.log(`   üìä Resumen: ${textoEstado}`);
    Logger.log(`   üìã √ìrdenes: ${listaOrdenes}`);
    Logger.log(`   üè¢ Clientes: ${resumenClientes}`);
    Logger.log(`   üìù Observaciones: ${resumenObservaciones}`);
    
    // ‚≠ê ENVIAR UN √öNICO MENSAJE AL REPRESENTANTE
    const enviado = enviarNotificacionConReintentos(credenciales, telefono, esLiberada, params, listaOrdenes, tipo);
    
    if (enviado) {
      // Registrar todas las √≥rdenes como enviadas
      detallesOrdenes.forEach(({ orden, cliente }) => {
        const controlExistente = controlData[orden];
        actualizacionesControl.push({ 
          orden, 
          estado: esLiberada ? 'LIBERADA' : 'RETENIDA', 
          fechaEnvio: fechaHoy, 
          horaEnvio: horaActual, 
          tipoNotificacion: tipo, 
          enviadoHoyRetenida: !esLiberada ? "SI" : (controlExistente?.enviadoHoyRetenida || "NO"), 
          enviadoHoyLiberada: esLiberada ? "SI" : (controlExistente?.enviadoHoyLiberada || "NO"), 
          cliente: cliente, 
          zona: zona, 
          fila: controlExistente?.fila 
        });
      });
      
      // ‚≠ê ENVIAR COPIAS SI EST√Å ACTIVO (tambi√©n consolidadas)
      if (copiaActiva && numerosCopiasArray.length > 0) {
        const debeEnviarCopia = !zonasPermitidasCopia || zonasPermitidasCopia.has(zona);
        
        if (debeEnviarCopia) {
          numerosCopiasArray.forEach((numeroCopia, index) => {
            if (index > 0) Utilities.sleep(500);
            
            enviarNotificacionConReintentos(
              credenciales, 
              "57" + numeroCopia, 
              esLiberada, 
              params, 
              listaOrdenes, 
              `copia_${index + 1}_${tipo}`
            );
          });
          
          Logger.log(`‚úÖ Copias enviadas a ${numerosCopiasArray.length} n√∫meros para ${cantidadOrdenes} √≥rdenes de zona ${zona}`);
        }
      }
    }
    
    Utilities.sleep(1000);
  });
  
  actualizarControlEnBatch(sheets.control, actualizacionesControl);
  aplicarFormatoCondicional(sheets.control);
}

// ‚≠ê‚≠ê‚≠ê FUNCI√ìN ACTUALIZADA CON NUEVOS NOMBRES DE PLANTILLAS ‚≠ê‚≠ê‚≠ê
function enviarNotificacionConReintentos(credenciales, telefono, esLiberada, params, orden, tipo) {
  for (let intento = 0; intento < 3; intento++) {
    try {
      const payload = { 
        chatPlatform: "whatsapp", 
        chatChannelNumber: credenciales.API.channel, 
        platformContactId: telefono, 
        // ‚≠ê‚≠ê NOMBRES DE PLANTILLAS ACTUALIZADOS SEG√öN IMAGEN 2 ‚≠ê‚≠ê
        ruleNameOrId: esLiberada ? "orden_liberada_c" : "orden_retenida_c",  
        params, 
        clientPayload: `orden_${tipo}_${orden}_${Date.now()}` 
      };
      
      const response = UrlFetchApp.fetch(credenciales.API.url, { 
        method: "post", 
        contentType: "application/json", 
        headers: { "access-token": credenciales.API.token }, 
        payload: JSON.stringify(payload), 
        muteHttpExceptions: true 
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        Logger.log(`‚úÖ Notificaci√≥n enviada: ${orden} (${tipo})`);
        return true;
      }
      
      Logger.log(`‚ö†Ô∏è Intento ${intento + 1} fallido: ${orden}`);
      
    } catch (e) {
      Logger.log(`‚ùå Error intento ${intento + 1}: ${e.message}`);
      if (intento === 2) {
        registrarError("Env√≠o WhatsApp", `Fallo en orden ${orden}`, e.message);
      }
    }
    
    if (intento < 2) Utilities.sleep(2000);
  }
  
  return false;
}

function actualizarControlEnBatch(hojaControl, actualizaciones) {
  if (actualizaciones.length === 0) return;
  
  try {
    const actualizacionesExistentes = [];
    const nuevasFilas = [];
    
    actualizaciones.forEach(act => {
      const valores = [
        act.orden, act.estado, act.fechaEnvio, act.horaEnvio, 
        act.tipoNotificacion, act.enviadoHoyRetenida, act.enviadoHoyLiberada, 
        act.cliente, act.zona
      ];
      
      if (act.fila) {
        actualizacionesExistentes.push({ fila: act.fila, valores });
      } else {
        nuevasFilas.push(valores);
      }
    });
    
    actualizacionesExistentes.forEach(({ fila, valores }) => {
      hojaControl.getRange(fila, 1, 1, 9).setValues([valores]);
    });
    
    if (nuevasFilas.length > 0) {
      const ultimaFila = hojaControl.getLastRow();
      hojaControl.getRange(ultimaFila + 1, 1, nuevasFilas.length, 9).setValues(nuevasFilas);
      Logger.log(`‚úÖ Registros agregados a control: ${nuevasFilas.length}`);
    }
    
  } catch (e) {
    Logger.log(`‚ùå Error actualizando control: ${e.message}`);
    registrarError("Control", "Error al actualizar", e.message);
  }
}

function aplicarFormatoCondicional(hojaControl) {
  if (hojaControl.getLastRow() > 1) {
    const rangoEstado = hojaControl.getRange(2, 2, hojaControl.getLastRow() - 1, 1);
    hojaControl.clearConditionalFormatRules();
    
    const reglas = [
      { estado: 'RETENIDA', background: '#ffcdd2', fontColor: '#c62828' }, 
      { estado: 'LIBERADA', background: '#c8e6c9', fontColor: '#2e7d32' }
    ].map(({ estado, background, fontColor }) => 
      SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(estado)
        .setBackground(background)
        .setFontColor(fontColor)
        .setRanges([rangoEstado])
        .build()
    );
    
    hojaControl.setConditionalFormatRules(reglas);
    hojaControl.autoResizeColumns(1, 9);
  }
}

// ================== SISTEMA DE COPIAS ==================
function configurarCopiasReportes() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numerosCopiaTexto = props.getProperty('NUMEROS_COPIA') || '';
  const zonasCopia = props.getProperty('ZONAS_COPIA') || '';
  
  const numerosArray = numerosCopiaTexto ? numerosCopiaTexto.split(',') : [];
  const cantidadNumeros = numerosArray.length;
  
  let mensajeActual = `üìä ESTADO ACTUAL DE COPIAS:\n\n`;
  mensajeActual += `Estado: ${copiaActiva ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n\n`;
  
  if (cantidadNumeros > 0) {
    mensajeActual += `üì± N√∫meros configurados: ${cantidadNumeros}\n`;
    numerosArray.forEach((num, i) => {
      mensajeActual += `   ${i + 1}. ${num.trim()}\n`;
    });
  } else {
    mensajeActual += `üì± N√∫meros: Ninguno configurado\n`;
  }
  
  mensajeActual += `\nüåé Zonas: ${zonasCopia || 'TODAS'}\n\n`;
  mensajeActual += `¬øQu√© deseas hacer?\n`;
  mensajeActual += `YES = Configurar/Actualizar\n`;
  mensajeActual += `NO = Desactivar copias`;
  
  const opcion = ui.alert('üì± Gesti√≥n de Copias', mensajeActual, ui.ButtonSet.YES_NO_CANCEL);
    
  if (opcion === ui.Button.CANCEL) return;
  
  if (opcion === ui.Button.NO) { 
    props.setProperty('COPIA_ACTIVA', 'NO'); 
    showAlert('‚úÖ Copias Desactivadas', 'Las copias han sido desactivadas.\nLos n√∫meros guardados se mantienen para uso futuro.'); 
    return; 
  }
  
  const respuestaNumeros = ui.prompt('üì± Configurar N√∫meros de WhatsApp', 
    'Ingresa los n√∫meros separados por comas\n\n' +
    '‚úÖ Ejemplo: 3182260739,3001234567,3109876543\n\n' +
    'M√°ximo: 10 n√∫meros', 
    ui.ButtonSet.OK_CANCEL);
    
  if (respuestaNumeros.getSelectedButton() !== ui.Button.OK) return;
  
  const numerosTexto = respuestaNumeros.getResponseText().trim();
  if (!numerosTexto) { 
    showAlert('‚ùå Error', 'Debes ingresar al menos un n√∫mero'); 
    return; 
  }
  
  const numerosValidados = numerosTexto.split(',')
    .map(num => num.trim().replace(/\D/g, ''))
    .filter(num => num.length >= 10);
  
  if (numerosValidados.length === 0) { 
    showAlert('‚ùå Error', 'No se encontraron n√∫meros v√°lidos'); 
    return; 
  }
  
  if (numerosValidados.length > 10) { 
    showAlert('‚ö†Ô∏è Advertencia', 'Solo se aceptan hasta 10 n√∫meros. Se tomar√°n los primeros 10.'); 
    numerosValidados.splice(10);
  }
  
  const contactos = cargarContactosZonas();
  const zonasDisponibles = Object.keys(contactos.zonaANumero).sort();
  const tipoSeleccion = ui.alert('üåé Selecci√≥n de Zonas', 
    'YES = Todas las zonas\nNO = Seleccionar zonas espec√≠ficas', 
    ui.ButtonSet.YES_NO_CANCEL);
    
  if (tipoSeleccion === ui.Button.CANCEL) return;
  
  const zonasSeleccionadas = tipoSeleccion === ui.Button.YES ? 
    'TODAS' : seleccionarZonasManual(zonasDisponibles).join(',');
    
  if (zonasSeleccionadas.length === 0 && tipoSeleccion !== ui.Button.YES) return;
  
  props.setProperty('COPIA_ACTIVA', 'SI');
  props.setProperty('NUMEROS_COPIA', numerosValidados.join(','));
  props.setProperty('ZONAS_COPIA', zonasSeleccionadas);
  
  let mensajeConfirmacion = '‚úÖ COPIAS CONFIGURADAS\n\n';
  mensajeConfirmacion += `üì± N√∫meros registrados: ${numerosValidados.length}\n\n`;
  numerosValidados.forEach((num, i) => {
    mensajeConfirmacion += `   ${i + 1}. ${num}\n`;
  });
  mensajeConfirmacion += `\nüåé Zonas: ${zonasSeleccionadas === 'TODAS' ? 'TODAS' : zonasSeleccionadas.split(',').length + ' seleccionadas'}\n`;
  mensajeConfirmacion += `\n‚úâÔ∏è Cada notificaci√≥n se enviar√° a estos ${numerosValidados.length} n√∫mero${numerosValidados.length > 1 ? 's' : ''}.`;
  
  showAlert('‚úÖ Configuraci√≥n Guardada', mensajeConfirmacion);
}

function seleccionarZonasManual(zonasDisponibles) {
  const ui = SpreadsheetApp.getUi();
  const mensaje = zonasDisponibles.map((zona, i) => `${i + 1}. ${zona}`).join('\n') + 
    '\n\nIngresa n√∫meros separados por comas (ej: 1,3,5-8)\no escribe TODAS';
    
  const response = ui.prompt('üåé Selecci√≥n de Zonas', mensaje, ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK) return [];
  
  const seleccion = response.getResponseText().trim().toUpperCase();
  if (seleccion === 'TODAS') return zonasDisponibles;
  if (!seleccion) return [];
  
  const zonasSeleccionadas = [];
  const partes = seleccion.split(',');
  
  partes.forEach(parte => {
    parte = parte.trim();
    if (parte.includes('-')) {
      const [inicio, fin] = parte.split('-').map(n => parseInt(n));
      if (!isNaN(inicio) && !isNaN(fin)) {
        for (let i = inicio; i <= fin && i <= zonasDisponibles.length; i++) {
          if (zonasDisponibles[i - 1]) zonasSeleccionadas.push(zonasDisponibles[i - 1]);
        }
      }
    } else {
      const num = parseInt(parte);
      if (!isNaN(num) && zonasDisponibles[num - 1]) {
        zonasSeleccionadas.push(zonasDisponibles[num - 1]);
      }
    }
  });
  
  return [...new Set(zonasSeleccionadas)];
}

function verConfiguracionCopias() {
  const props = PropertiesService.getScriptProperties();
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numerosCopiaTexto = props.getProperty('NUMEROS_COPIA') || '';
  const zonasCopia = props.getProperty('ZONAS_COPIA') || '';
  
  let mensaje = 'üìã CONFIGURACI√ìN DE COPIAS\n\n';
  mensaje += `Estado: ${copiaActiva ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n\n`;
  
  if (numerosCopiaTexto) {
    const numerosArray = numerosCopiaTexto.split(',').map(n => n.trim()).filter(n => n.length > 0);
    mensaje += `üì± N√∫meros configurados: ${numerosArray.length}\n\n`;
    numerosArray.forEach((num, i) => {
      mensaje += `   ${i + 1}. ${num}\n`;
    });
  } else {
    mensaje += 'üì± N√∫meros: Ninguno configurado\n';
  }
  
  mensaje += `\nüåé Zonas activas:\n`;
  if (zonasCopia && zonasCopia !== 'TODAS') {
    const zonasArray = zonasCopia.split(',').map(z => z.trim()).filter(z => z.length > 0);
    mensaje += `   Total: ${zonasArray.length} zona${zonasArray.length > 1 ? 's' : ''}\n\n`;
    
    const zonasAMostrar = zonasArray.slice(0, 5);
    zonasAMostrar.forEach((zona, i) => {
      mensaje += `   ${i + 1}. ${zona}\n`;
    });
    
    if (zonasArray.length > 5) {
      mensaje += `   ... y ${zonasArray.length - 5} m√°s`;
    }
  } else {
    mensaje += '   TODAS LAS ZONAS';
  }
  
  if (copiaActiva && numerosCopiaTexto) {
    const numeros = numerosCopiaTexto.split(',').filter(n => n.trim().length > 0).length;
    mensaje += `\n\n‚úâÔ∏è Cada notificaci√≥n se replica a ${numeros} n√∫mero${numeros > 1 ? 's' : ''}.`;
  }
  
  showAlert('üìã Configuraci√≥n de Copias', mensaje);
}

// ================== FUNCIONES DE PRUEBA ==================
function probarNotificacionRetenidaPersonalizada() {
  const ui = SpreadsheetApp.getUi();
  
  // Paso 1: Ingresar n√∫mero de destino
  const respNumero = ui.prompt('üì± N√∫mero de WhatsApp', 
    'Ingresa el n√∫mero donde quieres recibir la prueba\n' +
    '(sin +57, solo 10 d√≠gitos)\n\n' +
    'Ejemplo: 3182260739', 
    ui.ButtonSet.OK_CANCEL);
  
  if (respNumero.getSelectedButton() !== ui.Button.OK) return;
  
  const numeroPrueba = respNumero.getResponseText().trim().replace(/\D/g, '');
  if (!numeroPrueba || numeroPrueba.length < 10) {
    showAlert('‚ùå Error', 'N√∫mero inv√°lido. Debe tener al menos 10 d√≠gitos.');
    return;
  }
  
  const telefono = "57" + numeroPrueba;
  const ordenNum = 'TEST-' + Date.now();
  
  const params = { 
    "1": "Sistema Prueba",
    "2": ordenNum,
    "3": formatDate(new Date()),
    "4": "Cliente de Prueba",
    "5": "Zona de Prueba",
    "6": "Prueba del sistema autom√°tico"
  };
  
  try {
    const credenciales = getCredenciales();
    if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
      showAlert('‚ùå Error', 
        'Faltan credenciales de API.\n\n' +
        'Configura: API_URL, API_TOKEN, API_CHANNEL\n\n' +
        'Ve a: üîê Seguridad ‚Üí ‚úèÔ∏è Actualizar Credencial');
      return;
    }
    
    const enviado = enviarNotificacionConReintentos(
      credenciales, telefono, false, params, ordenNum, 'prueba_rapida'
    );
    
    if (enviado) {
      showAlert('‚úÖ Prueba Enviada', 
        `Notificaci√≥n enviada exitosamente a:\n${numeroPrueba}\n\n` +
        `Orden de prueba: ${ordenNum}\n` +
        `Tipo: Retenci√≥n`);
    } else {
      showAlert('‚ùå Error al Enviar', 
        'No se pudo enviar despu√©s de 3 intentos.\n\n' +
        'Revisa:\n' +
        '‚Ä¢ Credenciales API correctas\n' +
        '‚Ä¢ Plantilla "orden_retenida_c" activa\n' +
        '‚Ä¢ Log de Errores para m√°s detalles');
    }
  } catch (e) {
    showAlert('‚ùå Error', `Error: ${e.message}`);
    registrarError("Prueba R√°pida", "Error en env√≠o", e.message);
  }
}

function pruebaNotificacionPersonalizada() {
  const ui = SpreadsheetApp.getUi();
  
  // Paso 1: Tipo de notificaci√≥n
  const tipoNotif = ui.alert('üß™ Prueba Personalizada', 
    'Selecciona el tipo de notificaci√≥n:\n\n' +
    'YES = Orden Retenida\n' +
    'NO = Orden Liberada', 
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (tipoNotif === ui.Button.CANCEL) return;
  
  const esLiberada = tipoNotif === ui.Button.NO;
  
  // Paso 2: N√∫mero de destino
  const respNumero = ui.prompt('üì± N√∫mero de Prueba', 
    'Ingresa el n√∫mero donde quieres recibir la prueba\n' +
    '(sin +57, solo 10 d√≠gitos)\n\n' +
    'Ejemplo: 3182260739', 
    ui.ButtonSet.OK_CANCEL);
  
  if (respNumero.getSelectedButton() !== ui.Button.OK) return;
  
  const numeroPrueba = respNumero.getResponseText().trim().replace(/\D/g, '');
  if (!numeroPrueba || numeroPrueba.length < 10) {
    showAlert('‚ùå Error', 'N√∫mero inv√°lido');
    return;
  }
  
  // Paso 3: N√∫mero de orden
  const respOrden = ui.prompt('üìã N√∫mero de Orden', 
    'Ingresa el n√∫mero de orden a probar\n' +
    '(debe existir en Epicor):', 
    ui.ButtonSet.OK_CANCEL);
  
  if (respOrden.getSelectedButton() !== ui.Button.OK) return;
  
  const ordenNum = respOrden.getResponseText().trim();
  if (!ordenNum) {
    showAlert('‚ùå Error', 'Debes ingresar un n√∫mero de orden');
    return;
  }
  
  showAlert('‚è≥ Buscando...', 'Consultando orden en Epicor...');
  
  let datosOrden = null;
  
  try {
    const credenciales = getCredenciales();
    if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
      showAlert('‚ùå Error', 'Faltan credenciales de base de datos');
      return;
    }
    
    const conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
    
    if (esLiberada) {
      const query = `
        SELECT TOP 1
          d.OrderHed_OrderNum, d.Zona, d.Customer_Name,
          CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha,
          CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS Hora,
          d.ObservacionesRetencionCredito
        FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
        JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
          ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
        WHERE d.OrderHed_OrderNum = '${ordenNum}'
          AND d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 AND oh.CreditOverride = 1
      `;
      
      const stmt = conn.createStatement();
      const results = stmt.executeQuery(query);
      
      if (results.next()) {
        datosOrden = {
          orden: results.getString("OrderHed_OrderNum"),
          zona: results.getString("Zona"),
          cliente: results.getString("Customer_Name"),
          fecha: procesarFecha(results.getString("Fecha") || ""),
          hora: results.getString("Hora") || "",
          observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
        };
      }
      stmt.close();
      
    } else {
      const query = `
        SELECT TOP 1
          d.OrderHed_OrderNum, CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha,
          d.Zona, d.Customer_Name, d.ObservacionesRetencionCredito
        FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
        WHERE d.OrderHed_OrderNum = '${ordenNum}'
          AND d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0
          AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
      `;
      
      const stmt = conn.createStatement();
      const results = stmt.executeQuery(query);
      
      if (results.next()) {
        datosOrden = {
          orden: results.getString("OrderHed_OrderNum"),
          zona: results.getString("Zona"),
          cliente: results.getString("Customer_Name"),
          fecha: procesarFecha(results.getString("Fecha")),
          observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
        };
      }
      stmt.close();
    }
    
    conn.close();
    
  } catch (e) {
    showAlert('‚ùå Error BD', `Error al consultar Epicor:\n${e.message}`);
    registrarError("Prueba Personalizada", "Error consultando BD", e.message);
    return;
  }
  
  if (!datosOrden) {
    showAlert('‚ùå No Encontrada', 
      `No se encontr√≥ la orden ${ordenNum} como ${esLiberada ? 'LIBERADA' : 'RETENIDA'}\n\n` +
      `Verifica:\n` +
      `‚Ä¢ N√∫mero de orden correcto\n` +
      `‚Ä¢ Estado de la orden en Epicor`);
    return;
  }
  
  const contactos = cargarContactosZonas();
  const representante = contactos.zonaANombre[datosOrden.zona] || "Representante sin asignar";
  
  const resumen = esLiberada ? 
    `üéØ PRUEBA DE LIBERACI√ìN\n\n` +
    `üì± Enviar a: ${numeroPrueba}\n` +
    `üë§ Representante: ${representante}\n` +
    `üìç Zona: ${datosOrden.zona}\n` +
    `üè¢ Cliente: ${datosOrden.cliente}\n` +
    `üìã Orden: ${datosOrden.orden}\n` +
    `üìÖ Fecha: ${datosOrden.fecha} ${datosOrden.hora || ''}\n\n` +
    `¬øEnviar prueba?` :
    `üéØ PRUEBA DE RETENCI√ìN\n\n` +
    `üì± Enviar a: ${numeroPrueba}\n` +
    `üë§ Representante: ${representante}\n` +
    `üìç Zona: ${datosOrden.zona}\n` +
    `üè¢ Cliente: ${datosOrden.cliente}\n` +
    `üìã Orden: ${datosOrden.orden}\n` +
    `üìù Observaci√≥n: ${datosOrden.observacion}\n\n` +
    `¬øEnviar prueba?`;
  
  if (ui.alert('‚úÖ Confirmar Env√≠o', resumen, ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  try {
    const credenciales = getCredenciales();
    const telefono = "57" + numeroPrueba;
    const representanteCorto = formatearNombreCorto(representante);
    
    const clienteNormalizado = normalizarCliente(datosOrden.cliente);
    const zonaNormalizada = normalizarNombreZona(datosOrden.zona);
    const observacionNormalizada = normalizarObservacion(datosOrden.observacion);
    
    // ‚≠ê‚≠ê PAR√ÅMETROS ACTUALIZADOS ‚≠ê‚≠ê
    const params = esLiberada ? 
      { 
        "1": representanteCorto,
        "2": datosOrden.orden,
        "3": `${datosOrden.fecha} ${datosOrden.hora || ""}`.trim(),
        "4": clienteNormalizado,
        "5": zonaNormalizada
      } : 
      { 
        "1": representanteCorto,
        "2": datosOrden.orden,
        "3": datosOrden.fecha,
        "4": clienteNormalizado,
        "5": zonaNormalizada,
        "6": observacionNormalizada
      };
    
    Logger.log(`üß™ Prueba personalizada - Enviando a ${telefono}`);
    Logger.log(`Par√°metros: ${JSON.stringify(params)}`);
    
    const enviado = enviarNotificacionConReintentos(
      credenciales, telefono, esLiberada, params, datosOrden.orden, 'prueba_personalizada'
    );
    
    if (enviado) {
      showAlert('‚úÖ Prueba Enviada', 
        `Notificaci√≥n enviada a: ${numeroPrueba}\n\n` +
        `Tipo: ${esLiberada ? 'Liberaci√≥n' : 'Retenci√≥n'}\n` +
        `Orden: ${datosOrden.orden}\n` +
        `Cliente: ${datosOrden.cliente}\n` +
        `Zona: ${datosOrden.zona}`);
    } else {
      showAlert('‚ùå Error al Enviar', 
        'No se pudo enviar despu√©s de 3 intentos.\n\n' +
        'Revisa:\n' +
        '‚Ä¢ Log de Errores\n' +
        '‚Ä¢ Credenciales API\n' +
        '‚Ä¢ Plantillas de WhatsApp activas');
    }
    
  } catch (e) {
    showAlert('‚ùå Error', `Error al enviar: ${e.message}`);
    registrarError("Prueba Personalizada", "Error en env√≠o", e.message);
    Logger.log(`Error en prueba personalizada: ${e.message}`);
  }
}

function probarSistemaCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('üß™ Prueba del Sistema', 
    'Se verificar√° todo el sistema.\n\n' +
    '¬øContinuar?', 
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const resultados = { 
    credenciales: '‚è≥', 
    baseDatos: '‚è≥', 
    hojas: '‚è≥', 
    contactos: '‚è≥', 
    zonaHoraria: '‚è≥',
    notificacion: '‚è≥'
  };
  
  // Test 1: Zona Horaria
  try { 
    const zona = Session.getScriptTimeZone(); 
    resultados.zonaHoraria = zona === 'America/Bogota' ? '‚úÖ' : `‚ö†Ô∏è ${zona}`; 
  } catch (e) { 
    resultados.zonaHoraria = '‚ùå'; 
  }
  
  // Test 2: Credenciales
  try { 
    const cred = getCredenciales(); 
    resultados.credenciales = (!cred.DB.url || !cred.DB.user || !cred.DB.pass || 
                                !cred.API.url || !cred.API.token || !cred.API.channel) ? '‚ùå' : '‚úÖ'; 
  } catch (e) { 
    resultados.credenciales = '‚ùå'; 
  }
  
  // Test 3: Base de Datos
  if (resultados.credenciales === '‚úÖ') {
    try { 
      const cred = getCredenciales(); 
      const conn = Jdbc.getConnection(cred.DB.url, cred.DB.user, cred.DB.pass); 
      const stmt = conn.createStatement(); 
      stmt.executeQuery("SELECT 1"); 
      stmt.close(); 
      conn.close(); 
      resultados.baseDatos = '‚úÖ'; 
    } catch (e) { 
      resultados.baseDatos = '‚ùå'; 
    }
  }
  
  // Test 4: Hojas
  try { 
    Object.values(CONFIG.HOJAS).forEach(config => getSheet(config.nombre, config.headers)); 
    resultados.hojas = '‚úÖ'; 
  } catch (e) { 
    resultados.hojas = '‚ùå'; 
  }
  
  // Test 5: Contactos
  try { 
    const contactos = cargarContactosZonas(); 
    resultados.contactos = Object.keys(contactos.zonaANumero).length > 0 ? '‚úÖ' : '‚ùå'; 
  } catch (e) { 
    resultados.contactos = '‚ùå'; 
  }
  
  // Test 6: Notificaci√≥n de prueba (solo si hay credenciales)
  if (ui.alert('Prueba de Notificaci√≥n', 
    '¬øEnviar notificaci√≥n de prueba?\n\n' +
    'Necesitar√°s ingresar un n√∫mero de WhatsApp.', 
    ui.ButtonSet.YES_NO) === ui.Button.YES && resultados.credenciales === '‚úÖ') {
    
    const respNumero = ui.prompt('üì± N√∫mero de Prueba', 
      'Ingresa el n√∫mero donde quieres recibir la prueba\n' +
      '(sin +57, solo 10 d√≠gitos):', 
      ui.ButtonSet.OK_CANCEL);
    
    if (respNumero.getSelectedButton() === ui.Button.OK) {
      const numeroPrueba = respNumero.getResponseText().trim().replace(/\D/g, '');
      
      if (numeroPrueba && numeroPrueba.length >= 10) {
        try { 
          const cred = getCredenciales();
          const enviado = enviarNotificacionConReintentos(
            cred, 
            "57" + numeroPrueba, 
            false, 
            { 
              "1": "Sistema",
              "2": "TEST-SISTEMA-" + Date.now(),
              "3": formatDate(new Date()),
              "4": "Cliente de Prueba",
              "5": "Zona de Prueba",
              "6": "Prueba autom√°tica del sistema"
            }, 
            'TEST', 
            'prueba_sistema'
          ); 
          resultados.notificacion = enviado ? '‚úÖ' : '‚ùå'; 
        } catch (e) { 
          resultados.notificacion = '‚ùå'; 
        }
      } else {
        resultados.notificacion = '‚ö†Ô∏è N√∫mero inv√°lido';
      }
    } else {
      resultados.notificacion = '‚è≠Ô∏è Omitido';
    }
  } else { 
    resultados.notificacion = '‚è≠Ô∏è Omitido'; 
  }
  
  const ok = Object.values(resultados).filter(r => r === '‚úÖ').length;
  const error = Object.values(resultados).filter(r => r === '‚ùå').length;
  const advertencia = Object.values(resultados).filter(r => r.includes('‚ö†Ô∏è')).length;
  
  showAlert('üß™ Resultado de la Prueba', 
    `RESUMEN: ${ok} OK, ${error} ERROR, ${advertencia} ADVERTENCIAS\n\n` +
    `Zona horaria: ${resultados.zonaHoraria}\n` +
    `Credenciales: ${resultados.credenciales}\n` +
    `Base de datos: ${resultados.baseDatos}\n` +
    `Hojas: ${resultados.hojas}\n` +
    `Contactos: ${resultados.contactos}\n` +
    `Notificaci√≥n: ${resultados.notificacion}\n\n` + 
    (error > 0 || advertencia > 0 ? 
      '‚ö†Ô∏è Revisar componentes con error/advertencia' : 
      '‚úÖ SISTEMA FUNCIONANDO CORRECTAMENTE'));
}

// ================== UTILIDADES ==================
function verLogErrores() {
  const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, null, false);
  if (!hojaErrores || hojaErrores.getLastRow() <= 1) { 
    showAlert('üìã Log de Errores', 'No hay errores registrados'); 
    return; 
  }
  
  const ultimos = Math.min(10, hojaErrores.getLastRow() - 1);
  const errores = hojaErrores.getRange(
    Math.max(2, hojaErrores.getLastRow() - ultimos + 1), 
    1, ultimos, 5
  ).getValues();
  
  const mensaje = errores.reverse().map(e => 
    `${e[0]} ${e[1]} - ${e[2]}: ${e[3].substring(0, 40)}...`
  ).join('\n');
  
  showAlert('üìã √öltimos Errores', mensaje || 'No hay errores');
}

function limpiarLogErrores() {
  const ui = SpreadsheetApp.getUi();
  if (ui.alert('üóëÔ∏è Limpiar Log', 
    '¬øEliminar todos los registros de error?', 
    ui.ButtonSet.YES_NO) === ui.Button.YES) {
    
    const hojaErrores = getSheet(CONFIG.HOJAS.errores.nombre, CONFIG.HOJAS.errores.headers);
    if (hojaErrores.getLastRow() > 1) {
      hojaErrores.deleteRows(2, hojaErrores.getLastRow() - 1);
    }
    showAlert('‚úÖ Log Limpiado', 'Registros de error eliminados');
  }
}

function verificarHorarioActual() {
  const ahora = new Date();
  const zona = Session.getScriptTimeZone();
  const horaLocal = formatDate(ahora, "HH:mm:ss");
  const fechaCompleta = formatDate(ahora, "dd/MM/yyyy HH:mm:ss");
  
  showAlert('üïê Horario del Sistema', 
    `üåé Zona horaria: ${zona}\n` +
    `‚è∞ Hora actual: ${horaLocal}\n` +
    `üìÖ Fecha completa: ${fechaCompleta}`);
}

// ================== MEN√ö ==================
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üîß Sistema de √ìrdenes')
    .addItem('üöÄ Configuraci√≥n Inicial', 'configuracionInicial')
    .addItem('üì• Cargar Zonas desde Epicor', 'cargarZonasDesdeEpicor')
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üîê Seguridad')
      .addItem('üëÅÔ∏è Ver Credenciales', 'verPropiedadesGuardadas')
      .addItem('‚úèÔ∏è Actualizar Credencial', 'actualizarCredencial')
      .addItem('üóëÔ∏è Eliminar Credencial', 'eliminarCredencial'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('‚öôÔ∏è Configurar Triggers')
      .addItem('üöÄ Configuraci√≥n Completa', 'configurarTriggerCompleto')
      .addItem('üìÖ Ver Triggers Activos', 'verTriggersActivos')
      .addItem('üõë Detener Triggers', 'detenerTriggers'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üì® Copias de Reportes')
      .addItem('‚öôÔ∏è Configurar/Desactivar', 'configurarCopiasReportes')
      .addItem('üëÅÔ∏è Ver Configuraci√≥n', 'verConfiguracionCopias'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üß™ Pruebas')
      .addItem('üî¨ Probar Sistema Completo', 'probarSistemaCompleto')
      .addItem('üéØ Prueba con Orden Real', 'pruebaNotificacionPersonalizada')
      .addItem('‚úèÔ∏è Prueba R√°pida', 'probarNotificacionRetenidaPersonalizada'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üîç Diagn√≥stico')
      .addItem('üïê Ver Horario Actual', 'verificarHorarioActual')
      .addItem('üìã Ver Log de Errores', 'verLogErrores')
      .addItem('üóëÔ∏è Limpiar Log de Errores', 'limpiarLogErrores'))
    .addSeparator()
    .addItem('üîÑ Ejecutar Reporte Ahora', 'reporteDiario')
    .addItem('üîç Verificar Cambios Ahora', 'verificarCambios')
    .addToUi();
}
