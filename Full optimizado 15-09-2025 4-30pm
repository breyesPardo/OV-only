// ================== CONFIGURACI√ìN Y CONSTANTES ==================
const CONFIG = {
  HOJAS: {
    ordenes: {
      nombre: "OrdenesRetenidas",
      headers: ["Zona", "Cliente", "√ìrden", "Fecha", "Observaci√≥n", "Estado", "Motivo Retenci√≥n"]
    },
    logs: {
      nombre: "LogsLiberaciones",
      headers: ["OrderNum", "Zona", "Cliente", "Fecha Liberaci√≥n", "Hora Liberaci√≥n", "UsuarioID", "Nombre Usuario", "Observaciones", "Estado"]
    },
    control: {
      nombre: "ControlEnvios",
      headers: ["N√∫mero de Orden", "Estado Actual", "Fecha √öltimo Env√≠o", "Hora √öltimo Env√≠o", "Tipo de Notificaci√≥n", "¬øRetenida Notificada Hoy?", "¬øLiberaci√≥n Notificada Hoy?", "Cliente", "Zona"]
    },
    contactos: {
      nombre: "ContactosZonas",
      headers: ["Zona", "Nombre Representante", "WhatsApp", "Email", "Activo"]
    }
  },
  CONTACTOS_INICIALES: [
    ["Zona1Cundinamarca-Boyac√°-Santa", "Juan Camilo Gil Orjuela", "3182260739", "", "SI"],
    ["Zona2-Cundinamarca", "Sergio Andres Rojas Sanchez", "3182260739", "", "SI"],
    ["Zona3-Boyac√°", "Yury Fonseca Patarroyo", "3182260739", "", "SI"],
    ["Zona4-Santander-Cesar", "Oscar Fernando Chingate Cruz", "3182260739", "", "SI"],
    ["Zona5-Norte de Santander", "Freddy Andres Bastianelli Fontana", "3182260739", "", "SI"],
    ["Zona6-Suroeste Antioque√±o", "Carlos Andres Arboleda Tabares", "3182260739", "", "SI"],
    ["Zona7-Oriente y Nte Antioqu√≠a", "Rafael Leonardo Pe√±a Sarmiento", "3182260739", "", "SI"],
    ["Zona8-Meta", "Ximena Nathalia Nu√±ez Cruz", "3182260739", "", "SI"],
    ["Zona9-Casanar√©", "Angel Alonso Vasquez Morales", "3182260739", "", "SI"],
    ["Zona10-Tolima Centro - Norte", "Assad Fraija Lopera", "3182260739", "", "SI"],
    ["Zona11-Tolima Sur y Oriente", "Edna Liliana Portillo", "3182260739", "", "SI"],
    ["Zona12-Huila Norte", "Domingo Jose Soto Martinez", "3182260739", "", "SI"],
    ["Zona14-HuilaCentroSur-Caquet√°", "Ivan Dario Lopez Rubio", "3182260739", "", "SI"],
    ["Zona15-Cauca", "Claudia Patricia Ussa", "3182260739", "", "SI"],
    ["Zona16-Nari√±o", "Carlos Alberto Castillo √ëa√±ez", "3182260739", "", "SI"],
    ["Zona17-Valle", "Diego Herney Guisa Velasquez", "3182260739", "", "SI"],
    ["Zona18-Eje Cafetero", "Juan Pablo Londo√±o Aristizabal", "3182260739", "", "SI"],
    ["Zona 19 Palma", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 20 Urab√°", "Gadelia Gliseth Gomez Gomez", "3182260739", "", "SI"],
    ["Zona 21 Ca√±a", "Juan Pablo Carranza", "3182260739", "", "SI"],
    ["Zona 23 - Caribe seco", "Sandra Judith Castillo", "3182260739", "", "SI"],
    ["Zona 25 Flores", "Javier Leonardo Erazo Velandia", "3182260739", "", "SI"],
    ["Ecuador", "Sandra Valverde", "3182260739", "", "SI"],
    ["Licitaciones Colinagro", "Sandra Valverde", "3182260739", "", "SI"],
    ["Bolivia", "Representante sin asignar", "3182260739", "", "SI"],
    ["Gerencia General", "Representante sin asignar", "3182260739", "", "SI"],
    ["Republica Dominicana", "Representante sin asignar", "3182260739", "", "SI"]
  ]
};

// Cache y utilidades
const CACHE = { credenciales: null, contactos: null, ultimaCarga: 0 };
const SHEETS_CACHE = {};
const PREPOSICIONES = new Set(['de', 'del', 'la', 'las', 'los', 'da', 'do', 'dos']);

// ================== FUNCIONES AUXILIARES ==================
const showAlert = (titulo, mensaje) => SpreadsheetApp.getUi().alert(titulo, mensaje, SpreadsheetApp.getUi().ButtonSet.OK);

function getCredenciales() {
  if (CACHE.credenciales) return CACHE.credenciales;
  
  const props = PropertiesService.getScriptProperties();
  CACHE.credenciales = {
    DB: {
      url: props.getProperty('DB_URL'),
      user: props.getProperty('DB_USER'),
      pass: props.getProperty('DB_PASS')
    },
    API: {
      url: props.getProperty('API_URL'),
      token: props.getProperty('API_TOKEN'),
      channel: props.getProperty('API_CHANNEL')
    }
  };
  
  return CACHE.credenciales;
}

function getSheet(nombre, headers = null, crear = true) {
  if (SHEETS_CACHE[nombre]) return SHEETS_CACHE[nombre];
  
  let hoja = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(nombre);
  
  if (!hoja && crear) {
    hoja = SpreadsheetApp.getActiveSpreadsheet().insertSheet(nombre);
    if (headers) {
      hoja.getRange(1, 1, 1, headers.length).setValues([headers])
        .setFontWeight("bold").setBackground("#4285f4").setFontColor("white");
      hoja.setFrozenRows(1);
      hoja.autoResizeColumns(1, headers.length);
    }
  }
  
  if (hoja) SHEETS_CACHE[nombre] = hoja;
  return hoja;
}

function formatDate(fecha, formato = "dd/MM/yyyy") {
  if (!fecha) return "Sin fecha";
  try {
    const fechaObj = fecha instanceof Date ? fecha : new Date(fecha);
    return Utilities.formatDate(fechaObj, "America/Bogota", formato);
  } catch (e) {
    return String(fecha);
  }
}

function procesarFecha(fechaString) {
  if (!fechaString) return "";
  fechaString = String(fechaString);
  
  // Si ya est√° en formato DD/MM/YYYY, retornarlo
  if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(fechaString)) return fechaString;
  
  // Si est√° en formato YYYY-MM-DD (con o sin hora)
  if (/^\d{4}-\d{2}-\d{2}/.test(fechaString)) {
    try {
      const soloFecha = fechaString.split(/[T\s]/)[0];
      const [a√±o, mes, dia] = soloFecha.split('-');
      return `${dia.padStart(2, '0')}/${mes.padStart(2, '0')}/${a√±o}`;
    } catch (e) {}
  }
  
  // Si es un objeto Date
  if (fechaString instanceof Date || !isNaN(Date.parse(fechaString))) {
    try {
      const fecha = fechaString instanceof Date ? fechaString : new Date(fechaString);
      return formatDate(fecha, "dd/MM/yyyy");
    } catch (e) {}
  }
  
  return fechaString;
}

// Funci√≥n para corregir fechas existentes (puedes ejecutar esto manualmente)
function corregirFechasOrdenesRetenidas() {
  const hoja = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("OrdenesRetenidas");
  if (!hoja || hoja.getLastRow() <= 1) return;
  
  const rango = hoja.getRange(2, 4, hoja.getLastRow() - 1, 1); // Columna D
  const valores = rango.getValues();
  
  const valoresCorregidos = valores.map(([fecha]) => {
    if (!fecha) return [""];
    
    let fechaStr = String(fecha);
    
    // Si contiene "undefined"
    if (fechaStr.includes("undefined")) {
      return [""];
    }
    
    // Si est√° en formato YYYY-MM-DD
    if (fechaStr.match(/^\d{4}-\d{2}-\d{2}/)) {
      const partes = fechaStr.split(/[-T\s]/)[0].split('-');
      if (partes.length === 3) {
        return [`${partes[2]}/${partes[1]}/${partes[0]}`];
      }
    }
    
    // Si ya est√° bien formateado DD/MM/YYYY
    if (fechaStr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
      return [fechaStr];
    }
    
    // Si es un objeto Date
    if (fecha instanceof Date) {
      return [formatDate(fecha, "dd/MM/yyyy")];
    }
    
    return [fechaStr];
  });
  
  rango.setValues(valoresCorregidos);
  showAlert("‚úÖ Fechas Corregidas", "Las fechas han sido corregidas exitosamente");
}

// ================== GESTI√ìN DE CREDENCIALES ==================
function verPropiedadesGuardadas() {
  const propiedades = PropertiesService.getScriptProperties().getKeys();
  showAlert('üîê Credenciales guardadas',
    propiedades.length ? propiedades.map(p => `‚Ä¢ ${p}`).join('\n') : 'No hay credenciales guardadas');
}

function actualizarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const credencial = ui.prompt('Actualizar Credencial',
    'Opciones: DB_URL, DB_USER, DB_PASS, API_URL, API_TOKEN, API_CHANNEL',
    ui.ButtonSet.OK_CANCEL);
  
  if (credencial.getSelectedButton() !== ui.Button.OK) return;
  
  const nombre = credencial.getResponseText().trim();
  const validas = ['DB_URL', 'DB_USER', 'DB_PASS', 'API_URL', 'API_TOKEN', 'API_CHANNEL'];
  
  if (!validas.includes(nombre)) {
    showAlert('‚ùå Error', 'Credencial no v√°lida');
    return;
  }
  
  const valor = ui.prompt('Nuevo Valor', `Ingresa el nuevo valor para ${nombre}:`, ui.ButtonSet.OK_CANCEL);
  
  if (valor.getSelectedButton() === ui.Button.OK) {
    PropertiesService.getScriptProperties().setProperty(nombre, valor.getResponseText());
    CACHE.credenciales = null;
    showAlert('‚úÖ √âxito', `${nombre} actualizada`);
  }
}

function eliminarCredencial() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const propiedades = props.getKeys();
  
  if (!propiedades.length) {
    showAlert('Sin Credenciales', 'No hay credenciales guardadas');
    return;
  }
  
  const response = ui.prompt('Eliminar Credencial',
    'Credenciales:\n' + propiedades.join('\n'),
    ui.ButtonSet.OK_CANCEL);
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const credencial = response.getResponseText().trim();
    if (propiedades.includes(credencial)) {
      props.deleteProperty(credencial);
      CACHE.credenciales = null;
      showAlert('‚úÖ √âxito', `${credencial} eliminada`);
    }
  }
}

// ================== CONFIGURACI√ìN INICIAL ==================
function configuracionInicial() {
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre, CONFIG.HOJAS.contactos.headers);
  
  if (hojaContactos.getLastRow() === 1) {
    hojaContactos.getRange(2, 1, CONFIG.CONTACTOS_INICIALES.length, 5)
      .setValues(CONFIG.CONTACTOS_INICIALES);
    showAlert('‚úÖ Configuraci√≥n', 'Hoja de contactos creada con datos iniciales');
  }
}

function cargarContactosZonas() {
  // Usar cache si es reciente (5 minutos)
  if (CACHE.contactos && (Date.now() - CACHE.ultimaCarga) < 300000) {
    return CACHE.contactos;
  }
  
  const hojaContactos = getSheet(CONFIG.HOJAS.contactos.nombre);
  if (!hojaContactos) throw new Error("No se encontr√≥ ContactosZonas");
  
  const datos = hojaContactos.getDataRange().getValues();
  const zonaANumero = {};
  const zonaANombre = {};
  
  for (let i = 1; i < datos.length; i++) {
    const [zona, nombre, whatsapp, , activo] = datos[i];
    
    if (String(activo).trim().toUpperCase() === "SI" && zona && whatsapp) {
      const zonaLimpia = String(zona).trim();
      const whatsappLimpio = String(whatsapp).trim().replace(/\D/g, '');
      
      zonaANumero[zonaLimpia] = whatsappLimpio;
      zonaANombre[zonaLimpia] = String(nombre).trim() || "Representante sin asignar";
    }
  }
  
  CACHE.contactos = { zonaANumero, zonaANombre };
  CACHE.ultimaCarga = Date.now();
  
  return CACHE.contactos;
}

// ================== GESTI√ìN DE TRIGGERS ==================
function configurarTriggers(tipo) {
  configuracionInicial();
  
  // Eliminar triggers existentes
  ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
  
  // Crear triggers
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(7).everyDays(1).create();
  
  const funcionVerificacion = tipo === 'laboral' ? 'verificarCambiosHorarioLaboral' : 'verificarCambios';
  ScriptApp.newTrigger(funcionVerificacion).timeBased().everyMinutes(5).create();
  
  showAlert('‚úÖ Sistema Configurado',
    tipo === 'laboral'
      ? 'Verificaciones solo en horario laboral (8 AM - 6 PM)'
      : 'Verificaciones las 24 horas');
}

// Funciones de trigger
const configurarTriggersDiarios = () => configurarTriggers('24horas');
const configurarTriggersHorarioLaboral = () => configurarTriggers('laboral');
const reporteDiario = () => actualizarYEnviarOrdenesCredito(true);
const verificarCambios = () => actualizarYEnviarOrdenesCredito(false);

function verificarCambiosHorarioLaboral() {
  const hora = new Date().getHours();
  if (hora >= 8 && hora < 18) {
    verificarCambios();
  }
}

function configurarTriggerCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  const horaReporte = parseInt(ui.prompt('‚è∞ Hora del Reporte',
    'Ingresa la hora (0-23):', ui.ButtonSet.OK_CANCEL).getResponseText());
  
  if (isNaN(horaReporte) || horaReporte < 0 || horaReporte > 23) {
    showAlert('‚ùå Error', 'Hora inv√°lida');
    return;
  }
  
  const tipoVerificacion = ui.alert('üîÑ Tipo de Verificaci√≥n',
    'YES = 24 horas\nNO = Solo horario laboral',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (tipoVerificacion === ui.Button.CANCEL) return;
  
  configuracionInicial();
  
  // Eliminar y crear triggers
  ScriptApp.getProjectTriggers().forEach(trigger => ScriptApp.deleteTrigger(trigger));
  ScriptApp.newTrigger('reporteDiario').timeBased().atHour(horaReporte).everyDays(1).create();
  
  const funcionVerificacion = tipoVerificacion === ui.Button.YES ? 'verificarCambios' : 'verificarCambiosHorarioLaboral';
  ScriptApp.newTrigger(funcionVerificacion).timeBased().everyMinutes(5).create();
  
  showAlert('‚úÖ Configuraci√≥n Completa', 'Sistema configurado correctamente');
}

function verTriggersActivos() {
  const triggers = ScriptApp.getProjectTriggers();
  showAlert('üìÖ Triggers Activos',
    triggers.length
      ? triggers.map((t, i) => `${i + 1}. ${t.getHandlerFunction()}`).join('\n')
      : 'No hay triggers configurados');
}

function detenerTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
  showAlert('üõë Triggers Detenidos', `Se eliminaron ${triggers.length} triggers`);
}

// ================== FUNCI√ìN PRINCIPAL ==================
function actualizarYEnviarOrdenesCredito(esReporteDiario = true) {
  const credenciales = getCredenciales();
  
  // Verificar credenciales
  if (!credenciales.DB.url || !credenciales.DB.user || !credenciales.DB.pass) {
    showAlert('‚ùå Error', 'Faltan credenciales de base de datos');
    return;
  }
  
  // Obtener hojas
  const sheets = {};
  Object.entries(CONFIG.HOJAS).forEach(([key, config]) => {
    if (key !== 'contactos') {
      sheets[key] = getSheet(config.nombre, config.headers);
    }
  });
  
  // Limpiar hoja de √≥rdenes
  sheets.ordenes.clear();
  sheets.ordenes.getRange(1, 1, 1, CONFIG.HOJAS.ordenes.headers.length)
    .setValues([CONFIG.HOJAS.ordenes.headers]);
  
  const controlData = {};
  const hoy = formatDate(new Date());
  
  // Cargar datos de control existentes
  if (sheets.control.getLastRow() > 1) {
    const datos = sheets.control.getDataRange().getValues();
    
    for (let i = 1; i < datos.length; i++) {
      const [orden, estado, fechaEnvio, horaEnvio, tipoNotificacion, enviadoHoyRetenida, enviadoHoyLiberada, cliente, zona] = datos[i];
      controlData[orden] = {
        estado, fechaEnvio, horaEnvio, tipoNotificacion,
        enviadoHoyRetenida: (fechaEnvio === hoy) ? enviadoHoyRetenida : "NO",
        enviadoHoyLiberada: (fechaEnvio === hoy) ? enviadoHoyLiberada : "NO",
        cliente, zona, fila: i + 1
      };
    }
  }
  
  let conn;
  try {
    conn = Jdbc.getConnection(credenciales.DB.url, credenciales.DB.user, credenciales.DB.pass);
    const ordenesRetenidasActuales = new Map();
    const ordenesLiberadasActuales = new Map();
    
    // Procesar √≥rdenes retenidas
    procesarOrdenesRetenidas(conn, sheets, ordenesRetenidasActuales);
    
    // Procesar √≥rdenes liberadas
    procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales);
    
    // Preparar √≥rdenes para env√≠o
    const ordenesParaEnviar = prepararOrdenesParaEnvio(
      ordenesRetenidasActuales,
      ordenesLiberadasActuales,
      controlData,
      esReporteDiario
    );
    
    // Enviar notificaciones
    enviarNotificaciones(ordenesParaEnviar, sheets, controlData, hoy, formatDate(new Date(), "HH:mm:ss"));
    
  } catch (e) {
    Logger.log(`ERROR: ${e.message}`);
    throw e;
  } finally {
    if (conn) conn.close();
  }
}

// Funciones auxiliares para procesar √≥rdenes
function procesarOrdenesRetenidas(conn, sheets, ordenesRetenidasActuales) {
  const query = `
    SELECT d.OrderHed_OrderNum, 
           CONVERT(VARCHAR(10), d.OrderHed_OrderDate, 103) AS Fecha,
           d.Zona, d.Customer_Name, d.ObservacionesRetencionCredito
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
    WHERE d.CreditoRetenido = 1 AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil'
      AND (d.CreditOverride IS NULL OR d.CreditOverride = 0)
    ORDER BY d.OrderHed_OrderNum DESC`;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  const filasOrdenes = [];
  const ordenesVistas = new Set();
  
  while (results.next()) {
    const orden = results.getString("OrderHed_OrderNum");
    if (ordenesVistas.has(orden)) continue;
    ordenesVistas.add(orden);
    
    const datos = {
      zona: results.getString("Zona"),
      cliente: results.getString("Customer_Name"),
      fecha: results.getString("Fecha") || "",
      observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
    };
    
    filasOrdenes.push([
      datos.zona, datos.cliente, orden, datos.fecha,
      `${orden}: ${datos.observacion}`, "RETENIDA", "CR√âDITO"
    ]);
    
    ordenesRetenidasActuales.set(orden, datos);
  }
  
  stmt.close();
  
  if (filasOrdenes.length > 0) {
    sheets.ordenes.getRange(2, 1, filasOrdenes.length, CONFIG.HOJAS.ordenes.headers.length)
      .setValues(filasOrdenes);
  }
}

function procesarOrdenesLiberadas(conn, sheets, ordenesLiberadasActuales) {
  const query = `
    SELECT d.OrderHed_OrderNum, d.Zona, d.Customer_Name,
           CONVERT(VARCHAR(10), d.FechaLiberacionCredito, 103) AS Fecha,
           CONVERT(VARCHAR(8), d.HoraLiberacionCredito, 108) AS HoraLiberacionCredito,
           oh.CreditOverrideUserID, u.Name, d.ObservacionesRetencionCredito
    FROM EpicorRepTran.dbo.udvPortalCustDtlOV d WITH (NOLOCK)
    JOIN EpicorRepTran.dbo.OrderHed oh WITH (NOLOCK) 
      ON d.OrderHed_OrderNum = oh.OrderNum AND d.OrderHed_Company = oh.Company
    LEFT JOIN EpicorTrain10.dbo.UserFile u WITH (NOLOCK) 
      ON oh.CreditOverrideUserID = u.DcdUserID
    WHERE d.CreditoRetenido = 0 AND d.OrderHed_VoidOrder = 0 
      AND d.Zona != 'Comercial Agrosoil' AND oh.CreditOverride = 1 
      AND d.FechaLiberacionCredito IS NOT NULL
      AND d.FechaLiberacionCredito >= DATEADD(day, -1, GETDATE())
    ORDER BY d.FechaLiberacionCredito DESC`;
  
  const stmt = conn.createStatement();
  const results = stmt.executeQuery(query);
  const dataLiberadas = [];
  
  while (results.next()) {
    const ordenNum = results.getString("OrderHed_OrderNum");
    
    const datosLiberacion = {
      zona: results.getString("Zona"),
      cliente: results.getString("Customer_Name"),
      fecha: procesarFecha(results.getString("Fecha") || ""),
      hora: results.getString("HoraLiberacionCredito") || "",
      observacion: (results.getString("ObservacionesRetencionCredito") || "SIN OBSERVACIONES").toUpperCase()
    };
    
    dataLiberadas.push([
      ordenNum,
      datosLiberacion.zona,
      datosLiberacion.cliente,
      datosLiberacion.fecha || "",
      datosLiberacion.hora || "",
      results.getString("CreditOverrideUserID") || "",
      results.getString("Name") || "",
      datosLiberacion.observacion,
      "LIBERADA"
    ]);
    
    ordenesLiberadasActuales.set(ordenNum, datosLiberacion);
  }
  
  stmt.close();
  
  if (dataLiberadas.length > 0) {
    const marcaTiempo = formatDate(new Date(), "dd/MM/yyyy HH:mm:ss");
    const datosConSeparador = [...dataLiberadas,
      ["", "", "", "", "", "", "", "", `‚Üê Nuevas liberaciones: ${marcaTiempo}`]];
    
    sheets.logs.insertRowsAfter(1, datosConSeparador.length);
    sheets.logs.getRange(2, 1, datosConSeparador.length, CONFIG.HOJAS.logs.headers.length)
      .setValues(datosConSeparador);
  }
}

function prepararOrdenesParaEnvio(ordenesRetenidasActuales, ordenesLiberadasActuales, controlData, esReporteDiario) {
  const ordenesParaEnviar = [];
  
  // Procesar √≥rdenes retenidas
  ordenesRetenidasActuales.forEach((datos, orden) => {
    const control = controlData[orden];
    let debeEnviar = false;
    let tipo = '';
    
    if (!control) {
      debeEnviar = true;
      tipo = 'Nueva orden retenida';
    } else if (control.estado === 'LIBERADA' && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Orden volvi√≥ a retenci√≥n';
    } else if (esReporteDiario && control.enviadoHoyRetenida === "NO") {
      debeEnviar = true;
      tipo = 'Reporte diario 7:00 AM';
    }
    
    if (debeEnviar) {
      ordenesParaEnviar.push({ orden, tipo, datos, esLiberada: false });
    }
  });
  
  // Procesar √≥rdenes liberadas
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    const control = controlData[orden];
    
    if ((control && control.estado === 'RETENIDA' && control.enviadoHoyLiberada === "NO") || !control) {
      ordenesParaEnviar.push({
        orden,
        tipo: 'Orden liberada',
        datos: datosLiberacion,
        esLiberada: true
      });
    }
  });
  
  // Actualizar control para √≥rdenes liberadas nuevas
  ordenesLiberadasActuales.forEach((datosLiberacion, orden) => {
    if (!controlData[orden]) {
      controlData[orden] = {
        estado: 'LIBERADA',
        fechaEnvio: formatDate(new Date()),
        horaEnvio: formatDate(new Date(), "HH:mm:ss"),
        tipoNotificacion: 'Orden liberada',
        enviadoHoyRetenida: "NO",
        enviadoHoyLiberada: "NO",
        cliente: datosLiberacion.cliente,
        zona: datosLiberacion.zona,
        fila: null
      };
    }
  });
  
  return ordenesParaEnviar;
}

// ================== ENV√çO DE NOTIFICACIONES ==================
function enviarNotificaciones(ordenesParaEnviar, sheets, controlData, fechaHoy, horaActual) {
  if (ordenesParaEnviar.length === 0) return;
  
  const credenciales = getCredenciales();
  if (!credenciales.API.url || !credenciales.API.token || !credenciales.API.channel) {
    showAlert('‚ùå Error', 'Faltan credenciales de API');
    return;
  }
  
  // Verificar configuraci√≥n de copias
  const props = PropertiesService.getScriptProperties();
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = props.getProperty('NUMERO_COPIA');
  const zonasCopia = props.getProperty('ZONAS_COPIA');
  
  let zonasPermitidasCopia = null;
  if (copiaActiva && numeroCopia && zonasCopia && zonasCopia !== 'TODAS') {
    zonasPermitidasCopia = new Set(zonasCopia.split(','));
  }
  
  const contactos = cargarContactosZonas();
  const fechaReporte = formatDate(new Date(), "dd/MM/yyyy HH:mm:ss");
  const actualizacionesControl = [];
  
  // Procesar m√°ximo 200 √≥rdenes
  const ordenesAProcesar = ordenesParaEnviar.slice(0, 200);
  
  ordenesAProcesar.forEach(({ orden, tipo, datos, esLiberada }) => {
    const numeroWhatsApp = contactos.zonaANumero[datos.zona] || "3182260739";
    const representante = contactos.zonaANombre[datos.zona] || "Representante sin asignar";
    const telefono = "57" + numeroWhatsApp;
    const representanteCorto = formatearNombreCorto(representante);
    
    const mensaje = esLiberada ? '‚úÖ ORDEN LIBERADA' :
      tipo.includes('Nueva') ? 'üÜï NUEVA ORDEN RETENIDA' :
        tipo.includes('volvi√≥') ? '‚ö†Ô∏è ORDEN VOLVI√ì A RETENCI√ìN' :
          'üìä REPORTE DIARIO 7:00 AM';
    
    const params = esLiberada ? {
      "1": `#${orden}`,
      "2": procesarFecha(datos.fecha) + (datos.hora ? " " + datos.hora : ""),
      "3": datos.cliente,
      "4": datos.zona,
      "5": representanteCorto,
      "6": datos.observacion,
      "7": "3103149259"
    } : {
      "1": fechaReporte,
      "2": representanteCorto,
      "3": datos.zona,
      "4": datos.cliente,
      "5": `${mensaje} üîπ Orden #${orden} | ${procesarFecha(datos.fecha)}`,
      "6": `üìÑ Orden #${orden}: ${datos.observacion}`,
      "7": "3103149259"
    };
    
    // Enviar notificaci√≥n principal
    const enviado = enviarNotificacionConReintentos(
      credenciales, telefono, esLiberada, params, orden, tipo
    );
    
    if (enviado) {
      const controlExistente = controlData[orden];
      
      actualizacionesControl.push({
        orden,
        estado: esLiberada ? 'LIBERADA' : 'RETENIDA',
        fechaEnvio: fechaHoy,
        horaEnvio: horaActual,
        tipoNotificacion: tipo,
        enviadoHoyRetenida: !esLiberada ? "SI" : (controlExistente?.enviadoHoyRetenida || "NO"),
        enviadoHoyLiberada: esLiberada ? "SI" : (controlExistente?.enviadoHoyLiberada || "NO"),
        cliente: datos.cliente,
        zona: datos.zona,
        fila: controlExistente?.fila
      });
      
      // Enviar copia si est√° configurada
      if (copiaActiva && numeroCopia) {
        const debeEnviarCopia = !zonasPermitidasCopia || zonasPermitidasCopia.has(datos.zona);
        if (debeEnviarCopia) {
          enviarNotificacionConReintentos(
            credenciales, "57" + numeroCopia, esLiberada, params, orden, `copia_${tipo}`
          );
        }
      }
    }
    
    Utilities.sleep(1000);
  });
  
  // Actualizar control
  actualizarControlEnBatch(sheets.control, actualizacionesControl);
  
  // Aplicar formato condicional
  aplicarFormatoCondicional(sheets.control);
}

function enviarNotificacionConReintentos(credenciales, telefono, esLiberada, params, orden, tipo) {
  for (let intento = 0; intento < 3; intento++) {
    try {
      const payload = {
        chatPlatform: "whatsapp",
        chatChannelNumber: credenciales.API.channel,
        platformContactId: telefono,
        ruleNameOrId: esLiberada ? "reporte_ordenes_liberadasv1" : "reporte_ordenes_retenidasv_0",
        params,
        clientPayload: `orden_${tipo}_${orden}_${Date.now()}`
      };
      
      const response = UrlFetchApp.fetch(credenciales.API.url, {
        method: "post",
        contentType: "application/json",
        headers: { "access-token": credenciales.API.token },
        payload: JSON.stringify(payload),
        muteHttpExceptions: true
      });
      
      const texto = response.getContentText();
      const responseData = JSON.parse(texto);
      
      if (texto.includes("success") || (responseData.id && responseData.problems === null)) {
        return true;
      }
      
    } catch (e) {
      Logger.log(`Error enviando ${orden}: ${e.message}`);
    }
    
    if (intento < 2) Utilities.sleep(2000);
  }
  
  return false;
}

function actualizarControlEnBatch(hojaControl, actualizaciones) {
  const actualizacionesExistentes = [];
  const nuevasFilas = [];
  
  actualizaciones.forEach(act => {
    const valores = [
      act.orden, act.estado, act.fechaEnvio, act.horaEnvio,
      act.tipoNotificacion, act.enviadoHoyRetenida, act.enviadoHoyLiberada,
      act.cliente, act.zona
    ];
    
    if (act.fila) {
      actualizacionesExistentes.push({ fila: act.fila, valores });
    } else {
      nuevasFilas.push(valores);
    }
  });
  
  // Actualizar filas existentes
  actualizacionesExistentes.forEach(({ fila, valores }) => {
    hojaControl.getRange(fila, 1, 1, 9).setValues([valores]);
  });
  
  // Agregar nuevas filas
  if (nuevasFilas.length > 0) {
    const ultimaFila = hojaControl.getLastRow();
    hojaControl.getRange(ultimaFila + 1, 1, nuevasFilas.length, 9).setValues(nuevasFilas);
  }
}

function aplicarFormatoCondicional(hojaControl) {
  if (hojaControl.getLastRow() > 1) {
    const rangoEstado = hojaControl.getRange(2, 2, hojaControl.getLastRow() - 1, 1);
    hojaControl.clearConditionalFormatRules();
    
    const reglas = [
      { estado: 'RETENIDA', background: '#ffcdd2', fontColor: '#c62828' },
      { estado: 'LIBERADA', background: '#c8e6c9', fontColor: '#2e7d32' }
    ].map(({ estado, background, fontColor }) =>
      SpreadsheetApp.newConditionalFormatRule()
        .whenTextEqualTo(estado)
        .setBackground(background)
        .setFontColor(fontColor)
        .setRanges([rangoEstado])
        .build()
    );
    
    hojaControl.setConditionalFormatRules(reglas);
    hojaControl.autoResizeColumns(1, 9);
  }
}

// ================== GESTI√ìN DE COPIAS ==================
function configurarCopiasReportes() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  
  const copiaActiva = props.getProperty('COPIA_ACTIVA') === 'SI';
  const numeroCopia = props.getProperty('NUMERO_COPIA') || '';
  const zonasCopia = props.getProperty('ZONAS_COPIA') || '';
  
  const opcion = ui.alert('üì± Gesti√≥n de Copias',
    `Estado actual: ${copiaActiva ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n` +
    `N√∫mero: ${numeroCopia || 'No configurado'}\n` +
    `Zonas: ${zonasCopia || 'TODAS'}\n\n` +
    '¬øQu√© deseas hacer?',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (opcion === ui.Button.CANCEL) return;
  
  if (opcion === ui.Button.NO) {
    props.setProperty('COPIA_ACTIVA', 'NO');
    showAlert('‚úÖ Copias Desactivadas', 'Las copias han sido desactivadas');
    return;
  }
  
  // Configurar nuevas copias
  const numero = ui.prompt('üì± N√∫mero de WhatsApp',
    'Ingresa el n√∫mero (ej: 3182260739):',
    ui.ButtonSet.OK_CANCEL).getResponseText().trim().replace(/\D/g, '');
  
  if (!numero || numero.length < 10) {
    showAlert('‚ùå Error', 'N√∫mero inv√°lido');
    return;
  }
  
  const contactos = cargarContactosZonas();
  const zonasDisponibles = Object.keys(contactos.zonaANumero).sort();
  
  const tipoSeleccion = ui.alert('üåé Selecci√≥n de Zonas',
    'YES = Todas las zonas\nNO = Seleccionar zonas espec√≠ficas',
    ui.ButtonSet.YES_NO_CANCEL);
  
  if (tipoSeleccion === ui.Button.CANCEL) return;
  
  const zonasSeleccionadas = tipoSeleccion === ui.Button.YES
    ? zonasDisponibles
    : seleccionarZonasManual(zonasDisponibles);
  
  if (zonasSeleccionadas.length === 0) return;
  
  props.setProperty('COPIA_ACTIVA', 'SI');
  props.setProperty('NUMERO_COPIA', numero);
  props.setProperty('ZONAS_COPIA', zonasSeleccionadas.join(','));
  
  showAlert('‚úÖ Copias Configuradas',
    `N√∫mero: ${numero}\nZonas: ${zonasSeleccionadas.length} seleccionadas`);
}

function seleccionarZonasManual(zonasDisponibles) {
  const ui = SpreadsheetApp.getUi();
  
  const mensaje = zonasDisponibles.map((zona, i) => `${i + 1}. ${zona}`).join('\n') +
    '\n\nIngresa n√∫meros separados por comas (ej: 1,3,5-8)';
  
  const response = ui.prompt('üåé Selecci√≥n de Zonas', mensaje, ui.ButtonSet.OK_CANCEL);
  
  if (response.getSelectedButton() !== ui.Button.OK) return [];
  
  const seleccion = response.getResponseText().trim().toUpperCase();
  if (seleccion === 'TODAS') return zonasDisponibles;
  if (!seleccion) return [];
  
  const zonasSeleccionadas = [];
  const partes = seleccion.split(',');
  
  partes.forEach(parte => {
    parte = parte.trim();
    if (parte.includes('-')) {
      const [inicio, fin] = parte.split('-').map(n => parseInt(n));
      if (!isNaN(inicio) && !isNaN(fin)) {
        for (let i = inicio; i <= fin && i <= zonasDisponibles.length; i++) {
          if (zonasDisponibles[i - 1]) zonasSeleccionadas.push(zonasDisponibles[i - 1]);
        }
      }
    } else {
      const num = parseInt(parte);
      if (!isNaN(num) && zonasDisponibles[num - 1]) {
        zonasSeleccionadas.push(zonasDisponibles[num - 1]);
      }
    }
  });
  
  return [...new Set(zonasSeleccionadas)];
}

function verConfiguracionCopias() {
  const props = PropertiesService.getScriptProperties();
  showAlert('üìã Configuraci√≥n de Copias',
    `Estado: ${props.getProperty('COPIA_ACTIVA') === 'SI' ? '‚úÖ ACTIVO' : '‚ùå INACTIVO'}\n` +
    `N√∫mero: ${props.getProperty('NUMERO_COPIA') || 'No configurado'}\n` +
    `Zonas: ${props.getProperty('ZONAS_COPIA') || 'TODAS'}`);
}

// ================== ESTAD√çSTICAS ==================
function verEstadisticas() {
  const hojaControl = getSheet(CONFIG.HOJAS.control.nombre, null, false);
  if (!hojaControl || hojaControl.getLastRow() <= 1) {
    showAlert('üìä Estad√≠sticas', 'No hay datos disponibles');
    return;
  }
  
  const datos = hojaControl.getDataRange().getValues().slice(1);
  const hoy = formatDate(new Date());
  const palabrasPrueba = ['PRUEBA', 'TEST', 'TESTING', 'DEMO'];
  
  const stats = datos.reduce((acc, row) => {
    const [orden, estado, fechaEnvio, , tipoMensaje, enviadaRetenida, enviadaLiberada] = row;
    const esPrueba = palabrasPrueba.some(p =>
      String(orden).toUpperCase().includes(p) ||
      String(tipoMensaje).toUpperCase().includes(p)
    );
    
    if (esPrueba) {
      acc.pruebasTotal++;
    } else {
      acc.total++;
      if (estado === 'RETENIDA') acc.retenidas++;
      if (estado === 'LIBERADA') acc.liberadas++;
      if (fechaEnvio === hoy && enviadaRetenida === "SI") acc.enviadasHoyRetenida++;
      if (fechaEnvio === hoy && enviadaLiberada === "SI") acc.enviadasHoyLiberada++;
    }
    return acc;
  }, { total: 0, retenidas: 0, liberadas: 0, enviadasHoyRetenida: 0, enviadasHoyLiberada: 0, pruebasTotal: 0 });
  
  const hojaOrdenes = getSheet(CONFIG.HOJAS.ordenes.nombre, null, false);
  const hojaLogs = getSheet(CONFIG.HOJAS.logs.nombre, null, false);
  
  const ordenesRetenidasActuales = hojaOrdenes ? hojaOrdenes.getLastRow() - 1 : 0;
  const ordenesLiberadasHistorico = hojaLogs ?
    new Set(hojaLogs.getDataRange().getValues().slice(1)
      .filter(row => row[0] && !String(row[0]).includes('‚Üê'))
      .map(row => row[0])).size : 0;
  
  showAlert('üìä ESTAD√çSTICAS DEL SISTEMA',
    `√ìrdenes retenidas actuales: ${ordenesRetenidasActuales}\n` +
    `√ìrdenes liberadas (hist√≥rico): ${ordenesLiberadasHistorico}\n\n` +
    `Total notificaciones: ${stats.total}\n` +
    `‚îú‚îÄ Retenidas: ${stats.retenidas}\n` +
    `‚îî‚îÄ Liberadas: ${stats.liberadas}\n\n` +
    `HOY (${hoy}):\n` +
    `Retenciones notificadas: ${stats.enviadasHoyRetenida}\n` +
    `Liberaciones notificadas: ${stats.enviadasHoyLiberada}\n\n` +
    `Pruebas realizadas: ${stats.pruebasTotal}`);
}

// ================== FUNCIONES DE PRUEBA ==================
function probarSistemaCompleto() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('üß™ Prueba del Sistema', 
    'Se verificar√° todo el sistema. ¬øContinuar?', 
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const resultados = {
    credenciales: '‚è≥',
    baseDatos: '‚è≥',
    hojas: '‚è≥',
    contactos: '‚è≥',
    queries: '‚è≥',
    notificacion: '‚è≥'
  };
  
  // 1. Verificar credenciales
  try {
    const cred = getCredenciales();
    resultados.credenciales = (!cred.DB.url || !cred.DB.user || !cred.DB.pass || 
      !cred.API.url || !cred.API.token || !cred.API.channel) ? '‚ùå' : '‚úÖ';
  } catch (e) {
    resultados.credenciales = '‚ùå';
  }
  
  // 2. Verificar conexi√≥n BD
  if (resultados.credenciales === '‚úÖ') {
    try {
      const cred = getCredenciales();
      const conn = Jdbc.getConnection(cred.DB.url, cred.DB.user, cred.DB.pass);
      const stmt = conn.createStatement();
      stmt.executeQuery("SELECT 1");
      stmt.close();
      conn.close();
      resultados.baseDatos = '‚úÖ';
    } catch (e) {
      resultados.baseDatos = '‚ùå';
    }
  }
  
  // 3. Verificar hojas
  try {
    Object.values(CONFIG.HOJAS).forEach(config => getSheet(config.nombre, config.headers));
    resultados.hojas = '‚úÖ';
  } catch (e) {
    resultados.hojas = '‚ùå';
  }
  
  // 4. Verificar contactos
  try {
    const contactos = cargarContactosZonas();
    resultados.contactos = Object.keys(contactos.zonaANumero).length > 0 ? '‚úÖ' : '‚ùå';
  } catch (e) {
    resultados.contactos = '‚ùå';
  }
  
  // 5. Verificar queries
  resultados.queries = resultados.baseDatos === '‚úÖ' ? '‚úÖ' : '‚ö†Ô∏è';
  
  // 6. Prueba de notificaci√≥n
  if (ui.alert('Prueba de Notificaci√≥n', 
    '¬øEnviar notificaci√≥n de prueba?', 
    ui.ButtonSet.YES_NO) === ui.Button.YES && resultados.credenciales === '‚úÖ') {
    try {
      const cred = getCredenciales();
      const enviado = enviarNotificacionConReintentos(
        cred, "573182260739", false,
        {
          "1": formatDate(new Date(), "dd/MM/yyyy HH:mm:ss"),
          "2": "Sistema",
          "3": "Zona Prueba",
          "4": "Cliente Prueba",
          "5": "üß™ PRUEBA DEL SISTEMA",
          "6": "TEST SISTEMA",
          "7": "3103149259"
        },
        'TEST', 'prueba_sistema'
      );
      resultados.notificacion = enviado ? '‚úÖ' : '‚ùå';
    } catch (e) {
      resultados.notificacion = '‚ùå';
    }
  } else {
    resultados.notificacion = '‚è≠Ô∏è';
  }
  
  // Generar reporte
  const ok = Object.values(resultados).filter(r => r === '‚úÖ').length;
  const error = Object.values(resultados).filter(r => r === '‚ùå').length;
  
  showAlert('üß™ Resultado de la Prueba',
    `RESUMEN: ${ok} OK, ${error} ERROR\n\n` +
    `Credenciales: ${resultados.credenciales}\n` +
    `Base de datos: ${resultados.baseDatos}\n` +
    `Hojas: ${resultados.hojas}\n` +
    `Contactos: ${resultados.contactos}\n` +
    `Queries: ${resultados.queries}\n` +
    `Notificaci√≥n: ${resultados.notificacion}\n\n` +
    (error > 0 ? '‚ö†Ô∏è Revisar componentes con error' : '‚úÖ SISTEMA FUNCIONANDO CORRECTAMENTE'));
}

function ejecutarPrueba(nombrePrueba, esLiberada = false) {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(`Prueba de ${esLiberada ? 'Liberaci√≥n' : 'Retenci√≥n'}`,
    'Ingresa el n√∫mero de orden:', ui.ButtonSet.OK_CANCEL);
  
  if (response.getSelectedButton() !== ui.Button.OK) return;
  
  const ordenNum = response.getResponseText().trim();
  if (!ordenNum) {
    showAlert('Error', 'Debes ingresar un n√∫mero de orden');
    return;
  }
  
  // Buscar orden en las hojas
  const nombreHoja = esLiberada ? CONFIG.HOJAS.logs.nombre : CONFIG.HOJAS.ordenes.nombre;
  const hoja = getSheet(nombreHoja, null, false);
  
  if (!hoja) {
    showAlert('Error', 'No hay datos disponibles');
    return;
  }
  
  const datos = hoja.getDataRange().getValues();
  const colOrden = esLiberada ? 0 : 2;
  let ordenEncontrada = null;
  
  for (let i = 1; i < datos.length; i++) {
    if (String(datos[i][colOrden]) === ordenNum) {
      ordenEncontrada = {
        zona: datos[i][esLiberada ? 1 : 0],
        cliente: datos[i][esLiberada ? 2 : 1],
        orden: ordenNum,
        fecha: datos[i][3],
        observacion: esLiberada ? datos[i][7] : datos[i][4].replace(`${ordenNum}: `, '')
      };
      break;
    }
  }
  
  if (!ordenEncontrada) {
    showAlert('Error', `No se encontr√≥ la orden ${ordenNum}`);
    return;
  }
  
  if (ui.alert('Confirmar Prueba',
    `${nombrePrueba}\n\nOrden: ${ordenNum}\nCliente: ${ordenEncontrada.cliente}\nZona: ${ordenEncontrada.zona}`,
    ui.ButtonSet.YES_NO) !== ui.Button.YES) return;
  
  const ordenesParaEnviar = [{
    orden: ordenNum,
    tipo: `${nombrePrueba} (PRUEBA)`,
    datos: ordenEncontrada,
    esLiberada
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, formatDate(new Date()), formatDate(new Date(), "HH:mm:ss"));
  
  showAlert('‚úÖ Prueba Enviada', `Se envi√≥ la notificaci√≥n para la orden ${ordenNum}`);
}

// Funciones de prueba espec√≠ficas
const probarNotificacionOrdenRetenida = () => ejecutarPrueba('Orden Retenida', false);
const probarNotificacionOrdenLiberada = () => ejecutarPrueba('Orden Liberada', true);

function probarNotificacionRetenidaPersonalizada() {
  const ordenNum = 'TEST-' + Date.now();
  const ordenesParaEnviar = [{
    orden: ordenNum,
    tipo: 'Retenci√≥n Personalizada (PRUEBA)',
    datos: {
      zona: 'Zona de Prueba',
      cliente: 'Cliente de Prueba',
      fecha: new Date(),
      observacion: 'PRUEBA DEL SISTEMA'
    },
    esLiberada: false
  }];
  
  const sheets = { control: getSheet(CONFIG.HOJAS.control.nombre, CONFIG.HOJAS.control.headers) };
  enviarNotificaciones(ordenesParaEnviar, sheets, {}, formatDate(new Date()), formatDate(new Date(), "HH:mm:ss"));
  
  showAlert('‚úÖ Prueba Personalizada', 'Notificaci√≥n de prueba enviada');
}

// ================== MEN√ö ==================
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üîß Sistema de √ìrdenes')
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üîê Seguridad')
      .addItem('üëÅÔ∏è Ver Credenciales Guardadas', 'verPropiedadesGuardadas')
      .addItem('‚úèÔ∏è Actualizar Credencial', 'actualizarCredencial')
      .addItem('üóëÔ∏è Eliminar Credencial', 'eliminarCredencial'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('‚öôÔ∏è Configurar Triggers')
      .addItem('üöÄ Configuraci√≥n Completa', 'configurarTriggerCompleto')
      .addItem('üïê Solo 24 horas', 'configurarTriggersDiarios')
      .addItem('üè¢ Solo Horario Laboral', 'configurarTriggersHorarioLaboral')
      .addItem('üìÖ Ver Triggers Activos', 'verTriggersActivos')
      .addItem('üõë Detener Triggers', 'detenerTriggers'))
    .addItem('üìä Ver Estad√≠sticas', 'verEstadisticas')
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üì® Copias de Reportes')
      .addItem('‚öôÔ∏è Configurar/Desactivar', 'configurarCopiasReportes')
      .addItem('üëÅÔ∏è Ver Configuraci√≥n', 'verConfiguracionCopias'))
    .addSeparator()
    .addSubMenu(SpreadsheetApp.getUi().createMenu('üß™ Pruebas')
      .addItem('üî¨ Probar Sistema Completo', 'probarSistemaCompleto')
      .addItem('üìã Probar Retenci√≥n', 'probarNotificacionOrdenRetenida')
      .addItem('‚úÖ Probar Liberaci√≥n', 'probarNotificacionOrdenLiberada')
      .addItem('‚úèÔ∏è Prueba Personalizada', 'probarNotificacionRetenidaPersonalizada'))
    .addSeparator()
    .addItem('üîÑ Ejecutar Reporte Ahora', 'reporteDiario')
    .addItem('üîç Verificar Cambios Ahora', 'verificarCambios')
    .addToUi();
}
